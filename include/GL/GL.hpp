#ifndef GLLLE_H
#define GLLLE_H
#define GLFW_INCLUDE_NONE
#ifndef _WINDOWS_
#undef APIENTRY
#define APIENTRY
#endif

#ifdef _WIN32
#define _WIN32_LEAN_AND_MEAN
#include <Windows.h>
#endif

#include <cstdint>

typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef int8_t GLbyte;
typedef uint8_t GLubyte;
typedef int16_t GLshort;
typedef uint16_t GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef int32_t GLclampx;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef uint16_t GLhalf;
typedef uint16_t GLhalfARB;
typedef int32_t GLfixed;
typedef intptr_t GLintptr;
typedef intptr_t GLintptrARB;
typedef size_t GLsizeiptr;
typedef size_t GLsizeiptrARB;
typedef int64_t GLint64;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64;
typedef uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void ( *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void ( *GLVULKANPROCNV)(void);


//These were missing, maybe not defined by Khronos, but Microsoft?
#ifdef _WIN32

#define WGL_NUMBER_PIXEL_FORMATS_ARB            0x2000
#define WGL_DRAW_TO_WINDOW_ARB                  0x2001
#define WGL_DRAW_TO_BITMAP_ARB                  0x2002
#define WGL_ACCELERATION_ARB                    0x2003
#define WGL_NEED_PALETTE_ARB                    0x2004
#define WGL_NEED_SYSTEM_PALETTE_ARB             0x2005
#define WGL_SWAP_LAYER_BUFFERS_ARB              0x2006
#define WGL_SWAP_METHOD_ARB                     0x2007
#define WGL_NUMBER_OVERLAYS_ARB                 0x2008
#define WGL_NUMBER_UNDERLAYS_ARB                0x2009
#define WGL_TRANSPARENT_ARB                     0x200A
#define WGL_TRANSPARENT_RED_VALUE_ARB           0x2037
#define WGL_TRANSPARENT_GREEN_VALUE_ARB         0x2038
#define WGL_TRANSPARENT_BLUE_VALUE_ARB          0x2039
#define WGL_TRANSPARENT_ALPHA_VALUE_ARB         0x203A
#define WGL_TRANSPARENT_INDEX_VALUE_ARB         0x203B
#define WGL_SHARE_DEPTH_ARB                     0x200C
#define WGL_SHARE_STENCIL_ARB                   0x200D
#define WGL_SHARE_ACCUM_ARB                     0x200E
#define WGL_SUPPORT_GDI_ARB                     0x200F
#define WGL_SUPPORT_OPENGL_ARB                  0x2010
#define WGL_DOUBLE_BUFFER_ARB                   0x2011
#define WGL_STEREO_ARB                          0x2012
#define WGL_PIXEL_TYPE_ARB                      0x2013
#define WGL_COLOR_BITS_ARB                      0x2014
#define WGL_RED_BITS_ARB                        0x2015
#define WGL_RED_SHIFT_ARB                       0x2016
#define WGL_GREEN_BITS_ARB                      0x2017
#define WGL_GREEN_SHIFT_ARB                     0x2018
#define WGL_BLUE_BITS_ARB                       0x2019
#define WGL_BLUE_SHIFT_ARB                      0x201A
#define WGL_ALPHA_BITS_ARB                      0x201B
#define WGL_ALPHA_SHIFT_ARB                     0x201C
#define WGL_ACCUM_BITS_ARB                      0x201D
#define WGL_ACCUM_RED_BITS_ARB                  0x201E
#define WGL_ACCUM_GREEN_BITS_ARB                0x201F
#define WGL_ACCUM_BLUE_BITS_ARB                 0x2020
#define WGL_ACCUM_ALPHA_BITS_ARB                0x2021
#define WGL_DEPTH_BITS_ARB                      0x2022
#define WGL_STENCIL_BITS_ARB                    0x2023
#define WGL_AUX_BUFFERS_ARB                     0x2024

#define WGL_NO_ACCELERATION_ARB                 0x2025
#define WGL_GENERIC_ACCELERATION_ARB            0x2026
#define WGL_FULL_ACCELERATION_ARB               0x2027

#define WGL_SWAP_EXCHANGE_ARB                   0x2028
#define WGL_SWAP_COPY_ARB                       0x2029
#define WGL_SWAP_UNDEFINED_ARB                  0x202A

#define WGL_TYPE_RGBA_ARB                       0x202B
#define WGL_TYPE_COLORINDEX_ARB                 0x202C

#define WGL_CONTEXT_MAJOR_VERSION_ARB			0x2091
#define WGL_CONTEXT_MINOR_VERSION_ARB			0x2092

#endif

#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_FALSE 0
#define GL_TRUE 1
#define GL_POINTS 0x0000
#define GL_LINES 0x0001
#define GL_LINE_LOOP 0x0002
#define GL_LINE_STRIP 0x0003
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_FAN 0x0006
#define GL_QUADS 0x0007
#define GL_NEVER 0x0200
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_ZERO 0
#define GL_ONE 1
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_NONE 0
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_NO_ERROR 0
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_OUT_OF_MEMORY 0x0505
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_VIEWPORT 0x0BA2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_DRAW_BUFFER 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_TEXTURE 0x1702
#define GL_COLOR 0x1800
#define GL_DEPTH 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_INDEX 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_GREEN 0x1904
#define GL_BLUE 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_POINT 0x1B00
#define GL_LINE 0x1B01
#define GL_FILL 0x1B02
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_REPEAT 0x2901
#define GL_CURRENT_BIT 0x00000001
#define GL_POINT_BIT 0x00000002
#define GL_LINE_BIT 0x00000004
#define GL_POLYGON_BIT 0x00000008
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_LIGHTING_BIT 0x00000040
#define GL_FOG_BIT 0x00000080
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_VIEWPORT_BIT 0x00000800
#define GL_TRANSFORM_BIT 0x00001000
#define GL_ENABLE_BIT 0x00002000
#define GL_HINT_BIT 0x00008000
#define GL_EVAL_BIT 0x00010000
#define GL_LIST_BIT 0x00020000
#define GL_TEXTURE_BIT 0x00040000
#define GL_SCISSOR_BIT 0x00080000
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_QUAD_STRIP 0x0008
#define GL_POLYGON 0x0009
#define GL_ACCUM 0x0100
#define GL_LOAD 0x0101
#define GL_RETURN 0x0102
#define GL_MULT 0x0103
#define GL_ADD 0x0104
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_2D 0x0600
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_POINT_TOKEN 0x0701
#define GL_LINE_TOKEN 0x0702
#define GL_POLYGON_TOKEN 0x0703
#define GL_BITMAP_TOKEN 0x0704
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_EXP 0x0800
#define GL_EXP2 0x0801
#define GL_COEFF 0x0A00
#define GL_ORDER 0x0A01
#define GL_DOMAIN 0x0A02
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_POINT_SMOOTH 0x0B10
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LIST_MODE 0x0B30
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_LIST_BASE 0x0B32
#define GL_LIST_INDEX 0x0B33
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_EDGE_FLAG 0x0B43
#define GL_LIGHTING 0x0B50
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_SHADE_MODEL 0x0B54
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_MATERIAL 0x0B57
#define GL_FOG 0x0B60
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_START 0x0B63
#define GL_FOG_END 0x0B64
#define GL_FOG_MODE 0x0B65
#define GL_FOG_COLOR 0x0B66
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_MATRIX_MODE 0x0BA0
#define GL_NORMALIZE 0x0BA1
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_LOGIC_OP 0x0BF1
#define GL_AUX_BUFFERS 0x0C00
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_INDEX_MODE 0x0C30
#define GL_RGBA_MODE 0x0C31
#define GL_RENDER_MODE 0x0C40
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_FOG_HINT 0x0C54
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_STENCIL 0x0D11
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_OFFSET 0x0D13
#define GL_RED_SCALE 0x0D14
#define GL_RED_BIAS 0x0D15
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17
#define GL_GREEN_SCALE 0x0D18
#define GL_GREEN_BIAS 0x0D19
#define GL_BLUE_SCALE 0x0D1A
#define GL_BLUE_BIAS 0x0D1B
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_BIAS 0x0D1F
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_INDEX_BITS 0x0D51
#define GL_RED_BITS 0x0D52
#define GL_GREEN_BITS 0x0D53
#define GL_BLUE_BITS 0x0D54
#define GL_ALPHA_BITS 0x0D55
#define GL_DEPTH_BITS 0x0D56
#define GL_STENCIL_BITS 0x0D57
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_AUTO_NORMAL 0x0D80
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_BORDER 0x1005
#define GL_AMBIENT 0x1200
#define GL_DIFFUSE 0x1201
#define GL_SPECULAR 0x1202
#define GL_POSITION 0x1203
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SPOT_CUTOFF 0x1206
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_2_BYTES 0x1407
#define GL_3_BYTES 0x1408
#define GL_4_BYTES 0x1409
#define GL_EMISSION 0x1600
#define GL_SHININESS 0x1601
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_COLOR_INDEXES 0x1603
#define GL_MODELVIEW 0x1700
#define GL_PROJECTION 0x1701
#define GL_COLOR_INDEX 0x1900
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_BITMAP 0x1A00
#define GL_RENDER 0x1C00
#define GL_FEEDBACK 0x1C01
#define GL_SELECT 0x1C02
#define GL_FLAT 0x1D00
#define GL_SMOOTH 0x1D01
#define GL_S 0x2000
#define GL_T 0x2001
#define GL_R 0x2002
#define GL_Q 0x2003
#define GL_MODULATE 0x2100
#define GL_DECAL 0x2101
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV 0x2300
#define GL_EYE_LINEAR 0x2400
#define GL_OBJECT_LINEAR 0x2401
#define GL_SPHERE_MAP 0x2402
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_OBJECT_PLANE 0x2501
#define GL_EYE_PLANE 0x2502
#define GL_CLAMP 0x2900
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE5 0x3005
#define GL_LIGHT0 0x4000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_DOUBLE 0x140A
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_R3_G3_B2 0x2A10
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB8 0x8051
#define GL_RGB10 0x8052
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGBA8 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_VERTEX_ARRAY 0x8074
#define GL_NORMAL_ARRAY 0x8075
#define GL_COLOR_ARRAY 0x8076
#define GL_INDEX_ARRAY 0x8077
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_ALPHA4 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA12 0x803D
#define GL_ALPHA16 0x803E
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_INTENSITY 0x8049
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY16 0x804D
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_C3F_V3F 0x2A24
#define GL_N3F_V3F 0x2A25
#define GL_C4F_N3F_V3F 0x2A26
#define GL_T2F_V3F 0x2A27
#define GL_T4F_V4F 0x2A28
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_RESCALE_NORMAL 0x803A
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_SINGLE_COLOR 0x81F9
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_MULTISAMPLE 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_NORMAL_MAP 0x8511
#define GL_REFLECTION_MAP 0x8512
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_COMBINE 0x8570
#define GL_COMBINE_RGB 0x8571
#define GL_COMBINE_ALPHA 0x8572
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE2_RGB 0x8582
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE2_ALPHA 0x858A
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND2_RGB 0x8592
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND2_ALPHA 0x859A
#define GL_RGB_SCALE 0x8573
#define GL_ADD_SIGNED 0x8574
#define GL_INTERPOLATE 0x8575
#define GL_SUBTRACT 0x84E7
#define GL_CONSTANT 0x8576
#define GL_PRIMARY_COLOR 0x8577
#define GL_PREVIOUS 0x8578
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_INCR_WRAP 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_POINT_SIZE_MIN 0x8126
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FOG_COORDINATE 0x8451
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_COLOR_SUM 0x8458
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_EQUATION 0x8009
#define GL_CONSTANT_COLOR 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_MIN 0x8007
#define GL_MAX 0x8008
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_CURRENT_QUERY 0x8865
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_ARRAY_BUFFER 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_READ_ONLY 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_SAMPLES_PASSED 0x8914
#define GL_SRC1_ALPHA 0x8589
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_FOG_COORD_SRC 0x8450
#define GL_FOG_COORD 0x8451
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_SRC0_RGB 0x8580
#define GL_SRC1_RGB 0x8581
#define GL_SRC2_RGB 0x8582
#define GL_SRC0_ALPHA 0x8588
#define GL_SRC2_ALPHA 0x858A
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_DELETE_STATUS 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_POINT_SPRITE 0x8861
#define GL_COORD_REPLACE 0x8862
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_SLUMINANCE 0x8C46
#define GL_SLUMINANCE8 0x8C47
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAJOR_VERSION 0x821B
#define GL_MINOR_VERSION 0x821C
#define GL_NUM_EXTENSIONS 0x821D
#define GL_CONTEXT_FLAGS 0x821E
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RG 0x8226
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_RGBA32F 0x8814
#define GL_RGB32F 0x8815
#define GL_RGBA16F 0x881A
#define GL_RGB16F 0x881B
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_FIXED_ONLY 0x891D
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_RGB9_E5 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_RGBA32UI 0x8D70
#define GL_RGB32UI 0x8D71
#define GL_RGBA16UI 0x8D76
#define GL_RGB16UI 0x8D77
#define GL_RGBA8UI 0x8D7C
#define GL_RGB8UI 0x8D7D
#define GL_RGBA32I 0x8D82
#define GL_RGB32I 0x8D83
#define GL_RGBA16I 0x8D88
#define GL_RGB16I 0x8D89
#define GL_RGBA8I 0x8D8E
#define GL_RGB8I 0x8D8F
#define GL_RED_INTEGER 0x8D94
#define GL_GREEN_INTEGER 0x8D95
#define GL_BLUE_INTEGER 0x8D96
#define GL_RGB_INTEGER 0x8D98
#define GL_RGBA_INTEGER 0x8D99
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGRA_INTEGER 0x8D9B
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_INDEX 0x8222
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_HALF_FLOAT 0x140B
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_RG 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R16 0x822A
#define GL_RG8 0x822B
#define GL_RG16 0x822C
#define GL_R16F 0x822D
#define GL_R32F 0x822E
#define GL_RG16F 0x822F
#define GL_RG32F 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_ALPHA_INTEGER 0x8D97
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_DEPTH_CLAMP 0x864F
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_SIGNALED 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_SRC1_COLOR 0x88F9
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_SAMPLER_BINDING 0x8919
#define GL_RGB10_A2UI 0x906F
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIMESTAMP 0x8E28
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_SAMPLE_SHADING 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_PATCHES 0x000E
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_ISOLINES 0x8E7A
#define GL_QUADS 0x0007
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_FIXED 0x140C
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_LOW_FLOAT 0x8DF0
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_HIGH_FLOAT 0x8DF2
#define GL_LOW_INT 0x8DF3
#define GL_MEDIUM_INT 0x8DF4
#define GL_HIGH_INT 0x8DF5
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_RGB565 0x8D62
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_MAX_VIEWPORTS 0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_COMPUTE_SHADER 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_BUFFER 0x82E0
#define GL_SHADER 0x82E1
#define GL_PROGRAM 0x82E2
#define GL_VERTEX_ARRAY 0x8074
#define GL_QUERY 0x82E3
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_SAMPLER 0x82E6
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_COLOR_COMPONENTS 0x8283
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_COLOR_RENDERABLE 0x8286
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_MIPMAP 0x8293
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_COLOR_ENCODING 0x8296
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_FILTER 0x829A
#define GL_VERTEX_TEXTURE 0x829B
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_CLEAR_BUFFER 0x82B4
#define GL_TEXTURE_VIEW 0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_FULL_SUPPORT 0x82B7
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH 0x92F9
#define GL_TYPE 0x92FA
#define GL_ARRAY_SIZE 0x92FB
#define GL_OFFSET 0x92FC
#define GL_BLOCK_INDEX 0x92FD
#define GL_ARRAY_STRIDE 0x92FE
#define GL_MATRIX_STRIDE 0x92FF
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_LOCATION 0x930E
#define GL_LOCATION_INDEX 0x930F
#define GL_IS_PER_PATCH 0x92E7
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_DISPLAY_LIST 0x82E7
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STACK_OVERFLOW 0x0503
#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#define GL_CLEAR_TEXTURE 0x9365
#define GL_LOCATION_COMPONENT 0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX8 0x8D48
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_CONTEXT_LOST 0x0507
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_ZERO_TO_ONE 0x935F
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_DEPTH_MODE 0x935D
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_TEXTURE_TARGET 0x1006
#define GL_QUERY_TARGET 0x82EA
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_BACK 0x0405
#define GL_NO_ERROR 0
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_CONTEXT_LOST 0x0507
#define GL_COLOR_TABLE 0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
#define GL_PROXY_COLOR_TABLE 0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
#define GL_CONVOLUTION_1D 0x8010
#define GL_CONVOLUTION_2D 0x8011
#define GL_SEPARABLE_2D 0x8012
#define GL_HISTOGRAM 0x8024
#define GL_PROXY_HISTOGRAM 0x8025
#define GL_MINMAX 0x802E
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_NONE 0
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_NONE 0
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_SHADER_BINARY_FORMAT_SPIR_V 0x9551
#define GL_SPIR_V_BINARY 0x9552
#define GL_PARAMETER_BUFFER 0x80EE
#define GL_PARAMETER_BUFFER_BINDING 0x80EF
#define GL_CONTEXT_FLAG_NO_ERROR_BIT 0x00000008
#define GL_VERTICES_SUBMITTED 0x82EE
#define GL_PRIMITIVES_SUBMITTED 0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS 0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES 0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS 0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS 0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES 0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES 0x82F7
#define GL_POLYGON_OFFSET_CLAMP 0x8E1B
#define GL_SPIR_V_EXTENSIONS 0x9553
#define GL_NUM_SPIR_V_EXTENSIONS 0x9554
#define GL_TEXTURE_MAX_ANISOTROPY 0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY 0x84FF
#define GL_TRANSFORM_FEEDBACK_OVERFLOW 0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED



void loadGL();

#ifdef _WIN32

typedef HGLRC(WINAPI* PFNWGLCREATECONTEXTATTRIBSARBPROC) (HDC hDC, HGLRC hShareContext, const int* attribList);
extern PFNWGLCREATECONTEXTATTRIBSARBPROC _gl_loader_wglcreatecontextatribsarb;
typedef BOOL(WINAPI* PFNWGLCHOOSEPIXELFORMATARBPROC) (HDC hdc, const int* piAttribIList, const FLOAT* pfAttribFList, UINT nMaxFormats, int* piFormats, UINT* nNumFormats);
extern PFNWGLCHOOSEPIXELFORMATARBPROC _gl_loader_wglchoosepixelformatarb;

#endif

typedef void (APIENTRY *PFNGLACCUMPROC)        (GLenum op, GLfloat value);
extern PFNGLACCUMPROC _gl_loader_glaccum;
typedef void (APIENTRY *PFNGLACTIVESHADERPROGRAMPROC)        (GLuint pipeline, GLuint program);
extern PFNGLACTIVESHADERPROGRAMPROC _gl_loader_glactiveshaderprogram;
typedef void (APIENTRY *PFNGLACTIVETEXTUREPROC)        (GLenum texture);
extern PFNGLACTIVETEXTUREPROC _gl_loader_glactivetexture;
typedef void (APIENTRY *PFNGLALPHAFUNCPROC)        (GLenum func, GLfloat ref);
extern PFNGLALPHAFUNCPROC _gl_loader_glalphafunc;
typedef GLboolean (APIENTRY *PFNGLARETEXTURESRESIDENTPROC)        (GLsizei n, const GLuint * textures, GLboolean * residences);
extern PFNGLARETEXTURESRESIDENTPROC _gl_loader_glaretexturesresident;
typedef void (APIENTRY *PFNGLARRAYELEMENTPROC)        (GLint i);
extern PFNGLARRAYELEMENTPROC _gl_loader_glarrayelement;
typedef void (APIENTRY *PFNGLATTACHSHADERPROC)        (GLuint program, GLuint shader);
extern PFNGLATTACHSHADERPROC _gl_loader_glattachshader;
typedef void (APIENTRY *PFNGLBEGINPROC)        (GLenum mode);
extern PFNGLBEGINPROC _gl_loader_glbegin;
typedef void (APIENTRY *PFNGLBEGINCONDITIONALRENDERPROC)        (GLuint id, GLenum mode);
extern PFNGLBEGINCONDITIONALRENDERPROC _gl_loader_glbeginconditionalrender;
typedef void (APIENTRY *PFNGLBEGINQUERYPROC)        (GLenum target, GLuint id);
extern PFNGLBEGINQUERYPROC _gl_loader_glbeginquery;
typedef void (APIENTRY *PFNGLBEGINQUERYINDEXEDPROC)        (GLenum target, GLuint index, GLuint id);
extern PFNGLBEGINQUERYINDEXEDPROC _gl_loader_glbeginqueryindexed;
typedef void (APIENTRY *PFNGLBEGINTRANSFORMFEEDBACKPROC)        (GLenum primitiveMode);
extern PFNGLBEGINTRANSFORMFEEDBACKPROC _gl_loader_glbegintransformfeedback;
typedef void (APIENTRY *PFNGLBINDATTRIBLOCATIONPROC)        (GLuint program, GLuint index, const GLchar * name);
extern PFNGLBINDATTRIBLOCATIONPROC _gl_loader_glbindattriblocation;
typedef void (APIENTRY *PFNGLBINDBUFFERPROC)        (GLenum target, GLuint buffer);
extern PFNGLBINDBUFFERPROC _gl_loader_glbindbuffer;
typedef void (APIENTRY *PFNGLBINDBUFFERBASEPROC)        (GLenum target, GLuint index, GLuint buffer);
extern PFNGLBINDBUFFERBASEPROC _gl_loader_glbindbufferbase;
typedef void (APIENTRY *PFNGLBINDBUFFERRANGEPROC)        (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern PFNGLBINDBUFFERRANGEPROC _gl_loader_glbindbufferrange;
typedef void (APIENTRY *PFNGLBINDBUFFERSBASEPROC)        (GLenum target, GLuint first, GLsizei count, const GLuint * buffers);
extern PFNGLBINDBUFFERSBASEPROC _gl_loader_glbindbuffersbase;
typedef void (APIENTRY *PFNGLBINDBUFFERSRANGEPROC)        (GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);
extern PFNGLBINDBUFFERSRANGEPROC _gl_loader_glbindbuffersrange;
typedef void (APIENTRY *PFNGLBINDFRAGDATALOCATIONPROC)        (GLuint program, GLuint color, const GLchar * name);
extern PFNGLBINDFRAGDATALOCATIONPROC _gl_loader_glbindfragdatalocation;
typedef void (APIENTRY *PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)        (GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC _gl_loader_glbindfragdatalocationindexed;
typedef void (APIENTRY *PFNGLBINDFRAMEBUFFERPROC)        (GLenum target, GLuint framebuffer);
extern PFNGLBINDFRAMEBUFFERPROC _gl_loader_glbindframebuffer;
typedef void (APIENTRY *PFNGLBINDIMAGETEXTUREPROC)        (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
extern PFNGLBINDIMAGETEXTUREPROC _gl_loader_glbindimagetexture;
typedef void (APIENTRY *PFNGLBINDIMAGETEXTURESPROC)        (GLuint first, GLsizei count, const GLuint * textures);
extern PFNGLBINDIMAGETEXTURESPROC _gl_loader_glbindimagetextures;
typedef void (APIENTRY *PFNGLBINDPROGRAMPIPELINEPROC)        (GLuint pipeline);
extern PFNGLBINDPROGRAMPIPELINEPROC _gl_loader_glbindprogrampipeline;
typedef void (APIENTRY *PFNGLBINDRENDERBUFFERPROC)        (GLenum target, GLuint renderbuffer);
extern PFNGLBINDRENDERBUFFERPROC _gl_loader_glbindrenderbuffer;
typedef void (APIENTRY *PFNGLBINDSAMPLERPROC)        (GLuint unit, GLuint sampler);
extern PFNGLBINDSAMPLERPROC _gl_loader_glbindsampler;
typedef void (APIENTRY *PFNGLBINDSAMPLERSPROC)        (GLuint first, GLsizei count, const GLuint * samplers);
extern PFNGLBINDSAMPLERSPROC _gl_loader_glbindsamplers;
typedef void (APIENTRY *PFNGLBINDTEXTUREPROC)        (GLenum target, GLuint texture);
extern PFNGLBINDTEXTUREPROC _gl_loader_glbindtexture;
typedef void (APIENTRY *PFNGLBINDTEXTUREUNITPROC)        (GLuint unit, GLuint texture);
extern PFNGLBINDTEXTUREUNITPROC _gl_loader_glbindtextureunit;
typedef void (APIENTRY *PFNGLBINDTEXTURESPROC)        (GLuint first, GLsizei count, const GLuint * textures);
extern PFNGLBINDTEXTURESPROC _gl_loader_glbindtextures;
typedef void (APIENTRY *PFNGLBINDTRANSFORMFEEDBACKPROC)        (GLenum target, GLuint id);
extern PFNGLBINDTRANSFORMFEEDBACKPROC _gl_loader_glbindtransformfeedback;
typedef void (APIENTRY *PFNGLBINDVERTEXARRAYPROC)        (GLuint array);
extern PFNGLBINDVERTEXARRAYPROC _gl_loader_glbindvertexarray;
typedef void (APIENTRY *PFNGLBINDVERTEXBUFFERPROC)        (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
extern PFNGLBINDVERTEXBUFFERPROC _gl_loader_glbindvertexbuffer;
typedef void (APIENTRY *PFNGLBINDVERTEXBUFFERSPROC)        (GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
extern PFNGLBINDVERTEXBUFFERSPROC _gl_loader_glbindvertexbuffers;
typedef void (APIENTRY *PFNGLBITMAPPROC)        (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
extern PFNGLBITMAPPROC _gl_loader_glbitmap;
typedef void (APIENTRY *PFNGLBLENDCOLORPROC)        (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFNGLBLENDCOLORPROC _gl_loader_glblendcolor;
typedef void (APIENTRY *PFNGLBLENDEQUATIONPROC)        (GLenum mode);
extern PFNGLBLENDEQUATIONPROC _gl_loader_glblendequation;
typedef void (APIENTRY *PFNGLBLENDEQUATIONSEPARATEPROC)        (GLenum modeRGB, GLenum modeAlpha);
extern PFNGLBLENDEQUATIONSEPARATEPROC _gl_loader_glblendequationseparate;
typedef void (APIENTRY *PFNGLBLENDEQUATIONSEPARATEIPROC)        (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
extern PFNGLBLENDEQUATIONSEPARATEIPROC _gl_loader_glblendequationseparatei;
typedef void (APIENTRY *PFNGLBLENDEQUATIONIPROC)        (GLuint buf, GLenum mode);
extern PFNGLBLENDEQUATIONIPROC _gl_loader_glblendequationi;
typedef void (APIENTRY *PFNGLBLENDFUNCPROC)        (GLenum sfactor, GLenum dfactor);
extern PFNGLBLENDFUNCPROC _gl_loader_glblendfunc;
typedef void (APIENTRY *PFNGLBLENDFUNCSEPARATEPROC)        (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
extern PFNGLBLENDFUNCSEPARATEPROC _gl_loader_glblendfuncseparate;
typedef void (APIENTRY *PFNGLBLENDFUNCSEPARATEIPROC)        (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
extern PFNGLBLENDFUNCSEPARATEIPROC _gl_loader_glblendfuncseparatei;
typedef void (APIENTRY *PFNGLBLENDFUNCIPROC)        (GLuint buf, GLenum src, GLenum dst);
extern PFNGLBLENDFUNCIPROC _gl_loader_glblendfunci;
typedef void (APIENTRY *PFNGLBLITFRAMEBUFFERPROC)        (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
extern PFNGLBLITFRAMEBUFFERPROC _gl_loader_glblitframebuffer;
typedef void (APIENTRY *PFNGLBLITNAMEDFRAMEBUFFERPROC)        (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
extern PFNGLBLITNAMEDFRAMEBUFFERPROC _gl_loader_glblitnamedframebuffer;
typedef void (APIENTRY *PFNGLBUFFERDATAPROC)        (GLenum target, GLsizeiptr size, const void * data, GLenum usage);
extern PFNGLBUFFERDATAPROC _gl_loader_glbufferdata;
typedef void (APIENTRY *PFNGLBUFFERSTORAGEPROC)        (GLenum target, GLsizeiptr size, const void * data, GLbitfield flags);
extern PFNGLBUFFERSTORAGEPROC _gl_loader_glbufferstorage;
typedef void (APIENTRY *PFNGLBUFFERSUBDATAPROC)        (GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
extern PFNGLBUFFERSUBDATAPROC _gl_loader_glbuffersubdata;
typedef void (APIENTRY *PFNGLCALLLISTPROC)        (GLuint list);
extern PFNGLCALLLISTPROC _gl_loader_glcalllist;
typedef void (APIENTRY *PFNGLCALLLISTSPROC)        (GLsizei n, GLenum type, const void * lists);
extern PFNGLCALLLISTSPROC _gl_loader_glcalllists;
typedef GLenum (APIENTRY *PFNGLCHECKFRAMEBUFFERSTATUSPROC)        (GLenum target);
extern PFNGLCHECKFRAMEBUFFERSTATUSPROC _gl_loader_glcheckframebufferstatus;
typedef GLenum (APIENTRY *PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)        (GLuint framebuffer, GLenum target);
extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC _gl_loader_glchecknamedframebufferstatus;
typedef void (APIENTRY *PFNGLCLAMPCOLORPROC)        (GLenum target, GLenum clamp);
extern PFNGLCLAMPCOLORPROC _gl_loader_glclampcolor;
typedef void (APIENTRY *PFNGLCLEARPROC)        (GLbitfield mask);
extern PFNGLCLEARPROC _gl_loader_glclear;
typedef void (APIENTRY *PFNGLCLEARACCUMPROC)        (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFNGLCLEARACCUMPROC _gl_loader_glclearaccum;
typedef void (APIENTRY *PFNGLCLEARBUFFERDATAPROC)        (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data);
extern PFNGLCLEARBUFFERDATAPROC _gl_loader_glclearbufferdata;
typedef void (APIENTRY *PFNGLCLEARBUFFERSUBDATAPROC)        (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
extern PFNGLCLEARBUFFERSUBDATAPROC _gl_loader_glclearbuffersubdata;
typedef void (APIENTRY *PFNGLCLEARBUFFERFIPROC)        (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
extern PFNGLCLEARBUFFERFIPROC _gl_loader_glclearbufferfi;
typedef void (APIENTRY *PFNGLCLEARBUFFERFVPROC)        (GLenum buffer, GLint drawbuffer, const GLfloat * value);
extern PFNGLCLEARBUFFERFVPROC _gl_loader_glclearbufferfv;
typedef void (APIENTRY *PFNGLCLEARBUFFERIVPROC)        (GLenum buffer, GLint drawbuffer, const GLint * value);
extern PFNGLCLEARBUFFERIVPROC _gl_loader_glclearbufferiv;
typedef void (APIENTRY *PFNGLCLEARBUFFERUIVPROC)        (GLenum buffer, GLint drawbuffer, const GLuint * value);
extern PFNGLCLEARBUFFERUIVPROC _gl_loader_glclearbufferuiv;
typedef void (APIENTRY *PFNGLCLEARCOLORPROC)        (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFNGLCLEARCOLORPROC _gl_loader_glclearcolor;
typedef void (APIENTRY *PFNGLCLEARDEPTHPROC)        (GLdouble depth);
extern PFNGLCLEARDEPTHPROC _gl_loader_glcleardepth;
typedef void (APIENTRY *PFNGLCLEARDEPTHFPROC)        (GLfloat d);
extern PFNGLCLEARDEPTHFPROC _gl_loader_glcleardepthf;
typedef void (APIENTRY *PFNGLCLEARINDEXPROC)        (GLfloat c);
extern PFNGLCLEARINDEXPROC _gl_loader_glclearindex;
typedef void (APIENTRY *PFNGLCLEARNAMEDBUFFERDATAPROC)        (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
extern PFNGLCLEARNAMEDBUFFERDATAPROC _gl_loader_glclearnamedbufferdata;
typedef void (APIENTRY *PFNGLCLEARNAMEDBUFFERSUBDATAPROC)        (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC _gl_loader_glclearnamedbuffersubdata;
typedef void (APIENTRY *PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)        (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC _gl_loader_glclearnamedframebufferfi;
typedef void (APIENTRY *PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)        (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value);
extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC _gl_loader_glclearnamedframebufferfv;
typedef void (APIENTRY *PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)        (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value);
extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC _gl_loader_glclearnamedframebufferiv;
typedef void (APIENTRY *PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)        (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value);
extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC _gl_loader_glclearnamedframebufferuiv;
typedef void (APIENTRY *PFNGLCLEARSTENCILPROC)        (GLint s);
extern PFNGLCLEARSTENCILPROC _gl_loader_glclearstencil;
typedef void (APIENTRY *PFNGLCLEARTEXIMAGEPROC)        (GLuint texture, GLint level, GLenum format, GLenum type, const void * data);
extern PFNGLCLEARTEXIMAGEPROC _gl_loader_glclearteximage;
typedef void (APIENTRY *PFNGLCLEARTEXSUBIMAGEPROC)        (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data);
extern PFNGLCLEARTEXSUBIMAGEPROC _gl_loader_glcleartexsubimage;
typedef void (APIENTRY *PFNGLCLIENTACTIVETEXTUREPROC)        (GLenum texture);
extern PFNGLCLIENTACTIVETEXTUREPROC _gl_loader_glclientactivetexture;
typedef GLenum (APIENTRY *PFNGLCLIENTWAITSYNCPROC)        (GLsync sync, GLbitfield flags, GLuint64 timeout);
extern PFNGLCLIENTWAITSYNCPROC _gl_loader_glclientwaitsync;
typedef void (APIENTRY *PFNGLCLIPCONTROLPROC)        (GLenum origin, GLenum depth);
extern PFNGLCLIPCONTROLPROC _gl_loader_glclipcontrol;
typedef void (APIENTRY *PFNGLCLIPPLANEPROC)        (GLenum plane, const GLdouble * equation);
extern PFNGLCLIPPLANEPROC _gl_loader_glclipplane;
typedef void (APIENTRY *PFNGLCOLOR3BPROC)        (GLbyte red, GLbyte green, GLbyte blue);
extern PFNGLCOLOR3BPROC _gl_loader_glcolor3b;
typedef void (APIENTRY *PFNGLCOLOR3BVPROC)        (const GLbyte * v);
extern PFNGLCOLOR3BVPROC _gl_loader_glcolor3bv;
typedef void (APIENTRY *PFNGLCOLOR3DPROC)        (GLdouble red, GLdouble green, GLdouble blue);
extern PFNGLCOLOR3DPROC _gl_loader_glcolor3d;
typedef void (APIENTRY *PFNGLCOLOR3DVPROC)        (const GLdouble * v);
extern PFNGLCOLOR3DVPROC _gl_loader_glcolor3dv;
typedef void (APIENTRY *PFNGLCOLOR3FPROC)        (GLfloat red, GLfloat green, GLfloat blue);
extern PFNGLCOLOR3FPROC _gl_loader_glcolor3f;
typedef void (APIENTRY *PFNGLCOLOR3FVPROC)        (const GLfloat * v);
extern PFNGLCOLOR3FVPROC _gl_loader_glcolor3fv;
typedef void (APIENTRY *PFNGLCOLOR3IPROC)        (GLint red, GLint green, GLint blue);
extern PFNGLCOLOR3IPROC _gl_loader_glcolor3i;
typedef void (APIENTRY *PFNGLCOLOR3IVPROC)        (const GLint * v);
extern PFNGLCOLOR3IVPROC _gl_loader_glcolor3iv;
typedef void (APIENTRY *PFNGLCOLOR3SPROC)        (GLshort red, GLshort green, GLshort blue);
extern PFNGLCOLOR3SPROC _gl_loader_glcolor3s;
typedef void (APIENTRY *PFNGLCOLOR3SVPROC)        (const GLshort * v);
extern PFNGLCOLOR3SVPROC _gl_loader_glcolor3sv;
typedef void (APIENTRY *PFNGLCOLOR3UBPROC)        (GLubyte red, GLubyte green, GLubyte blue);
extern PFNGLCOLOR3UBPROC _gl_loader_glcolor3ub;
typedef void (APIENTRY *PFNGLCOLOR3UBVPROC)        (const GLubyte * v);
extern PFNGLCOLOR3UBVPROC _gl_loader_glcolor3ubv;
typedef void (APIENTRY *PFNGLCOLOR3UIPROC)        (GLuint red, GLuint green, GLuint blue);
extern PFNGLCOLOR3UIPROC _gl_loader_glcolor3ui;
typedef void (APIENTRY *PFNGLCOLOR3UIVPROC)        (const GLuint * v);
extern PFNGLCOLOR3UIVPROC _gl_loader_glcolor3uiv;
typedef void (APIENTRY *PFNGLCOLOR3USPROC)        (GLushort red, GLushort green, GLushort blue);
extern PFNGLCOLOR3USPROC _gl_loader_glcolor3us;
typedef void (APIENTRY *PFNGLCOLOR3USVPROC)        (const GLushort * v);
extern PFNGLCOLOR3USVPROC _gl_loader_glcolor3usv;
typedef void (APIENTRY *PFNGLCOLOR4BPROC)        (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
extern PFNGLCOLOR4BPROC _gl_loader_glcolor4b;
typedef void (APIENTRY *PFNGLCOLOR4BVPROC)        (const GLbyte * v);
extern PFNGLCOLOR4BVPROC _gl_loader_glcolor4bv;
typedef void (APIENTRY *PFNGLCOLOR4DPROC)        (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
extern PFNGLCOLOR4DPROC _gl_loader_glcolor4d;
typedef void (APIENTRY *PFNGLCOLOR4DVPROC)        (const GLdouble * v);
extern PFNGLCOLOR4DVPROC _gl_loader_glcolor4dv;
typedef void (APIENTRY *PFNGLCOLOR4FPROC)        (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFNGLCOLOR4FPROC _gl_loader_glcolor4f;
typedef void (APIENTRY *PFNGLCOLOR4FVPROC)        (const GLfloat * v);
extern PFNGLCOLOR4FVPROC _gl_loader_glcolor4fv;
typedef void (APIENTRY *PFNGLCOLOR4IPROC)        (GLint red, GLint green, GLint blue, GLint alpha);
extern PFNGLCOLOR4IPROC _gl_loader_glcolor4i;
typedef void (APIENTRY *PFNGLCOLOR4IVPROC)        (const GLint * v);
extern PFNGLCOLOR4IVPROC _gl_loader_glcolor4iv;
typedef void (APIENTRY *PFNGLCOLOR4SPROC)        (GLshort red, GLshort green, GLshort blue, GLshort alpha);
extern PFNGLCOLOR4SPROC _gl_loader_glcolor4s;
typedef void (APIENTRY *PFNGLCOLOR4SVPROC)        (const GLshort * v);
extern PFNGLCOLOR4SVPROC _gl_loader_glcolor4sv;
typedef void (APIENTRY *PFNGLCOLOR4UBPROC)        (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
extern PFNGLCOLOR4UBPROC _gl_loader_glcolor4ub;
typedef void (APIENTRY *PFNGLCOLOR4UBVPROC)        (const GLubyte * v);
extern PFNGLCOLOR4UBVPROC _gl_loader_glcolor4ubv;
typedef void (APIENTRY *PFNGLCOLOR4UIPROC)        (GLuint red, GLuint green, GLuint blue, GLuint alpha);
extern PFNGLCOLOR4UIPROC _gl_loader_glcolor4ui;
typedef void (APIENTRY *PFNGLCOLOR4UIVPROC)        (const GLuint * v);
extern PFNGLCOLOR4UIVPROC _gl_loader_glcolor4uiv;
typedef void (APIENTRY *PFNGLCOLOR4USPROC)        (GLushort red, GLushort green, GLushort blue, GLushort alpha);
extern PFNGLCOLOR4USPROC _gl_loader_glcolor4us;
typedef void (APIENTRY *PFNGLCOLOR4USVPROC)        (const GLushort * v);
extern PFNGLCOLOR4USVPROC _gl_loader_glcolor4usv;
typedef void (APIENTRY *PFNGLCOLORMASKPROC)        (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
extern PFNGLCOLORMASKPROC _gl_loader_glcolormask;
typedef void (APIENTRY *PFNGLCOLORMASKIPROC)        (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
extern PFNGLCOLORMASKIPROC _gl_loader_glcolormaski;
typedef void (APIENTRY *PFNGLCOLORMATERIALPROC)        (GLenum face, GLenum mode);
extern PFNGLCOLORMATERIALPROC _gl_loader_glcolormaterial;
typedef void (APIENTRY *PFNGLCOLORP3UIPROC)        (GLenum type, GLuint color);
extern PFNGLCOLORP3UIPROC _gl_loader_glcolorp3ui;
typedef void (APIENTRY *PFNGLCOLORP3UIVPROC)        (GLenum type, const GLuint * color);
extern PFNGLCOLORP3UIVPROC _gl_loader_glcolorp3uiv;
typedef void (APIENTRY *PFNGLCOLORP4UIPROC)        (GLenum type, GLuint color);
extern PFNGLCOLORP4UIPROC _gl_loader_glcolorp4ui;
typedef void (APIENTRY *PFNGLCOLORP4UIVPROC)        (GLenum type, const GLuint * color);
extern PFNGLCOLORP4UIVPROC _gl_loader_glcolorp4uiv;
typedef void (APIENTRY *PFNGLCOLORPOINTERPROC)        (GLint size, GLenum type, GLsizei stride, const void * pointer);
extern PFNGLCOLORPOINTERPROC _gl_loader_glcolorpointer;
typedef void (APIENTRY *PFNGLCOMPILESHADERPROC)        (GLuint shader);
extern PFNGLCOMPILESHADERPROC _gl_loader_glcompileshader;
typedef void (APIENTRY *PFNGLCOMPRESSEDTEXIMAGE1DPROC)        (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
extern PFNGLCOMPRESSEDTEXIMAGE1DPROC _gl_loader_glcompressedteximage1d;
typedef void (APIENTRY *PFNGLCOMPRESSEDTEXIMAGE2DPROC)        (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
extern PFNGLCOMPRESSEDTEXIMAGE2DPROC _gl_loader_glcompressedteximage2d;
typedef void (APIENTRY *PFNGLCOMPRESSEDTEXIMAGE3DPROC)        (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
extern PFNGLCOMPRESSEDTEXIMAGE3DPROC _gl_loader_glcompressedteximage3d;
typedef void (APIENTRY *PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)        (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC _gl_loader_glcompressedtexsubimage1d;
typedef void (APIENTRY *PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)        (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC _gl_loader_glcompressedtexsubimage2d;
typedef void (APIENTRY *PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)        (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC _gl_loader_glcompressedtexsubimage3d;
typedef void (APIENTRY *PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)        (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC _gl_loader_glcompressedtexturesubimage1d;
typedef void (APIENTRY *PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)        (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC _gl_loader_glcompressedtexturesubimage2d;
typedef void (APIENTRY *PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)        (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC _gl_loader_glcompressedtexturesubimage3d;
typedef void (APIENTRY *PFNGLCOPYBUFFERSUBDATAPROC)        (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
extern PFNGLCOPYBUFFERSUBDATAPROC _gl_loader_glcopybuffersubdata;
typedef void (APIENTRY *PFNGLCOPYIMAGESUBDATAPROC)        (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
extern PFNGLCOPYIMAGESUBDATAPROC _gl_loader_glcopyimagesubdata;
typedef void (APIENTRY *PFNGLCOPYNAMEDBUFFERSUBDATAPROC)        (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC _gl_loader_glcopynamedbuffersubdata;
typedef void (APIENTRY *PFNGLCOPYPIXELSPROC)        (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
extern PFNGLCOPYPIXELSPROC _gl_loader_glcopypixels;
typedef void (APIENTRY *PFNGLCOPYTEXIMAGE1DPROC)        (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
extern PFNGLCOPYTEXIMAGE1DPROC _gl_loader_glcopyteximage1d;
typedef void (APIENTRY *PFNGLCOPYTEXIMAGE2DPROC)        (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
extern PFNGLCOPYTEXIMAGE2DPROC _gl_loader_glcopyteximage2d;
typedef void (APIENTRY *PFNGLCOPYTEXSUBIMAGE1DPROC)        (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
extern PFNGLCOPYTEXSUBIMAGE1DPROC _gl_loader_glcopytexsubimage1d;
typedef void (APIENTRY *PFNGLCOPYTEXSUBIMAGE2DPROC)        (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXSUBIMAGE2DPROC _gl_loader_glcopytexsubimage2d;
typedef void (APIENTRY *PFNGLCOPYTEXSUBIMAGE3DPROC)        (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXSUBIMAGE3DPROC _gl_loader_glcopytexsubimage3d;
typedef void (APIENTRY *PFNGLCOPYTEXTURESUBIMAGE1DPROC)        (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
extern PFNGLCOPYTEXTURESUBIMAGE1DPROC _gl_loader_glcopytexturesubimage1d;
typedef void (APIENTRY *PFNGLCOPYTEXTURESUBIMAGE2DPROC)        (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXTURESUBIMAGE2DPROC _gl_loader_glcopytexturesubimage2d;
typedef void (APIENTRY *PFNGLCOPYTEXTURESUBIMAGE3DPROC)        (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXTURESUBIMAGE3DPROC _gl_loader_glcopytexturesubimage3d;
typedef void (APIENTRY *PFNGLCREATEBUFFERSPROC)        (GLsizei n, GLuint * buffers);
extern PFNGLCREATEBUFFERSPROC _gl_loader_glcreatebuffers;
typedef void (APIENTRY *PFNGLCREATEFRAMEBUFFERSPROC)        (GLsizei n, GLuint * framebuffers);
extern PFNGLCREATEFRAMEBUFFERSPROC _gl_loader_glcreateframebuffers;
typedef GLuint (APIENTRY *PFNGLCREATEPROGRAMPROC)        ();
extern PFNGLCREATEPROGRAMPROC _gl_loader_glcreateprogram;
typedef void (APIENTRY *PFNGLCREATEPROGRAMPIPELINESPROC)        (GLsizei n, GLuint * pipelines);
extern PFNGLCREATEPROGRAMPIPELINESPROC _gl_loader_glcreateprogrampipelines;
typedef void (APIENTRY *PFNGLCREATEQUERIESPROC)        (GLenum target, GLsizei n, GLuint * ids);
extern PFNGLCREATEQUERIESPROC _gl_loader_glcreatequeries;
typedef void (APIENTRY *PFNGLCREATERENDERBUFFERSPROC)        (GLsizei n, GLuint * renderbuffers);
extern PFNGLCREATERENDERBUFFERSPROC _gl_loader_glcreaterenderbuffers;
typedef void (APIENTRY *PFNGLCREATESAMPLERSPROC)        (GLsizei n, GLuint * samplers);
extern PFNGLCREATESAMPLERSPROC _gl_loader_glcreatesamplers;
typedef GLuint (APIENTRY *PFNGLCREATESHADERPROC)        (GLenum type);
extern PFNGLCREATESHADERPROC _gl_loader_glcreateshader;
typedef GLuint (APIENTRY *PFNGLCREATESHADERPROGRAMVPROC)        (GLenum type, GLsizei count, const GLchar * const * strings);
extern PFNGLCREATESHADERPROGRAMVPROC _gl_loader_glcreateshaderprogramv;
typedef void (APIENTRY *PFNGLCREATETEXTURESPROC)        (GLenum target, GLsizei n, GLuint * textures);
extern PFNGLCREATETEXTURESPROC _gl_loader_glcreatetextures;
typedef void (APIENTRY *PFNGLCREATETRANSFORMFEEDBACKSPROC)        (GLsizei n, GLuint * ids);
extern PFNGLCREATETRANSFORMFEEDBACKSPROC _gl_loader_glcreatetransformfeedbacks;
typedef void (APIENTRY *PFNGLCREATEVERTEXARRAYSPROC)        (GLsizei n, GLuint * arrays);
extern PFNGLCREATEVERTEXARRAYSPROC _gl_loader_glcreatevertexarrays;
typedef void (APIENTRY *PFNGLCULLFACEPROC)        (GLenum mode);
extern PFNGLCULLFACEPROC _gl_loader_glcullface;
typedef void (APIENTRY *PFNGLDEBUGMESSAGECALLBACKPROC)        (GLDEBUGPROC callback, const void * userParam);
extern PFNGLDEBUGMESSAGECALLBACKPROC _gl_loader_gldebugmessagecallback;
typedef void (APIENTRY *PFNGLDEBUGMESSAGECONTROLPROC)        (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
extern PFNGLDEBUGMESSAGECONTROLPROC _gl_loader_gldebugmessagecontrol;
typedef void (APIENTRY *PFNGLDEBUGMESSAGEINSERTPROC)        (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
extern PFNGLDEBUGMESSAGEINSERTPROC _gl_loader_gldebugmessageinsert;
typedef void (APIENTRY *PFNGLDELETEBUFFERSPROC)        (GLsizei n, const GLuint * buffers);
extern PFNGLDELETEBUFFERSPROC _gl_loader_gldeletebuffers;
typedef void (APIENTRY *PFNGLDELETEFRAMEBUFFERSPROC)        (GLsizei n, const GLuint * framebuffers);
extern PFNGLDELETEFRAMEBUFFERSPROC _gl_loader_gldeleteframebuffers;
typedef void (APIENTRY *PFNGLDELETELISTSPROC)        (GLuint list, GLsizei range);
extern PFNGLDELETELISTSPROC _gl_loader_gldeletelists;
typedef void (APIENTRY *PFNGLDELETEPROGRAMPROC)        (GLuint program);
extern PFNGLDELETEPROGRAMPROC _gl_loader_gldeleteprogram;
typedef void (APIENTRY *PFNGLDELETEPROGRAMPIPELINESPROC)        (GLsizei n, const GLuint * pipelines);
extern PFNGLDELETEPROGRAMPIPELINESPROC _gl_loader_gldeleteprogrampipelines;
typedef void (APIENTRY *PFNGLDELETEQUERIESPROC)        (GLsizei n, const GLuint * ids);
extern PFNGLDELETEQUERIESPROC _gl_loader_gldeletequeries;
typedef void (APIENTRY *PFNGLDELETERENDERBUFFERSPROC)        (GLsizei n, const GLuint * renderbuffers);
extern PFNGLDELETERENDERBUFFERSPROC _gl_loader_gldeleterenderbuffers;
typedef void (APIENTRY *PFNGLDELETESAMPLERSPROC)        (GLsizei count, const GLuint * samplers);
extern PFNGLDELETESAMPLERSPROC _gl_loader_gldeletesamplers;
typedef void (APIENTRY *PFNGLDELETESHADERPROC)        (GLuint shader);
extern PFNGLDELETESHADERPROC _gl_loader_gldeleteshader;
typedef void (APIENTRY *PFNGLDELETESYNCPROC)        (GLsync sync);
extern PFNGLDELETESYNCPROC _gl_loader_gldeletesync;
typedef void (APIENTRY *PFNGLDELETETEXTURESPROC)        (GLsizei n, const GLuint * textures);
extern PFNGLDELETETEXTURESPROC _gl_loader_gldeletetextures;
typedef void (APIENTRY *PFNGLDELETETRANSFORMFEEDBACKSPROC)        (GLsizei n, const GLuint * ids);
extern PFNGLDELETETRANSFORMFEEDBACKSPROC _gl_loader_gldeletetransformfeedbacks;
typedef void (APIENTRY *PFNGLDELETEVERTEXARRAYSPROC)        (GLsizei n, const GLuint * arrays);
extern PFNGLDELETEVERTEXARRAYSPROC _gl_loader_gldeletevertexarrays;
typedef void (APIENTRY *PFNGLDEPTHFUNCPROC)        (GLenum func);
extern PFNGLDEPTHFUNCPROC _gl_loader_gldepthfunc;
typedef void (APIENTRY *PFNGLDEPTHMASKPROC)        (GLboolean flag);
extern PFNGLDEPTHMASKPROC _gl_loader_gldepthmask;
typedef void (APIENTRY *PFNGLDEPTHRANGEPROC)        (GLdouble n, GLdouble f);
extern PFNGLDEPTHRANGEPROC _gl_loader_gldepthrange;
typedef void (APIENTRY *PFNGLDEPTHRANGEARRAYVPROC)        (GLuint first, GLsizei count, const GLdouble * v);
extern PFNGLDEPTHRANGEARRAYVPROC _gl_loader_gldepthrangearrayv;
typedef void (APIENTRY *PFNGLDEPTHRANGEINDEXEDPROC)        (GLuint index, GLdouble n, GLdouble f);
extern PFNGLDEPTHRANGEINDEXEDPROC _gl_loader_gldepthrangeindexed;
typedef void (APIENTRY *PFNGLDEPTHRANGEFPROC)        (GLfloat n, GLfloat f);
extern PFNGLDEPTHRANGEFPROC _gl_loader_gldepthrangef;
typedef void (APIENTRY *PFNGLDETACHSHADERPROC)        (GLuint program, GLuint shader);
extern PFNGLDETACHSHADERPROC _gl_loader_gldetachshader;
typedef void (APIENTRY *PFNGLDISABLEPROC)        (GLenum cap);
extern PFNGLDISABLEPROC _gl_loader_gldisable;
typedef void (APIENTRY *PFNGLDISABLECLIENTSTATEPROC)        (GLenum array);
extern PFNGLDISABLECLIENTSTATEPROC _gl_loader_gldisableclientstate;
typedef void (APIENTRY *PFNGLDISABLEVERTEXARRAYATTRIBPROC)        (GLuint vaobj, GLuint index);
extern PFNGLDISABLEVERTEXARRAYATTRIBPROC _gl_loader_gldisablevertexarrayattrib;
typedef void (APIENTRY *PFNGLDISABLEVERTEXATTRIBARRAYPROC)        (GLuint index);
extern PFNGLDISABLEVERTEXATTRIBARRAYPROC _gl_loader_gldisablevertexattribarray;
typedef void (APIENTRY *PFNGLDISABLEIPROC)        (GLenum target, GLuint index);
extern PFNGLDISABLEIPROC _gl_loader_gldisablei;
typedef void (APIENTRY *PFNGLDISPATCHCOMPUTEPROC)        (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
extern PFNGLDISPATCHCOMPUTEPROC _gl_loader_gldispatchcompute;
typedef void (APIENTRY *PFNGLDISPATCHCOMPUTEINDIRECTPROC)        (GLintptr indirect);
extern PFNGLDISPATCHCOMPUTEINDIRECTPROC _gl_loader_gldispatchcomputeindirect;
typedef void (APIENTRY *PFNGLDRAWARRAYSPROC)        (GLenum mode, GLint first, GLsizei count);
extern PFNGLDRAWARRAYSPROC _gl_loader_gldrawarrays;
typedef void (APIENTRY *PFNGLDRAWARRAYSINDIRECTPROC)        (GLenum mode, const void * indirect);
extern PFNGLDRAWARRAYSINDIRECTPROC _gl_loader_gldrawarraysindirect;
typedef void (APIENTRY *PFNGLDRAWARRAYSINSTANCEDPROC)        (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
extern PFNGLDRAWARRAYSINSTANCEDPROC _gl_loader_gldrawarraysinstanced;
typedef void (APIENTRY *PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)        (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
extern PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC _gl_loader_gldrawarraysinstancedbaseinstance;
typedef void (APIENTRY *PFNGLDRAWBUFFERPROC)        (GLenum buf);
extern PFNGLDRAWBUFFERPROC _gl_loader_gldrawbuffer;
typedef void (APIENTRY *PFNGLDRAWBUFFERSPROC)        (GLsizei n, const GLenum * bufs);
extern PFNGLDRAWBUFFERSPROC _gl_loader_gldrawbuffers;
typedef void (APIENTRY *PFNGLDRAWELEMENTSPROC)        (GLenum mode, GLsizei count, GLenum type, const void * indices);
extern PFNGLDRAWELEMENTSPROC _gl_loader_gldrawelements;
typedef void (APIENTRY *PFNGLDRAWELEMENTSBASEVERTEXPROC)        (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
extern PFNGLDRAWELEMENTSBASEVERTEXPROC _gl_loader_gldrawelementsbasevertex;
typedef void (APIENTRY *PFNGLDRAWELEMENTSINDIRECTPROC)        (GLenum mode, GLenum type, const void * indirect);
extern PFNGLDRAWELEMENTSINDIRECTPROC _gl_loader_gldrawelementsindirect;
typedef void (APIENTRY *PFNGLDRAWELEMENTSINSTANCEDPROC)        (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
extern PFNGLDRAWELEMENTSINSTANCEDPROC _gl_loader_gldrawelementsinstanced;
typedef void (APIENTRY *PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)        (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance);
extern PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC _gl_loader_gldrawelementsinstancedbaseinstance;
typedef void (APIENTRY *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)        (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC _gl_loader_gldrawelementsinstancedbasevertex;
typedef void (APIENTRY *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)        (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC _gl_loader_gldrawelementsinstancedbasevertexbaseinstance;
typedef void (APIENTRY *PFNGLDRAWPIXELSPROC)        (GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
extern PFNGLDRAWPIXELSPROC _gl_loader_gldrawpixels;
typedef void (APIENTRY *PFNGLDRAWRANGEELEMENTSPROC)        (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
extern PFNGLDRAWRANGEELEMENTSPROC _gl_loader_gldrawrangeelements;
typedef void (APIENTRY *PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)        (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
extern PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC _gl_loader_gldrawrangeelementsbasevertex;
typedef void (APIENTRY *PFNGLDRAWTRANSFORMFEEDBACKPROC)        (GLenum mode, GLuint id);
extern PFNGLDRAWTRANSFORMFEEDBACKPROC _gl_loader_gldrawtransformfeedback;
typedef void (APIENTRY *PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)        (GLenum mode, GLuint id, GLsizei instancecount);
extern PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC _gl_loader_gldrawtransformfeedbackinstanced;
typedef void (APIENTRY *PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)        (GLenum mode, GLuint id, GLuint stream);
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC _gl_loader_gldrawtransformfeedbackstream;
typedef void (APIENTRY *PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)        (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC _gl_loader_gldrawtransformfeedbackstreaminstanced;
typedef void (APIENTRY *PFNGLEDGEFLAGPROC)        (GLboolean flag);
extern PFNGLEDGEFLAGPROC _gl_loader_gledgeflag;
typedef void (APIENTRY *PFNGLEDGEFLAGPOINTERPROC)        (GLsizei stride, const void * pointer);
extern PFNGLEDGEFLAGPOINTERPROC _gl_loader_gledgeflagpointer;
typedef void (APIENTRY *PFNGLEDGEFLAGVPROC)        (const GLboolean * flag);
extern PFNGLEDGEFLAGVPROC _gl_loader_gledgeflagv;
typedef void (APIENTRY *PFNGLENABLEPROC)        (GLenum cap);
extern PFNGLENABLEPROC _gl_loader_glenable;
typedef void (APIENTRY *PFNGLENABLECLIENTSTATEPROC)        (GLenum array);
extern PFNGLENABLECLIENTSTATEPROC _gl_loader_glenableclientstate;
typedef void (APIENTRY *PFNGLENABLEVERTEXARRAYATTRIBPROC)        (GLuint vaobj, GLuint index);
extern PFNGLENABLEVERTEXARRAYATTRIBPROC _gl_loader_glenablevertexarrayattrib;
typedef void (APIENTRY *PFNGLENABLEVERTEXATTRIBARRAYPROC)        (GLuint index);
extern PFNGLENABLEVERTEXATTRIBARRAYPROC _gl_loader_glenablevertexattribarray;
typedef void (APIENTRY *PFNGLENABLEIPROC)        (GLenum target, GLuint index);
extern PFNGLENABLEIPROC _gl_loader_glenablei;
typedef void (APIENTRY *PFNGLENDPROC)        ();
extern PFNGLENDPROC _gl_loader_glend;
typedef void (APIENTRY *PFNGLENDCONDITIONALRENDERPROC)        ();
extern PFNGLENDCONDITIONALRENDERPROC _gl_loader_glendconditionalrender;
typedef void (APIENTRY *PFNGLENDLISTPROC)        ();
extern PFNGLENDLISTPROC _gl_loader_glendlist;
typedef void (APIENTRY *PFNGLENDQUERYPROC)        (GLenum target);
extern PFNGLENDQUERYPROC _gl_loader_glendquery;
typedef void (APIENTRY *PFNGLENDQUERYINDEXEDPROC)        (GLenum target, GLuint index);
extern PFNGLENDQUERYINDEXEDPROC _gl_loader_glendqueryindexed;
typedef void (APIENTRY *PFNGLENDTRANSFORMFEEDBACKPROC)        ();
extern PFNGLENDTRANSFORMFEEDBACKPROC _gl_loader_glendtransformfeedback;
typedef void (APIENTRY *PFNGLEVALCOORD1DPROC)        (GLdouble u);
extern PFNGLEVALCOORD1DPROC _gl_loader_glevalcoord1d;
typedef void (APIENTRY *PFNGLEVALCOORD1DVPROC)        (const GLdouble * u);
extern PFNGLEVALCOORD1DVPROC _gl_loader_glevalcoord1dv;
typedef void (APIENTRY *PFNGLEVALCOORD1FPROC)        (GLfloat u);
extern PFNGLEVALCOORD1FPROC _gl_loader_glevalcoord1f;
typedef void (APIENTRY *PFNGLEVALCOORD1FVPROC)        (const GLfloat * u);
extern PFNGLEVALCOORD1FVPROC _gl_loader_glevalcoord1fv;
typedef void (APIENTRY *PFNGLEVALCOORD2DPROC)        (GLdouble u, GLdouble v);
extern PFNGLEVALCOORD2DPROC _gl_loader_glevalcoord2d;
typedef void (APIENTRY *PFNGLEVALCOORD2DVPROC)        (const GLdouble * u);
extern PFNGLEVALCOORD2DVPROC _gl_loader_glevalcoord2dv;
typedef void (APIENTRY *PFNGLEVALCOORD2FPROC)        (GLfloat u, GLfloat v);
extern PFNGLEVALCOORD2FPROC _gl_loader_glevalcoord2f;
typedef void (APIENTRY *PFNGLEVALCOORD2FVPROC)        (const GLfloat * u);
extern PFNGLEVALCOORD2FVPROC _gl_loader_glevalcoord2fv;
typedef void (APIENTRY *PFNGLEVALMESH1PROC)        (GLenum mode, GLint i1, GLint i2);
extern PFNGLEVALMESH1PROC _gl_loader_glevalmesh1;
typedef void (APIENTRY *PFNGLEVALMESH2PROC)        (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
extern PFNGLEVALMESH2PROC _gl_loader_glevalmesh2;
typedef void (APIENTRY *PFNGLEVALPOINT1PROC)        (GLint i);
extern PFNGLEVALPOINT1PROC _gl_loader_glevalpoint1;
typedef void (APIENTRY *PFNGLEVALPOINT2PROC)        (GLint i, GLint j);
extern PFNGLEVALPOINT2PROC _gl_loader_glevalpoint2;
typedef void (APIENTRY *PFNGLFEEDBACKBUFFERPROC)        (GLsizei size, GLenum type, GLfloat * buffer);
extern PFNGLFEEDBACKBUFFERPROC _gl_loader_glfeedbackbuffer;
typedef GLsync (APIENTRY *PFNGLFENCESYNCPROC)        (GLenum condition, GLbitfield flags);
extern PFNGLFENCESYNCPROC _gl_loader_glfencesync;
typedef void (APIENTRY *PFNGLFINISHPROC)        ();
extern PFNGLFINISHPROC _gl_loader_glfinish;
typedef void (APIENTRY *PFNGLFLUSHPROC)        ();
extern PFNGLFLUSHPROC _gl_loader_glflush;
typedef void (APIENTRY *PFNGLFLUSHMAPPEDBUFFERRANGEPROC)        (GLenum target, GLintptr offset, GLsizeiptr length);
extern PFNGLFLUSHMAPPEDBUFFERRANGEPROC _gl_loader_glflushmappedbufferrange;
typedef void (APIENTRY *PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)        (GLuint buffer, GLintptr offset, GLsizeiptr length);
extern PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC _gl_loader_glflushmappednamedbufferrange;
typedef void (APIENTRY *PFNGLFOGCOORDPOINTERPROC)        (GLenum type, GLsizei stride, const void * pointer);
extern PFNGLFOGCOORDPOINTERPROC _gl_loader_glfogcoordpointer;
typedef void (APIENTRY *PFNGLFOGCOORDDPROC)        (GLdouble coord);
extern PFNGLFOGCOORDDPROC _gl_loader_glfogcoordd;
typedef void (APIENTRY *PFNGLFOGCOORDDVPROC)        (const GLdouble * coord);
extern PFNGLFOGCOORDDVPROC _gl_loader_glfogcoorddv;
typedef void (APIENTRY *PFNGLFOGCOORDFPROC)        (GLfloat coord);
extern PFNGLFOGCOORDFPROC _gl_loader_glfogcoordf;
typedef void (APIENTRY *PFNGLFOGCOORDFVPROC)        (const GLfloat * coord);
extern PFNGLFOGCOORDFVPROC _gl_loader_glfogcoordfv;
typedef void (APIENTRY *PFNGLFOGFPROC)        (GLenum pname, GLfloat param);
extern PFNGLFOGFPROC _gl_loader_glfogf;
typedef void (APIENTRY *PFNGLFOGFVPROC)        (GLenum pname, const GLfloat * params);
extern PFNGLFOGFVPROC _gl_loader_glfogfv;
typedef void (APIENTRY *PFNGLFOGIPROC)        (GLenum pname, GLint param);
extern PFNGLFOGIPROC _gl_loader_glfogi;
typedef void (APIENTRY *PFNGLFOGIVPROC)        (GLenum pname, const GLint * params);
extern PFNGLFOGIVPROC _gl_loader_glfogiv;
typedef void (APIENTRY *PFNGLFRAMEBUFFERPARAMETERIPROC)        (GLenum target, GLenum pname, GLint param);
extern PFNGLFRAMEBUFFERPARAMETERIPROC _gl_loader_glframebufferparameteri;
typedef void (APIENTRY *PFNGLFRAMEBUFFERRENDERBUFFERPROC)        (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern PFNGLFRAMEBUFFERRENDERBUFFERPROC _gl_loader_glframebufferrenderbuffer;
typedef void (APIENTRY *PFNGLFRAMEBUFFERTEXTUREPROC)        (GLenum target, GLenum attachment, GLuint texture, GLint level);
extern PFNGLFRAMEBUFFERTEXTUREPROC _gl_loader_glframebuffertexture;
typedef void (APIENTRY *PFNGLFRAMEBUFFERTEXTURE1DPROC)        (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern PFNGLFRAMEBUFFERTEXTURE1DPROC _gl_loader_glframebuffertexture1d;
typedef void (APIENTRY *PFNGLFRAMEBUFFERTEXTURE2DPROC)        (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern PFNGLFRAMEBUFFERTEXTURE2DPROC _gl_loader_glframebuffertexture2d;
typedef void (APIENTRY *PFNGLFRAMEBUFFERTEXTURE3DPROC)        (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
extern PFNGLFRAMEBUFFERTEXTURE3DPROC _gl_loader_glframebuffertexture3d;
typedef void (APIENTRY *PFNGLFRAMEBUFFERTEXTURELAYERPROC)        (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
extern PFNGLFRAMEBUFFERTEXTURELAYERPROC _gl_loader_glframebuffertexturelayer;
typedef void (APIENTRY *PFNGLFRONTFACEPROC)        (GLenum mode);
extern PFNGLFRONTFACEPROC _gl_loader_glfrontface;
typedef void (APIENTRY *PFNGLFRUSTUMPROC)        (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
extern PFNGLFRUSTUMPROC _gl_loader_glfrustum;
typedef void (APIENTRY *PFNGLGENBUFFERSPROC)        (GLsizei n, GLuint * buffers);
extern PFNGLGENBUFFERSPROC _gl_loader_glgenbuffers;
typedef void (APIENTRY *PFNGLGENFRAMEBUFFERSPROC)        (GLsizei n, GLuint * framebuffers);
extern PFNGLGENFRAMEBUFFERSPROC _gl_loader_glgenframebuffers;
typedef GLuint (APIENTRY *PFNGLGENLISTSPROC)        (GLsizei range);
extern PFNGLGENLISTSPROC _gl_loader_glgenlists;
typedef void (APIENTRY *PFNGLGENPROGRAMPIPELINESPROC)        (GLsizei n, GLuint * pipelines);
extern PFNGLGENPROGRAMPIPELINESPROC _gl_loader_glgenprogrampipelines;
typedef void (APIENTRY *PFNGLGENQUERIESPROC)        (GLsizei n, GLuint * ids);
extern PFNGLGENQUERIESPROC _gl_loader_glgenqueries;
typedef void (APIENTRY *PFNGLGENRENDERBUFFERSPROC)        (GLsizei n, GLuint * renderbuffers);
extern PFNGLGENRENDERBUFFERSPROC _gl_loader_glgenrenderbuffers;
typedef void (APIENTRY *PFNGLGENSAMPLERSPROC)        (GLsizei count, GLuint * samplers);
extern PFNGLGENSAMPLERSPROC _gl_loader_glgensamplers;
typedef void (APIENTRY *PFNGLGENTEXTURESPROC)        (GLsizei n, GLuint * textures);
extern PFNGLGENTEXTURESPROC _gl_loader_glgentextures;
typedef void (APIENTRY *PFNGLGENTRANSFORMFEEDBACKSPROC)        (GLsizei n, GLuint * ids);
extern PFNGLGENTRANSFORMFEEDBACKSPROC _gl_loader_glgentransformfeedbacks;
typedef void (APIENTRY *PFNGLGENVERTEXARRAYSPROC)        (GLsizei n, GLuint * arrays);
extern PFNGLGENVERTEXARRAYSPROC _gl_loader_glgenvertexarrays;
typedef void (APIENTRY *PFNGLGENERATEMIPMAPPROC)        (GLenum target);
extern PFNGLGENERATEMIPMAPPROC _gl_loader_glgeneratemipmap;
typedef void (APIENTRY *PFNGLGENERATETEXTUREMIPMAPPROC)        (GLuint texture);
extern PFNGLGENERATETEXTUREMIPMAPPROC _gl_loader_glgeneratetexturemipmap;
typedef void (APIENTRY *PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)        (GLuint program, GLuint bufferIndex, GLenum pname, GLint * params);
extern PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC _gl_loader_glgetactiveatomiccounterbufferiv;
typedef void (APIENTRY *PFNGLGETACTIVEATTRIBPROC)        (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
extern PFNGLGETACTIVEATTRIBPROC _gl_loader_glgetactiveattrib;
typedef void (APIENTRY *PFNGLGETACTIVESUBROUTINENAMEPROC)        (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
extern PFNGLGETACTIVESUBROUTINENAMEPROC _gl_loader_glgetactivesubroutinename;
typedef void (APIENTRY *PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)        (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
extern PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC _gl_loader_glgetactivesubroutineuniformname;
typedef void (APIENTRY *PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)        (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);
extern PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC _gl_loader_glgetactivesubroutineuniformiv;
typedef void (APIENTRY *PFNGLGETACTIVEUNIFORMPROC)        (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
extern PFNGLGETACTIVEUNIFORMPROC _gl_loader_glgetactiveuniform;
typedef void (APIENTRY *PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)        (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
extern PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC _gl_loader_glgetactiveuniformblockname;
typedef void (APIENTRY *PFNGLGETACTIVEUNIFORMBLOCKIVPROC)        (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
extern PFNGLGETACTIVEUNIFORMBLOCKIVPROC _gl_loader_glgetactiveuniformblockiv;
typedef void (APIENTRY *PFNGLGETACTIVEUNIFORMNAMEPROC)        (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
extern PFNGLGETACTIVEUNIFORMNAMEPROC _gl_loader_glgetactiveuniformname;
typedef void (APIENTRY *PFNGLGETACTIVEUNIFORMSIVPROC)        (GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
extern PFNGLGETACTIVEUNIFORMSIVPROC _gl_loader_glgetactiveuniformsiv;
typedef void (APIENTRY *PFNGLGETATTACHEDSHADERSPROC)        (GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
extern PFNGLGETATTACHEDSHADERSPROC _gl_loader_glgetattachedshaders;
typedef GLint (APIENTRY *PFNGLGETATTRIBLOCATIONPROC)        (GLuint program, const GLchar * name);
extern PFNGLGETATTRIBLOCATIONPROC _gl_loader_glgetattriblocation;
typedef void (APIENTRY *PFNGLGETBOOLEANI_VPROC)        (GLenum target, GLuint index, GLboolean * data);
extern PFNGLGETBOOLEANI_VPROC _gl_loader_glgetbooleani_v;
typedef void (APIENTRY *PFNGLGETBOOLEANVPROC)        (GLenum pname, GLboolean * data);
extern PFNGLGETBOOLEANVPROC _gl_loader_glgetbooleanv;
typedef void (APIENTRY *PFNGLGETBUFFERPARAMETERI64VPROC)        (GLenum target, GLenum pname, GLint64 * params);
extern PFNGLGETBUFFERPARAMETERI64VPROC _gl_loader_glgetbufferparameteri64v;
typedef void (APIENTRY *PFNGLGETBUFFERPARAMETERIVPROC)        (GLenum target, GLenum pname, GLint * params);
extern PFNGLGETBUFFERPARAMETERIVPROC _gl_loader_glgetbufferparameteriv;
typedef void (APIENTRY *PFNGLGETBUFFERPOINTERVPROC)        (GLenum target, GLenum pname, void * * params);
extern PFNGLGETBUFFERPOINTERVPROC _gl_loader_glgetbufferpointerv;
typedef void (APIENTRY *PFNGLGETBUFFERSUBDATAPROC)        (GLenum target, GLintptr offset, GLsizeiptr size, void * data);
extern PFNGLGETBUFFERSUBDATAPROC _gl_loader_glgetbuffersubdata;
typedef void (APIENTRY *PFNGLGETCLIPPLANEPROC)        (GLenum plane, GLdouble * equation);
extern PFNGLGETCLIPPLANEPROC _gl_loader_glgetclipplane;
typedef void (APIENTRY *PFNGLGETCOMPRESSEDTEXIMAGEPROC)        (GLenum target, GLint level, void * img);
extern PFNGLGETCOMPRESSEDTEXIMAGEPROC _gl_loader_glgetcompressedteximage;
typedef void (APIENTRY *PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)        (GLuint texture, GLint level, GLsizei bufSize, void * pixels);
extern PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC _gl_loader_glgetcompressedtextureimage;
typedef void (APIENTRY *PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)        (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels);
extern PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC _gl_loader_glgetcompressedtexturesubimage;
typedef GLuint (APIENTRY *PFNGLGETDEBUGMESSAGELOGPROC)        (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
extern PFNGLGETDEBUGMESSAGELOGPROC _gl_loader_glgetdebugmessagelog;
typedef void (APIENTRY *PFNGLGETDOUBLEI_VPROC)        (GLenum target, GLuint index, GLdouble * data);
extern PFNGLGETDOUBLEI_VPROC _gl_loader_glgetdoublei_v;
typedef void (APIENTRY *PFNGLGETDOUBLEVPROC)        (GLenum pname, GLdouble * data);
extern PFNGLGETDOUBLEVPROC _gl_loader_glgetdoublev;
typedef GLenum (APIENTRY *PFNGLGETERRORPROC)        ();
extern PFNGLGETERRORPROC _gl_loader_glgeterror;
typedef void (APIENTRY *PFNGLGETFLOATI_VPROC)        (GLenum target, GLuint index, GLfloat * data);
extern PFNGLGETFLOATI_VPROC _gl_loader_glgetfloati_v;
typedef void (APIENTRY *PFNGLGETFLOATVPROC)        (GLenum pname, GLfloat * data);
extern PFNGLGETFLOATVPROC _gl_loader_glgetfloatv;
typedef GLint (APIENTRY *PFNGLGETFRAGDATAINDEXPROC)        (GLuint program, const GLchar * name);
extern PFNGLGETFRAGDATAINDEXPROC _gl_loader_glgetfragdataindex;
typedef GLint (APIENTRY *PFNGLGETFRAGDATALOCATIONPROC)        (GLuint program, const GLchar * name);
extern PFNGLGETFRAGDATALOCATIONPROC _gl_loader_glgetfragdatalocation;
typedef void (APIENTRY *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)        (GLenum target, GLenum attachment, GLenum pname, GLint * params);
extern PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC _gl_loader_glgetframebufferattachmentparameteriv;
typedef void (APIENTRY *PFNGLGETFRAMEBUFFERPARAMETERIVPROC)        (GLenum target, GLenum pname, GLint * params);
extern PFNGLGETFRAMEBUFFERPARAMETERIVPROC _gl_loader_glgetframebufferparameteriv;
typedef GLenum (APIENTRY *PFNGLGETGRAPHICSRESETSTATUSPROC)        ();
extern PFNGLGETGRAPHICSRESETSTATUSPROC _gl_loader_glgetgraphicsresetstatus;
typedef void (APIENTRY *PFNGLGETINTEGER64I_VPROC)        (GLenum target, GLuint index, GLint64 * data);
extern PFNGLGETINTEGER64I_VPROC _gl_loader_glgetinteger64i_v;
typedef void (APIENTRY *PFNGLGETINTEGER64VPROC)        (GLenum pname, GLint64 * data);
extern PFNGLGETINTEGER64VPROC _gl_loader_glgetinteger64v;
typedef void (APIENTRY *PFNGLGETINTEGERI_VPROC)        (GLenum target, GLuint index, GLint * data);
extern PFNGLGETINTEGERI_VPROC _gl_loader_glgetintegeri_v;
typedef void (APIENTRY *PFNGLGETINTEGERVPROC)        (GLenum pname, GLint * data);
extern PFNGLGETINTEGERVPROC _gl_loader_glgetintegerv;
typedef void (APIENTRY *PFNGLGETINTERNALFORMATI64VPROC)        (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 * params);
extern PFNGLGETINTERNALFORMATI64VPROC _gl_loader_glgetinternalformati64v;
typedef void (APIENTRY *PFNGLGETINTERNALFORMATIVPROC)        (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params);
extern PFNGLGETINTERNALFORMATIVPROC _gl_loader_glgetinternalformativ;
typedef void (APIENTRY *PFNGLGETLIGHTFVPROC)        (GLenum light, GLenum pname, GLfloat * params);
extern PFNGLGETLIGHTFVPROC _gl_loader_glgetlightfv;
typedef void (APIENTRY *PFNGLGETLIGHTIVPROC)        (GLenum light, GLenum pname, GLint * params);
extern PFNGLGETLIGHTIVPROC _gl_loader_glgetlightiv;
typedef void (APIENTRY *PFNGLGETMAPDVPROC)        (GLenum target, GLenum query, GLdouble * v);
extern PFNGLGETMAPDVPROC _gl_loader_glgetmapdv;
typedef void (APIENTRY *PFNGLGETMAPFVPROC)        (GLenum target, GLenum query, GLfloat * v);
extern PFNGLGETMAPFVPROC _gl_loader_glgetmapfv;
typedef void (APIENTRY *PFNGLGETMAPIVPROC)        (GLenum target, GLenum query, GLint * v);
extern PFNGLGETMAPIVPROC _gl_loader_glgetmapiv;
typedef void (APIENTRY *PFNGLGETMATERIALFVPROC)        (GLenum face, GLenum pname, GLfloat * params);
extern PFNGLGETMATERIALFVPROC _gl_loader_glgetmaterialfv;
typedef void (APIENTRY *PFNGLGETMATERIALIVPROC)        (GLenum face, GLenum pname, GLint * params);
extern PFNGLGETMATERIALIVPROC _gl_loader_glgetmaterialiv;
typedef void (APIENTRY *PFNGLGETMULTISAMPLEFVPROC)        (GLenum pname, GLuint index, GLfloat * val);
extern PFNGLGETMULTISAMPLEFVPROC _gl_loader_glgetmultisamplefv;
typedef void (APIENTRY *PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)        (GLuint buffer, GLenum pname, GLint64 * params);
extern PFNGLGETNAMEDBUFFERPARAMETERI64VPROC _gl_loader_glgetnamedbufferparameteri64v;
typedef void (APIENTRY *PFNGLGETNAMEDBUFFERPARAMETERIVPROC)        (GLuint buffer, GLenum pname, GLint * params);
extern PFNGLGETNAMEDBUFFERPARAMETERIVPROC _gl_loader_glgetnamedbufferparameteriv;
typedef void (APIENTRY *PFNGLGETNAMEDBUFFERPOINTERVPROC)        (GLuint buffer, GLenum pname, void * * params);
extern PFNGLGETNAMEDBUFFERPOINTERVPROC _gl_loader_glgetnamedbufferpointerv;
typedef void (APIENTRY *PFNGLGETNAMEDBUFFERSUBDATAPROC)        (GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);
extern PFNGLGETNAMEDBUFFERSUBDATAPROC _gl_loader_glgetnamedbuffersubdata;
typedef void (APIENTRY *PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)        (GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
extern PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC _gl_loader_glgetnamedframebufferattachmentparameteriv;
typedef void (APIENTRY *PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)        (GLuint framebuffer, GLenum pname, GLint * param);
extern PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC _gl_loader_glgetnamedframebufferparameteriv;
typedef void (APIENTRY *PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)        (GLuint renderbuffer, GLenum pname, GLint * params);
extern PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC _gl_loader_glgetnamedrenderbufferparameteriv;
typedef void (APIENTRY *PFNGLGETOBJECTLABELPROC)        (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
extern PFNGLGETOBJECTLABELPROC _gl_loader_glgetobjectlabel;
typedef void (APIENTRY *PFNGLGETOBJECTPTRLABELPROC)        (const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
extern PFNGLGETOBJECTPTRLABELPROC _gl_loader_glgetobjectptrlabel;
typedef void (APIENTRY *PFNGLGETPIXELMAPFVPROC)        (GLenum map, GLfloat * values);
extern PFNGLGETPIXELMAPFVPROC _gl_loader_glgetpixelmapfv;
typedef void (APIENTRY *PFNGLGETPIXELMAPUIVPROC)        (GLenum map, GLuint * values);
extern PFNGLGETPIXELMAPUIVPROC _gl_loader_glgetpixelmapuiv;
typedef void (APIENTRY *PFNGLGETPIXELMAPUSVPROC)        (GLenum map, GLushort * values);
extern PFNGLGETPIXELMAPUSVPROC _gl_loader_glgetpixelmapusv;
typedef void (APIENTRY *PFNGLGETPOINTERVPROC)        (GLenum pname, void * * params);
extern PFNGLGETPOINTERVPROC _gl_loader_glgetpointerv;
typedef void (APIENTRY *PFNGLGETPOLYGONSTIPPLEPROC)        (GLubyte * mask);
extern PFNGLGETPOLYGONSTIPPLEPROC _gl_loader_glgetpolygonstipple;
typedef void (APIENTRY *PFNGLGETPROGRAMBINARYPROC)        (GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
extern PFNGLGETPROGRAMBINARYPROC _gl_loader_glgetprogrambinary;
typedef void (APIENTRY *PFNGLGETPROGRAMINFOLOGPROC)        (GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
extern PFNGLGETPROGRAMINFOLOGPROC _gl_loader_glgetprograminfolog;
typedef void (APIENTRY *PFNGLGETPROGRAMINTERFACEIVPROC)        (GLuint program, GLenum programInterface, GLenum pname, GLint * params);
extern PFNGLGETPROGRAMINTERFACEIVPROC _gl_loader_glgetprograminterfaceiv;
typedef void (APIENTRY *PFNGLGETPROGRAMPIPELINEINFOLOGPROC)        (GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
extern PFNGLGETPROGRAMPIPELINEINFOLOGPROC _gl_loader_glgetprogrampipelineinfolog;
typedef void (APIENTRY *PFNGLGETPROGRAMPIPELINEIVPROC)        (GLuint pipeline, GLenum pname, GLint * params);
extern PFNGLGETPROGRAMPIPELINEIVPROC _gl_loader_glgetprogrampipelineiv;
typedef GLuint (APIENTRY *PFNGLGETPROGRAMRESOURCEINDEXPROC)        (GLuint program, GLenum programInterface, const GLchar * name);
extern PFNGLGETPROGRAMRESOURCEINDEXPROC _gl_loader_glgetprogramresourceindex;
typedef GLint (APIENTRY *PFNGLGETPROGRAMRESOURCELOCATIONPROC)        (GLuint program, GLenum programInterface, const GLchar * name);
extern PFNGLGETPROGRAMRESOURCELOCATIONPROC _gl_loader_glgetprogramresourcelocation;
typedef GLint (APIENTRY *PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)        (GLuint program, GLenum programInterface, const GLchar * name);
extern PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC _gl_loader_glgetprogramresourcelocationindex;
typedef void (APIENTRY *PFNGLGETPROGRAMRESOURCENAMEPROC)        (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
extern PFNGLGETPROGRAMRESOURCENAMEPROC _gl_loader_glgetprogramresourcename;
typedef void (APIENTRY *PFNGLGETPROGRAMRESOURCEIVPROC)        (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params);
extern PFNGLGETPROGRAMRESOURCEIVPROC _gl_loader_glgetprogramresourceiv;
typedef void (APIENTRY *PFNGLGETPROGRAMSTAGEIVPROC)        (GLuint program, GLenum shadertype, GLenum pname, GLint * values);
extern PFNGLGETPROGRAMSTAGEIVPROC _gl_loader_glgetprogramstageiv;
typedef void (APIENTRY *PFNGLGETPROGRAMIVPROC)        (GLuint program, GLenum pname, GLint * params);
extern PFNGLGETPROGRAMIVPROC _gl_loader_glgetprogramiv;
typedef void (APIENTRY *PFNGLGETQUERYBUFFEROBJECTI64VPROC)        (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern PFNGLGETQUERYBUFFEROBJECTI64VPROC _gl_loader_glgetquerybufferobjecti64v;
typedef void (APIENTRY *PFNGLGETQUERYBUFFEROBJECTIVPROC)        (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern PFNGLGETQUERYBUFFEROBJECTIVPROC _gl_loader_glgetquerybufferobjectiv;
typedef void (APIENTRY *PFNGLGETQUERYBUFFEROBJECTUI64VPROC)        (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern PFNGLGETQUERYBUFFEROBJECTUI64VPROC _gl_loader_glgetquerybufferobjectui64v;
typedef void (APIENTRY *PFNGLGETQUERYBUFFEROBJECTUIVPROC)        (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern PFNGLGETQUERYBUFFEROBJECTUIVPROC _gl_loader_glgetquerybufferobjectuiv;
typedef void (APIENTRY *PFNGLGETQUERYINDEXEDIVPROC)        (GLenum target, GLuint index, GLenum pname, GLint * params);
extern PFNGLGETQUERYINDEXEDIVPROC _gl_loader_glgetqueryindexediv;
typedef void (APIENTRY *PFNGLGETQUERYOBJECTI64VPROC)        (GLuint id, GLenum pname, GLint64 * params);
extern PFNGLGETQUERYOBJECTI64VPROC _gl_loader_glgetqueryobjecti64v;
typedef void (APIENTRY *PFNGLGETQUERYOBJECTIVPROC)        (GLuint id, GLenum pname, GLint * params);
extern PFNGLGETQUERYOBJECTIVPROC _gl_loader_glgetqueryobjectiv;
typedef void (APIENTRY *PFNGLGETQUERYOBJECTUI64VPROC)        (GLuint id, GLenum pname, GLuint64 * params);
extern PFNGLGETQUERYOBJECTUI64VPROC _gl_loader_glgetqueryobjectui64v;
typedef void (APIENTRY *PFNGLGETQUERYOBJECTUIVPROC)        (GLuint id, GLenum pname, GLuint * params);
extern PFNGLGETQUERYOBJECTUIVPROC _gl_loader_glgetqueryobjectuiv;
typedef void (APIENTRY *PFNGLGETQUERYIVPROC)        (GLenum target, GLenum pname, GLint * params);
extern PFNGLGETQUERYIVPROC _gl_loader_glgetqueryiv;
typedef void (APIENTRY *PFNGLGETRENDERBUFFERPARAMETERIVPROC)        (GLenum target, GLenum pname, GLint * params);
extern PFNGLGETRENDERBUFFERPARAMETERIVPROC _gl_loader_glgetrenderbufferparameteriv;
typedef void (APIENTRY *PFNGLGETSAMPLERPARAMETERIIVPROC)        (GLuint sampler, GLenum pname, GLint * params);
extern PFNGLGETSAMPLERPARAMETERIIVPROC _gl_loader_glgetsamplerparameteriiv;
typedef void (APIENTRY *PFNGLGETSAMPLERPARAMETERIUIVPROC)        (GLuint sampler, GLenum pname, GLuint * params);
extern PFNGLGETSAMPLERPARAMETERIUIVPROC _gl_loader_glgetsamplerparameteriuiv;
typedef void (APIENTRY *PFNGLGETSAMPLERPARAMETERFVPROC)        (GLuint sampler, GLenum pname, GLfloat * params);
extern PFNGLGETSAMPLERPARAMETERFVPROC _gl_loader_glgetsamplerparameterfv;
typedef void (APIENTRY *PFNGLGETSAMPLERPARAMETERIVPROC)        (GLuint sampler, GLenum pname, GLint * params);
extern PFNGLGETSAMPLERPARAMETERIVPROC _gl_loader_glgetsamplerparameteriv;
typedef void (APIENTRY *PFNGLGETSHADERINFOLOGPROC)        (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
extern PFNGLGETSHADERINFOLOGPROC _gl_loader_glgetshaderinfolog;
typedef void (APIENTRY *PFNGLGETSHADERPRECISIONFORMATPROC)        (GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
extern PFNGLGETSHADERPRECISIONFORMATPROC _gl_loader_glgetshaderprecisionformat;
typedef void (APIENTRY *PFNGLGETSHADERSOURCEPROC)        (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
extern PFNGLGETSHADERSOURCEPROC _gl_loader_glgetshadersource;
typedef void (APIENTRY *PFNGLGETSHADERIVPROC)        (GLuint shader, GLenum pname, GLint * params);
extern PFNGLGETSHADERIVPROC _gl_loader_glgetshaderiv;
typedef GLubyte (APIENTRY *PFNGLGETSTRINGPROC)        (GLenum name);
extern PFNGLGETSTRINGPROC _gl_loader_glgetstring;
typedef GLubyte (APIENTRY *PFNGLGETSTRINGIPROC)        (GLenum name, GLuint index);
extern PFNGLGETSTRINGIPROC _gl_loader_glgetstringi;
typedef GLuint (APIENTRY *PFNGLGETSUBROUTINEINDEXPROC)        (GLuint program, GLenum shadertype, const GLchar * name);
extern PFNGLGETSUBROUTINEINDEXPROC _gl_loader_glgetsubroutineindex;
typedef GLint (APIENTRY *PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)        (GLuint program, GLenum shadertype, const GLchar * name);
extern PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC _gl_loader_glgetsubroutineuniformlocation;
typedef void (APIENTRY *PFNGLGETSYNCIVPROC)        (GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
extern PFNGLGETSYNCIVPROC _gl_loader_glgetsynciv;
typedef void (APIENTRY *PFNGLGETTEXENVFVPROC)        (GLenum target, GLenum pname, GLfloat * params);
extern PFNGLGETTEXENVFVPROC _gl_loader_glgettexenvfv;
typedef void (APIENTRY *PFNGLGETTEXENVIVPROC)        (GLenum target, GLenum pname, GLint * params);
extern PFNGLGETTEXENVIVPROC _gl_loader_glgettexenviv;
typedef void (APIENTRY *PFNGLGETTEXGENDVPROC)        (GLenum coord, GLenum pname, GLdouble * params);
extern PFNGLGETTEXGENDVPROC _gl_loader_glgettexgendv;
typedef void (APIENTRY *PFNGLGETTEXGENFVPROC)        (GLenum coord, GLenum pname, GLfloat * params);
extern PFNGLGETTEXGENFVPROC _gl_loader_glgettexgenfv;
typedef void (APIENTRY *PFNGLGETTEXGENIVPROC)        (GLenum coord, GLenum pname, GLint * params);
extern PFNGLGETTEXGENIVPROC _gl_loader_glgettexgeniv;
typedef void (APIENTRY *PFNGLGETTEXIMAGEPROC)        (GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
extern PFNGLGETTEXIMAGEPROC _gl_loader_glgetteximage;
typedef void (APIENTRY *PFNGLGETTEXLEVELPARAMETERFVPROC)        (GLenum target, GLint level, GLenum pname, GLfloat * params);
extern PFNGLGETTEXLEVELPARAMETERFVPROC _gl_loader_glgettexlevelparameterfv;
typedef void (APIENTRY *PFNGLGETTEXLEVELPARAMETERIVPROC)        (GLenum target, GLint level, GLenum pname, GLint * params);
extern PFNGLGETTEXLEVELPARAMETERIVPROC _gl_loader_glgettexlevelparameteriv;
typedef void (APIENTRY *PFNGLGETTEXPARAMETERIIVPROC)        (GLenum target, GLenum pname, GLint * params);
extern PFNGLGETTEXPARAMETERIIVPROC _gl_loader_glgettexparameteriiv;
typedef void (APIENTRY *PFNGLGETTEXPARAMETERIUIVPROC)        (GLenum target, GLenum pname, GLuint * params);
extern PFNGLGETTEXPARAMETERIUIVPROC _gl_loader_glgettexparameteriuiv;
typedef void (APIENTRY *PFNGLGETTEXPARAMETERFVPROC)        (GLenum target, GLenum pname, GLfloat * params);
extern PFNGLGETTEXPARAMETERFVPROC _gl_loader_glgettexparameterfv;
typedef void (APIENTRY *PFNGLGETTEXPARAMETERIVPROC)        (GLenum target, GLenum pname, GLint * params);
extern PFNGLGETTEXPARAMETERIVPROC _gl_loader_glgettexparameteriv;
typedef void (APIENTRY *PFNGLGETTEXTUREIMAGEPROC)        (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
extern PFNGLGETTEXTUREIMAGEPROC _gl_loader_glgettextureimage;
typedef void (APIENTRY *PFNGLGETTEXTURELEVELPARAMETERFVPROC)        (GLuint texture, GLint level, GLenum pname, GLfloat * params);
extern PFNGLGETTEXTURELEVELPARAMETERFVPROC _gl_loader_glgettexturelevelparameterfv;
typedef void (APIENTRY *PFNGLGETTEXTURELEVELPARAMETERIVPROC)        (GLuint texture, GLint level, GLenum pname, GLint * params);
extern PFNGLGETTEXTURELEVELPARAMETERIVPROC _gl_loader_glgettexturelevelparameteriv;
typedef void (APIENTRY *PFNGLGETTEXTUREPARAMETERIIVPROC)        (GLuint texture, GLenum pname, GLint * params);
extern PFNGLGETTEXTUREPARAMETERIIVPROC _gl_loader_glgettextureparameteriiv;
typedef void (APIENTRY *PFNGLGETTEXTUREPARAMETERIUIVPROC)        (GLuint texture, GLenum pname, GLuint * params);
extern PFNGLGETTEXTUREPARAMETERIUIVPROC _gl_loader_glgettextureparameteriuiv;
typedef void (APIENTRY *PFNGLGETTEXTUREPARAMETERFVPROC)        (GLuint texture, GLenum pname, GLfloat * params);
extern PFNGLGETTEXTUREPARAMETERFVPROC _gl_loader_glgettextureparameterfv;
typedef void (APIENTRY *PFNGLGETTEXTUREPARAMETERIVPROC)        (GLuint texture, GLenum pname, GLint * params);
extern PFNGLGETTEXTUREPARAMETERIVPROC _gl_loader_glgettextureparameteriv;
typedef void (APIENTRY *PFNGLGETTEXTURESUBIMAGEPROC)        (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
extern PFNGLGETTEXTURESUBIMAGEPROC _gl_loader_glgettexturesubimage;
typedef void (APIENTRY *PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)        (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
extern PFNGLGETTRANSFORMFEEDBACKVARYINGPROC _gl_loader_glgettransformfeedbackvarying;
typedef void (APIENTRY *PFNGLGETTRANSFORMFEEDBACKI64_VPROC)        (GLuint xfb, GLenum pname, GLuint index, GLint64 * param);
extern PFNGLGETTRANSFORMFEEDBACKI64_VPROC _gl_loader_glgettransformfeedbacki64_v;
typedef void (APIENTRY *PFNGLGETTRANSFORMFEEDBACKI_VPROC)        (GLuint xfb, GLenum pname, GLuint index, GLint * param);
extern PFNGLGETTRANSFORMFEEDBACKI_VPROC _gl_loader_glgettransformfeedbacki_v;
typedef void (APIENTRY *PFNGLGETTRANSFORMFEEDBACKIVPROC)        (GLuint xfb, GLenum pname, GLint * param);
extern PFNGLGETTRANSFORMFEEDBACKIVPROC _gl_loader_glgettransformfeedbackiv;
typedef GLuint (APIENTRY *PFNGLGETUNIFORMBLOCKINDEXPROC)        (GLuint program, const GLchar * uniformBlockName);
extern PFNGLGETUNIFORMBLOCKINDEXPROC _gl_loader_glgetuniformblockindex;
typedef void (APIENTRY *PFNGLGETUNIFORMINDICESPROC)        (GLuint program, GLsizei uniformCount, const GLchar * const * uniformNames, GLuint * uniformIndices);
extern PFNGLGETUNIFORMINDICESPROC _gl_loader_glgetuniformindices;
typedef GLint (APIENTRY *PFNGLGETUNIFORMLOCATIONPROC)        (GLuint program, const GLchar * name);
extern PFNGLGETUNIFORMLOCATIONPROC _gl_loader_glgetuniformlocation;
typedef void (APIENTRY *PFNGLGETUNIFORMSUBROUTINEUIVPROC)        (GLenum shadertype, GLint location, GLuint * params);
extern PFNGLGETUNIFORMSUBROUTINEUIVPROC _gl_loader_glgetuniformsubroutineuiv;
typedef void (APIENTRY *PFNGLGETUNIFORMDVPROC)        (GLuint program, GLint location, GLdouble * params);
extern PFNGLGETUNIFORMDVPROC _gl_loader_glgetuniformdv;
typedef void (APIENTRY *PFNGLGETUNIFORMFVPROC)        (GLuint program, GLint location, GLfloat * params);
extern PFNGLGETUNIFORMFVPROC _gl_loader_glgetuniformfv;
typedef void (APIENTRY *PFNGLGETUNIFORMIVPROC)        (GLuint program, GLint location, GLint * params);
extern PFNGLGETUNIFORMIVPROC _gl_loader_glgetuniformiv;
typedef void (APIENTRY *PFNGLGETUNIFORMUIVPROC)        (GLuint program, GLint location, GLuint * params);
extern PFNGLGETUNIFORMUIVPROC _gl_loader_glgetuniformuiv;
typedef void (APIENTRY *PFNGLGETVERTEXARRAYINDEXED64IVPROC)        (GLuint vaobj, GLuint index, GLenum pname, GLint64 * param);
extern PFNGLGETVERTEXARRAYINDEXED64IVPROC _gl_loader_glgetvertexarrayindexed64iv;
typedef void (APIENTRY *PFNGLGETVERTEXARRAYINDEXEDIVPROC)        (GLuint vaobj, GLuint index, GLenum pname, GLint * param);
extern PFNGLGETVERTEXARRAYINDEXEDIVPROC _gl_loader_glgetvertexarrayindexediv;
typedef void (APIENTRY *PFNGLGETVERTEXARRAYIVPROC)        (GLuint vaobj, GLenum pname, GLint * param);
extern PFNGLGETVERTEXARRAYIVPROC _gl_loader_glgetvertexarrayiv;
typedef void (APIENTRY *PFNGLGETVERTEXATTRIBIIVPROC)        (GLuint index, GLenum pname, GLint * params);
extern PFNGLGETVERTEXATTRIBIIVPROC _gl_loader_glgetvertexattribiiv;
typedef void (APIENTRY *PFNGLGETVERTEXATTRIBIUIVPROC)        (GLuint index, GLenum pname, GLuint * params);
extern PFNGLGETVERTEXATTRIBIUIVPROC _gl_loader_glgetvertexattribiuiv;
typedef void (APIENTRY *PFNGLGETVERTEXATTRIBLDVPROC)        (GLuint index, GLenum pname, GLdouble * params);
extern PFNGLGETVERTEXATTRIBLDVPROC _gl_loader_glgetvertexattribldv;
typedef void (APIENTRY *PFNGLGETVERTEXATTRIBPOINTERVPROC)        (GLuint index, GLenum pname, void * * pointer);
extern PFNGLGETVERTEXATTRIBPOINTERVPROC _gl_loader_glgetvertexattribpointerv;
typedef void (APIENTRY *PFNGLGETVERTEXATTRIBDVPROC)        (GLuint index, GLenum pname, GLdouble * params);
extern PFNGLGETVERTEXATTRIBDVPROC _gl_loader_glgetvertexattribdv;
typedef void (APIENTRY *PFNGLGETVERTEXATTRIBFVPROC)        (GLuint index, GLenum pname, GLfloat * params);
extern PFNGLGETVERTEXATTRIBFVPROC _gl_loader_glgetvertexattribfv;
typedef void (APIENTRY *PFNGLGETVERTEXATTRIBIVPROC)        (GLuint index, GLenum pname, GLint * params);
extern PFNGLGETVERTEXATTRIBIVPROC _gl_loader_glgetvertexattribiv;
typedef void (APIENTRY *PFNGLGETNCOLORTABLEPROC)        (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table);
extern PFNGLGETNCOLORTABLEPROC _gl_loader_glgetncolortable;
typedef void (APIENTRY *PFNGLGETNCOMPRESSEDTEXIMAGEPROC)        (GLenum target, GLint lod, GLsizei bufSize, void * pixels);
extern PFNGLGETNCOMPRESSEDTEXIMAGEPROC _gl_loader_glgetncompressedteximage;
typedef void (APIENTRY *PFNGLGETNCONVOLUTIONFILTERPROC)        (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image);
extern PFNGLGETNCONVOLUTIONFILTERPROC _gl_loader_glgetnconvolutionfilter;
typedef void (APIENTRY *PFNGLGETNHISTOGRAMPROC)        (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
extern PFNGLGETNHISTOGRAMPROC _gl_loader_glgetnhistogram;
typedef void (APIENTRY *PFNGLGETNMAPDVPROC)        (GLenum target, GLenum query, GLsizei bufSize, GLdouble * v);
extern PFNGLGETNMAPDVPROC _gl_loader_glgetnmapdv;
typedef void (APIENTRY *PFNGLGETNMAPFVPROC)        (GLenum target, GLenum query, GLsizei bufSize, GLfloat * v);
extern PFNGLGETNMAPFVPROC _gl_loader_glgetnmapfv;
typedef void (APIENTRY *PFNGLGETNMAPIVPROC)        (GLenum target, GLenum query, GLsizei bufSize, GLint * v);
extern PFNGLGETNMAPIVPROC _gl_loader_glgetnmapiv;
typedef void (APIENTRY *PFNGLGETNMINMAXPROC)        (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
extern PFNGLGETNMINMAXPROC _gl_loader_glgetnminmax;
typedef void (APIENTRY *PFNGLGETNPIXELMAPFVPROC)        (GLenum map, GLsizei bufSize, GLfloat * values);
extern PFNGLGETNPIXELMAPFVPROC _gl_loader_glgetnpixelmapfv;
typedef void (APIENTRY *PFNGLGETNPIXELMAPUIVPROC)        (GLenum map, GLsizei bufSize, GLuint * values);
extern PFNGLGETNPIXELMAPUIVPROC _gl_loader_glgetnpixelmapuiv;
typedef void (APIENTRY *PFNGLGETNPIXELMAPUSVPROC)        (GLenum map, GLsizei bufSize, GLushort * values);
extern PFNGLGETNPIXELMAPUSVPROC _gl_loader_glgetnpixelmapusv;
typedef void (APIENTRY *PFNGLGETNPOLYGONSTIPPLEPROC)        (GLsizei bufSize, GLubyte * pattern);
extern PFNGLGETNPOLYGONSTIPPLEPROC _gl_loader_glgetnpolygonstipple;
typedef void (APIENTRY *PFNGLGETNSEPARABLEFILTERPROC)        (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span);
extern PFNGLGETNSEPARABLEFILTERPROC _gl_loader_glgetnseparablefilter;
typedef void (APIENTRY *PFNGLGETNTEXIMAGEPROC)        (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
extern PFNGLGETNTEXIMAGEPROC _gl_loader_glgetnteximage;
typedef void (APIENTRY *PFNGLGETNUNIFORMDVPROC)        (GLuint program, GLint location, GLsizei bufSize, GLdouble * params);
extern PFNGLGETNUNIFORMDVPROC _gl_loader_glgetnuniformdv;
typedef void (APIENTRY *PFNGLGETNUNIFORMFVPROC)        (GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
extern PFNGLGETNUNIFORMFVPROC _gl_loader_glgetnuniformfv;
typedef void (APIENTRY *PFNGLGETNUNIFORMIVPROC)        (GLuint program, GLint location, GLsizei bufSize, GLint * params);
extern PFNGLGETNUNIFORMIVPROC _gl_loader_glgetnuniformiv;
typedef void (APIENTRY *PFNGLGETNUNIFORMUIVPROC)        (GLuint program, GLint location, GLsizei bufSize, GLuint * params);
extern PFNGLGETNUNIFORMUIVPROC _gl_loader_glgetnuniformuiv;
typedef void (APIENTRY *PFNGLHINTPROC)        (GLenum target, GLenum mode);
extern PFNGLHINTPROC _gl_loader_glhint;
typedef void (APIENTRY *PFNGLINDEXMASKPROC)        (GLuint mask);
extern PFNGLINDEXMASKPROC _gl_loader_glindexmask;
typedef void (APIENTRY *PFNGLINDEXPOINTERPROC)        (GLenum type, GLsizei stride, const void * pointer);
extern PFNGLINDEXPOINTERPROC _gl_loader_glindexpointer;
typedef void (APIENTRY *PFNGLINDEXDPROC)        (GLdouble c);
extern PFNGLINDEXDPROC _gl_loader_glindexd;
typedef void (APIENTRY *PFNGLINDEXDVPROC)        (const GLdouble * c);
extern PFNGLINDEXDVPROC _gl_loader_glindexdv;
typedef void (APIENTRY *PFNGLINDEXFPROC)        (GLfloat c);
extern PFNGLINDEXFPROC _gl_loader_glindexf;
typedef void (APIENTRY *PFNGLINDEXFVPROC)        (const GLfloat * c);
extern PFNGLINDEXFVPROC _gl_loader_glindexfv;
typedef void (APIENTRY *PFNGLINDEXIPROC)        (GLint c);
extern PFNGLINDEXIPROC _gl_loader_glindexi;
typedef void (APIENTRY *PFNGLINDEXIVPROC)        (const GLint * c);
extern PFNGLINDEXIVPROC _gl_loader_glindexiv;
typedef void (APIENTRY *PFNGLINDEXSPROC)        (GLshort c);
extern PFNGLINDEXSPROC _gl_loader_glindexs;
typedef void (APIENTRY *PFNGLINDEXSVPROC)        (const GLshort * c);
extern PFNGLINDEXSVPROC _gl_loader_glindexsv;
typedef void (APIENTRY *PFNGLINDEXUBPROC)        (GLubyte c);
extern PFNGLINDEXUBPROC _gl_loader_glindexub;
typedef void (APIENTRY *PFNGLINDEXUBVPROC)        (const GLubyte * c);
extern PFNGLINDEXUBVPROC _gl_loader_glindexubv;
typedef void (APIENTRY *PFNGLINITNAMESPROC)        ();
extern PFNGLINITNAMESPROC _gl_loader_glinitnames;
typedef void (APIENTRY *PFNGLINTERLEAVEDARRAYSPROC)        (GLenum format, GLsizei stride, const void * pointer);
extern PFNGLINTERLEAVEDARRAYSPROC _gl_loader_glinterleavedarrays;
typedef void (APIENTRY *PFNGLINVALIDATEBUFFERDATAPROC)        (GLuint buffer);
extern PFNGLINVALIDATEBUFFERDATAPROC _gl_loader_glinvalidatebufferdata;
typedef void (APIENTRY *PFNGLINVALIDATEBUFFERSUBDATAPROC)        (GLuint buffer, GLintptr offset, GLsizeiptr length);
extern PFNGLINVALIDATEBUFFERSUBDATAPROC _gl_loader_glinvalidatebuffersubdata;
typedef void (APIENTRY *PFNGLINVALIDATEFRAMEBUFFERPROC)        (GLenum target, GLsizei numAttachments, const GLenum * attachments);
extern PFNGLINVALIDATEFRAMEBUFFERPROC _gl_loader_glinvalidateframebuffer;
typedef void (APIENTRY *PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)        (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments);
extern PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC _gl_loader_glinvalidatenamedframebufferdata;
typedef void (APIENTRY *PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)        (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC _gl_loader_glinvalidatenamedframebuffersubdata;
typedef void (APIENTRY *PFNGLINVALIDATESUBFRAMEBUFFERPROC)        (GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLINVALIDATESUBFRAMEBUFFERPROC _gl_loader_glinvalidatesubframebuffer;
typedef void (APIENTRY *PFNGLINVALIDATETEXIMAGEPROC)        (GLuint texture, GLint level);
extern PFNGLINVALIDATETEXIMAGEPROC _gl_loader_glinvalidateteximage;
typedef void (APIENTRY *PFNGLINVALIDATETEXSUBIMAGEPROC)        (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
extern PFNGLINVALIDATETEXSUBIMAGEPROC _gl_loader_glinvalidatetexsubimage;
typedef GLboolean (APIENTRY *PFNGLISBUFFERPROC)        (GLuint buffer);
extern PFNGLISBUFFERPROC _gl_loader_glisbuffer;
typedef GLboolean (APIENTRY *PFNGLISENABLEDPROC)        (GLenum cap);
extern PFNGLISENABLEDPROC _gl_loader_glisenabled;
typedef GLboolean (APIENTRY *PFNGLISENABLEDIPROC)        (GLenum target, GLuint index);
extern PFNGLISENABLEDIPROC _gl_loader_glisenabledi;
typedef GLboolean (APIENTRY *PFNGLISFRAMEBUFFERPROC)        (GLuint framebuffer);
extern PFNGLISFRAMEBUFFERPROC _gl_loader_glisframebuffer;
typedef GLboolean (APIENTRY *PFNGLISLISTPROC)        (GLuint list);
extern PFNGLISLISTPROC _gl_loader_glislist;
typedef GLboolean (APIENTRY *PFNGLISPROGRAMPROC)        (GLuint program);
extern PFNGLISPROGRAMPROC _gl_loader_glisprogram;
typedef GLboolean (APIENTRY *PFNGLISPROGRAMPIPELINEPROC)        (GLuint pipeline);
extern PFNGLISPROGRAMPIPELINEPROC _gl_loader_glisprogrampipeline;
typedef GLboolean (APIENTRY *PFNGLISQUERYPROC)        (GLuint id);
extern PFNGLISQUERYPROC _gl_loader_glisquery;
typedef GLboolean (APIENTRY *PFNGLISRENDERBUFFERPROC)        (GLuint renderbuffer);
extern PFNGLISRENDERBUFFERPROC _gl_loader_glisrenderbuffer;
typedef GLboolean (APIENTRY *PFNGLISSAMPLERPROC)        (GLuint sampler);
extern PFNGLISSAMPLERPROC _gl_loader_glissampler;
typedef GLboolean (APIENTRY *PFNGLISSHADERPROC)        (GLuint shader);
extern PFNGLISSHADERPROC _gl_loader_glisshader;
typedef GLboolean (APIENTRY *PFNGLISSYNCPROC)        (GLsync sync);
extern PFNGLISSYNCPROC _gl_loader_glissync;
typedef GLboolean (APIENTRY *PFNGLISTEXTUREPROC)        (GLuint texture);
extern PFNGLISTEXTUREPROC _gl_loader_glistexture;
typedef GLboolean (APIENTRY *PFNGLISTRANSFORMFEEDBACKPROC)        (GLuint id);
extern PFNGLISTRANSFORMFEEDBACKPROC _gl_loader_glistransformfeedback;
typedef GLboolean (APIENTRY *PFNGLISVERTEXARRAYPROC)        (GLuint array);
extern PFNGLISVERTEXARRAYPROC _gl_loader_glisvertexarray;
typedef void (APIENTRY *PFNGLLIGHTMODELFPROC)        (GLenum pname, GLfloat param);
extern PFNGLLIGHTMODELFPROC _gl_loader_gllightmodelf;
typedef void (APIENTRY *PFNGLLIGHTMODELFVPROC)        (GLenum pname, const GLfloat * params);
extern PFNGLLIGHTMODELFVPROC _gl_loader_gllightmodelfv;
typedef void (APIENTRY *PFNGLLIGHTMODELIPROC)        (GLenum pname, GLint param);
extern PFNGLLIGHTMODELIPROC _gl_loader_gllightmodeli;
typedef void (APIENTRY *PFNGLLIGHTMODELIVPROC)        (GLenum pname, const GLint * params);
extern PFNGLLIGHTMODELIVPROC _gl_loader_gllightmodeliv;
typedef void (APIENTRY *PFNGLLIGHTFPROC)        (GLenum light, GLenum pname, GLfloat param);
extern PFNGLLIGHTFPROC _gl_loader_gllightf;
typedef void (APIENTRY *PFNGLLIGHTFVPROC)        (GLenum light, GLenum pname, const GLfloat * params);
extern PFNGLLIGHTFVPROC _gl_loader_gllightfv;
typedef void (APIENTRY *PFNGLLIGHTIPROC)        (GLenum light, GLenum pname, GLint param);
extern PFNGLLIGHTIPROC _gl_loader_gllighti;
typedef void (APIENTRY *PFNGLLIGHTIVPROC)        (GLenum light, GLenum pname, const GLint * params);
extern PFNGLLIGHTIVPROC _gl_loader_gllightiv;
typedef void (APIENTRY *PFNGLLINESTIPPLEPROC)        (GLint factor, GLushort pattern);
extern PFNGLLINESTIPPLEPROC _gl_loader_gllinestipple;
typedef void (APIENTRY *PFNGLLINEWIDTHPROC)        (GLfloat width);
extern PFNGLLINEWIDTHPROC _gl_loader_gllinewidth;
typedef void (APIENTRY *PFNGLLINKPROGRAMPROC)        (GLuint program);
extern PFNGLLINKPROGRAMPROC _gl_loader_gllinkprogram;
typedef void (APIENTRY *PFNGLLISTBASEPROC)        (GLuint base);
extern PFNGLLISTBASEPROC _gl_loader_gllistbase;
typedef void (APIENTRY *PFNGLLOADIDENTITYPROC)        ();
extern PFNGLLOADIDENTITYPROC _gl_loader_glloadidentity;
typedef void (APIENTRY *PFNGLLOADMATRIXDPROC)        (const GLdouble * m);
extern PFNGLLOADMATRIXDPROC _gl_loader_glloadmatrixd;
typedef void (APIENTRY *PFNGLLOADMATRIXFPROC)        (const GLfloat * m);
extern PFNGLLOADMATRIXFPROC _gl_loader_glloadmatrixf;
typedef void (APIENTRY *PFNGLLOADNAMEPROC)        (GLuint name);
extern PFNGLLOADNAMEPROC _gl_loader_glloadname;
typedef void (APIENTRY *PFNGLLOADTRANSPOSEMATRIXDPROC)        (const GLdouble * m);
extern PFNGLLOADTRANSPOSEMATRIXDPROC _gl_loader_glloadtransposematrixd;
typedef void (APIENTRY *PFNGLLOADTRANSPOSEMATRIXFPROC)        (const GLfloat * m);
extern PFNGLLOADTRANSPOSEMATRIXFPROC _gl_loader_glloadtransposematrixf;
typedef void (APIENTRY *PFNGLLOGICOPPROC)        (GLenum opcode);
extern PFNGLLOGICOPPROC _gl_loader_gllogicop;
typedef void (APIENTRY *PFNGLMAP1DPROC)        (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
extern PFNGLMAP1DPROC _gl_loader_glmap1d;
typedef void (APIENTRY *PFNGLMAP1FPROC)        (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
extern PFNGLMAP1FPROC _gl_loader_glmap1f;
typedef void (APIENTRY *PFNGLMAP2DPROC)        (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
extern PFNGLMAP2DPROC _gl_loader_glmap2d;
typedef void (APIENTRY *PFNGLMAP2FPROC)        (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
extern PFNGLMAP2FPROC _gl_loader_glmap2f;
typedef void (APIENTRY *PFNGLMAPBUFFERPROC)        (GLenum target, GLenum access);
extern PFNGLMAPBUFFERPROC _gl_loader_glmapbuffer;
typedef void (APIENTRY *PFNGLMAPBUFFERRANGEPROC)        (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
extern PFNGLMAPBUFFERRANGEPROC _gl_loader_glmapbufferrange;
typedef void (APIENTRY *PFNGLMAPGRID1DPROC)        (GLint un, GLdouble u1, GLdouble u2);
extern PFNGLMAPGRID1DPROC _gl_loader_glmapgrid1d;
typedef void (APIENTRY *PFNGLMAPGRID1FPROC)        (GLint un, GLfloat u1, GLfloat u2);
extern PFNGLMAPGRID1FPROC _gl_loader_glmapgrid1f;
typedef void (APIENTRY *PFNGLMAPGRID2DPROC)        (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
extern PFNGLMAPGRID2DPROC _gl_loader_glmapgrid2d;
typedef void (APIENTRY *PFNGLMAPGRID2FPROC)        (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
extern PFNGLMAPGRID2FPROC _gl_loader_glmapgrid2f;
typedef void (APIENTRY *PFNGLMAPNAMEDBUFFERPROC)        (GLuint buffer, GLenum access);
extern PFNGLMAPNAMEDBUFFERPROC _gl_loader_glmapnamedbuffer;
typedef void (APIENTRY *PFNGLMAPNAMEDBUFFERRANGEPROC)        (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
extern PFNGLMAPNAMEDBUFFERRANGEPROC _gl_loader_glmapnamedbufferrange;
typedef void (APIENTRY *PFNGLMATERIALFPROC)        (GLenum face, GLenum pname, GLfloat param);
extern PFNGLMATERIALFPROC _gl_loader_glmaterialf;
typedef void (APIENTRY *PFNGLMATERIALFVPROC)        (GLenum face, GLenum pname, const GLfloat * params);
extern PFNGLMATERIALFVPROC _gl_loader_glmaterialfv;
typedef void (APIENTRY *PFNGLMATERIALIPROC)        (GLenum face, GLenum pname, GLint param);
extern PFNGLMATERIALIPROC _gl_loader_glmateriali;
typedef void (APIENTRY *PFNGLMATERIALIVPROC)        (GLenum face, GLenum pname, const GLint * params);
extern PFNGLMATERIALIVPROC _gl_loader_glmaterialiv;
typedef void (APIENTRY *PFNGLMATRIXMODEPROC)        (GLenum mode);
extern PFNGLMATRIXMODEPROC _gl_loader_glmatrixmode;
typedef void (APIENTRY *PFNGLMEMORYBARRIERPROC)        (GLbitfield barriers);
extern PFNGLMEMORYBARRIERPROC _gl_loader_glmemorybarrier;
typedef void (APIENTRY *PFNGLMEMORYBARRIERBYREGIONPROC)        (GLbitfield barriers);
extern PFNGLMEMORYBARRIERBYREGIONPROC _gl_loader_glmemorybarrierbyregion;
typedef void (APIENTRY *PFNGLMINSAMPLESHADINGPROC)        (GLfloat value);
extern PFNGLMINSAMPLESHADINGPROC _gl_loader_glminsampleshading;
typedef void (APIENTRY *PFNGLMULTMATRIXDPROC)        (const GLdouble * m);
extern PFNGLMULTMATRIXDPROC _gl_loader_glmultmatrixd;
typedef void (APIENTRY *PFNGLMULTMATRIXFPROC)        (const GLfloat * m);
extern PFNGLMULTMATRIXFPROC _gl_loader_glmultmatrixf;
typedef void (APIENTRY *PFNGLMULTTRANSPOSEMATRIXDPROC)        (const GLdouble * m);
extern PFNGLMULTTRANSPOSEMATRIXDPROC _gl_loader_glmulttransposematrixd;
typedef void (APIENTRY *PFNGLMULTTRANSPOSEMATRIXFPROC)        (const GLfloat * m);
extern PFNGLMULTTRANSPOSEMATRIXFPROC _gl_loader_glmulttransposematrixf;
typedef void (APIENTRY *PFNGLMULTIDRAWARRAYSPROC)        (GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
extern PFNGLMULTIDRAWARRAYSPROC _gl_loader_glmultidrawarrays;
typedef void (APIENTRY *PFNGLMULTIDRAWARRAYSINDIRECTPROC)        (GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride);
extern PFNGLMULTIDRAWARRAYSINDIRECTPROC _gl_loader_glmultidrawarraysindirect;
typedef void (APIENTRY *PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)        (GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
extern PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC _gl_loader_glmultidrawarraysindirectcount;
typedef void (APIENTRY *PFNGLMULTIDRAWELEMENTSPROC)        (GLenum mode, const GLsizei * count, GLenum type, const void * const * indices, GLsizei drawcount);
extern PFNGLMULTIDRAWELEMENTSPROC _gl_loader_glmultidrawelements;
typedef void (APIENTRY *PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)        (GLenum mode, const GLsizei * count, GLenum type, const void * const * indices, GLsizei drawcount, const GLint * basevertex);
extern PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC _gl_loader_glmultidrawelementsbasevertex;
typedef void (APIENTRY *PFNGLMULTIDRAWELEMENTSINDIRECTPROC)        (GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride);
extern PFNGLMULTIDRAWELEMENTSINDIRECTPROC _gl_loader_glmultidrawelementsindirect;
typedef void (APIENTRY *PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)        (GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
extern PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC _gl_loader_glmultidrawelementsindirectcount;
typedef void (APIENTRY *PFNGLMULTITEXCOORD1DPROC)        (GLenum target, GLdouble s);
extern PFNGLMULTITEXCOORD1DPROC _gl_loader_glmultitexcoord1d;
typedef void (APIENTRY *PFNGLMULTITEXCOORD1DVPROC)        (GLenum target, const GLdouble * v);
extern PFNGLMULTITEXCOORD1DVPROC _gl_loader_glmultitexcoord1dv;
typedef void (APIENTRY *PFNGLMULTITEXCOORD1FPROC)        (GLenum target, GLfloat s);
extern PFNGLMULTITEXCOORD1FPROC _gl_loader_glmultitexcoord1f;
typedef void (APIENTRY *PFNGLMULTITEXCOORD1FVPROC)        (GLenum target, const GLfloat * v);
extern PFNGLMULTITEXCOORD1FVPROC _gl_loader_glmultitexcoord1fv;
typedef void (APIENTRY *PFNGLMULTITEXCOORD1IPROC)        (GLenum target, GLint s);
extern PFNGLMULTITEXCOORD1IPROC _gl_loader_glmultitexcoord1i;
typedef void (APIENTRY *PFNGLMULTITEXCOORD1IVPROC)        (GLenum target, const GLint * v);
extern PFNGLMULTITEXCOORD1IVPROC _gl_loader_glmultitexcoord1iv;
typedef void (APIENTRY *PFNGLMULTITEXCOORD1SPROC)        (GLenum target, GLshort s);
extern PFNGLMULTITEXCOORD1SPROC _gl_loader_glmultitexcoord1s;
typedef void (APIENTRY *PFNGLMULTITEXCOORD1SVPROC)        (GLenum target, const GLshort * v);
extern PFNGLMULTITEXCOORD1SVPROC _gl_loader_glmultitexcoord1sv;
typedef void (APIENTRY *PFNGLMULTITEXCOORD2DPROC)        (GLenum target, GLdouble s, GLdouble t);
extern PFNGLMULTITEXCOORD2DPROC _gl_loader_glmultitexcoord2d;
typedef void (APIENTRY *PFNGLMULTITEXCOORD2DVPROC)        (GLenum target, const GLdouble * v);
extern PFNGLMULTITEXCOORD2DVPROC _gl_loader_glmultitexcoord2dv;
typedef void (APIENTRY *PFNGLMULTITEXCOORD2FPROC)        (GLenum target, GLfloat s, GLfloat t);
extern PFNGLMULTITEXCOORD2FPROC _gl_loader_glmultitexcoord2f;
typedef void (APIENTRY *PFNGLMULTITEXCOORD2FVPROC)        (GLenum target, const GLfloat * v);
extern PFNGLMULTITEXCOORD2FVPROC _gl_loader_glmultitexcoord2fv;
typedef void (APIENTRY *PFNGLMULTITEXCOORD2IPROC)        (GLenum target, GLint s, GLint t);
extern PFNGLMULTITEXCOORD2IPROC _gl_loader_glmultitexcoord2i;
typedef void (APIENTRY *PFNGLMULTITEXCOORD2IVPROC)        (GLenum target, const GLint * v);
extern PFNGLMULTITEXCOORD2IVPROC _gl_loader_glmultitexcoord2iv;
typedef void (APIENTRY *PFNGLMULTITEXCOORD2SPROC)        (GLenum target, GLshort s, GLshort t);
extern PFNGLMULTITEXCOORD2SPROC _gl_loader_glmultitexcoord2s;
typedef void (APIENTRY *PFNGLMULTITEXCOORD2SVPROC)        (GLenum target, const GLshort * v);
extern PFNGLMULTITEXCOORD2SVPROC _gl_loader_glmultitexcoord2sv;
typedef void (APIENTRY *PFNGLMULTITEXCOORD3DPROC)        (GLenum target, GLdouble s, GLdouble t, GLdouble r);
extern PFNGLMULTITEXCOORD3DPROC _gl_loader_glmultitexcoord3d;
typedef void (APIENTRY *PFNGLMULTITEXCOORD3DVPROC)        (GLenum target, const GLdouble * v);
extern PFNGLMULTITEXCOORD3DVPROC _gl_loader_glmultitexcoord3dv;
typedef void (APIENTRY *PFNGLMULTITEXCOORD3FPROC)        (GLenum target, GLfloat s, GLfloat t, GLfloat r);
extern PFNGLMULTITEXCOORD3FPROC _gl_loader_glmultitexcoord3f;
typedef void (APIENTRY *PFNGLMULTITEXCOORD3FVPROC)        (GLenum target, const GLfloat * v);
extern PFNGLMULTITEXCOORD3FVPROC _gl_loader_glmultitexcoord3fv;
typedef void (APIENTRY *PFNGLMULTITEXCOORD3IPROC)        (GLenum target, GLint s, GLint t, GLint r);
extern PFNGLMULTITEXCOORD3IPROC _gl_loader_glmultitexcoord3i;
typedef void (APIENTRY *PFNGLMULTITEXCOORD3IVPROC)        (GLenum target, const GLint * v);
extern PFNGLMULTITEXCOORD3IVPROC _gl_loader_glmultitexcoord3iv;
typedef void (APIENTRY *PFNGLMULTITEXCOORD3SPROC)        (GLenum target, GLshort s, GLshort t, GLshort r);
extern PFNGLMULTITEXCOORD3SPROC _gl_loader_glmultitexcoord3s;
typedef void (APIENTRY *PFNGLMULTITEXCOORD3SVPROC)        (GLenum target, const GLshort * v);
extern PFNGLMULTITEXCOORD3SVPROC _gl_loader_glmultitexcoord3sv;
typedef void (APIENTRY *PFNGLMULTITEXCOORD4DPROC)        (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
extern PFNGLMULTITEXCOORD4DPROC _gl_loader_glmultitexcoord4d;
typedef void (APIENTRY *PFNGLMULTITEXCOORD4DVPROC)        (GLenum target, const GLdouble * v);
extern PFNGLMULTITEXCOORD4DVPROC _gl_loader_glmultitexcoord4dv;
typedef void (APIENTRY *PFNGLMULTITEXCOORD4FPROC)        (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
extern PFNGLMULTITEXCOORD4FPROC _gl_loader_glmultitexcoord4f;
typedef void (APIENTRY *PFNGLMULTITEXCOORD4FVPROC)        (GLenum target, const GLfloat * v);
extern PFNGLMULTITEXCOORD4FVPROC _gl_loader_glmultitexcoord4fv;
typedef void (APIENTRY *PFNGLMULTITEXCOORD4IPROC)        (GLenum target, GLint s, GLint t, GLint r, GLint q);
extern PFNGLMULTITEXCOORD4IPROC _gl_loader_glmultitexcoord4i;
typedef void (APIENTRY *PFNGLMULTITEXCOORD4IVPROC)        (GLenum target, const GLint * v);
extern PFNGLMULTITEXCOORD4IVPROC _gl_loader_glmultitexcoord4iv;
typedef void (APIENTRY *PFNGLMULTITEXCOORD4SPROC)        (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
extern PFNGLMULTITEXCOORD4SPROC _gl_loader_glmultitexcoord4s;
typedef void (APIENTRY *PFNGLMULTITEXCOORD4SVPROC)        (GLenum target, const GLshort * v);
extern PFNGLMULTITEXCOORD4SVPROC _gl_loader_glmultitexcoord4sv;
typedef void (APIENTRY *PFNGLMULTITEXCOORDP1UIPROC)        (GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP1UIPROC _gl_loader_glmultitexcoordp1ui;
typedef void (APIENTRY *PFNGLMULTITEXCOORDP1UIVPROC)        (GLenum texture, GLenum type, const GLuint * coords);
extern PFNGLMULTITEXCOORDP1UIVPROC _gl_loader_glmultitexcoordp1uiv;
typedef void (APIENTRY *PFNGLMULTITEXCOORDP2UIPROC)        (GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP2UIPROC _gl_loader_glmultitexcoordp2ui;
typedef void (APIENTRY *PFNGLMULTITEXCOORDP2UIVPROC)        (GLenum texture, GLenum type, const GLuint * coords);
extern PFNGLMULTITEXCOORDP2UIVPROC _gl_loader_glmultitexcoordp2uiv;
typedef void (APIENTRY *PFNGLMULTITEXCOORDP3UIPROC)        (GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP3UIPROC _gl_loader_glmultitexcoordp3ui;
typedef void (APIENTRY *PFNGLMULTITEXCOORDP3UIVPROC)        (GLenum texture, GLenum type, const GLuint * coords);
extern PFNGLMULTITEXCOORDP3UIVPROC _gl_loader_glmultitexcoordp3uiv;
typedef void (APIENTRY *PFNGLMULTITEXCOORDP4UIPROC)        (GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP4UIPROC _gl_loader_glmultitexcoordp4ui;
typedef void (APIENTRY *PFNGLMULTITEXCOORDP4UIVPROC)        (GLenum texture, GLenum type, const GLuint * coords);
extern PFNGLMULTITEXCOORDP4UIVPROC _gl_loader_glmultitexcoordp4uiv;
typedef void (APIENTRY *PFNGLNAMEDBUFFERDATAPROC)        (GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);
extern PFNGLNAMEDBUFFERDATAPROC _gl_loader_glnamedbufferdata;
typedef void (APIENTRY *PFNGLNAMEDBUFFERSTORAGEPROC)        (GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);
extern PFNGLNAMEDBUFFERSTORAGEPROC _gl_loader_glnamedbufferstorage;
typedef void (APIENTRY *PFNGLNAMEDBUFFERSUBDATAPROC)        (GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
extern PFNGLNAMEDBUFFERSUBDATAPROC _gl_loader_glnamedbuffersubdata;
typedef void (APIENTRY *PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)        (GLuint framebuffer, GLenum buf);
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC _gl_loader_glnamedframebufferdrawbuffer;
typedef void (APIENTRY *PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)        (GLuint framebuffer, GLsizei n, const GLenum * bufs);
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC _gl_loader_glnamedframebufferdrawbuffers;
typedef void (APIENTRY *PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)        (GLuint framebuffer, GLenum pname, GLint param);
extern PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC _gl_loader_glnamedframebufferparameteri;
typedef void (APIENTRY *PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)        (GLuint framebuffer, GLenum src);
extern PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC _gl_loader_glnamedframebufferreadbuffer;
typedef void (APIENTRY *PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)        (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC _gl_loader_glnamedframebufferrenderbuffer;
typedef void (APIENTRY *PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)        (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
extern PFNGLNAMEDFRAMEBUFFERTEXTUREPROC _gl_loader_glnamedframebuffertexture;
typedef void (APIENTRY *PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)        (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
extern PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC _gl_loader_glnamedframebuffertexturelayer;
typedef void (APIENTRY *PFNGLNAMEDRENDERBUFFERSTORAGEPROC)        (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLNAMEDRENDERBUFFERSTORAGEPROC _gl_loader_glnamedrenderbufferstorage;
typedef void (APIENTRY *PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)        (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC _gl_loader_glnamedrenderbufferstoragemultisample;
typedef void (APIENTRY *PFNGLNEWLISTPROC)        (GLuint list, GLenum mode);
extern PFNGLNEWLISTPROC _gl_loader_glnewlist;
typedef void (APIENTRY *PFNGLNORMAL3BPROC)        (GLbyte nx, GLbyte ny, GLbyte nz);
extern PFNGLNORMAL3BPROC _gl_loader_glnormal3b;
typedef void (APIENTRY *PFNGLNORMAL3BVPROC)        (const GLbyte * v);
extern PFNGLNORMAL3BVPROC _gl_loader_glnormal3bv;
typedef void (APIENTRY *PFNGLNORMAL3DPROC)        (GLdouble nx, GLdouble ny, GLdouble nz);
extern PFNGLNORMAL3DPROC _gl_loader_glnormal3d;
typedef void (APIENTRY *PFNGLNORMAL3DVPROC)        (const GLdouble * v);
extern PFNGLNORMAL3DVPROC _gl_loader_glnormal3dv;
typedef void (APIENTRY *PFNGLNORMAL3FPROC)        (GLfloat nx, GLfloat ny, GLfloat nz);
extern PFNGLNORMAL3FPROC _gl_loader_glnormal3f;
typedef void (APIENTRY *PFNGLNORMAL3FVPROC)        (const GLfloat * v);
extern PFNGLNORMAL3FVPROC _gl_loader_glnormal3fv;
typedef void (APIENTRY *PFNGLNORMAL3IPROC)        (GLint nx, GLint ny, GLint nz);
extern PFNGLNORMAL3IPROC _gl_loader_glnormal3i;
typedef void (APIENTRY *PFNGLNORMAL3IVPROC)        (const GLint * v);
extern PFNGLNORMAL3IVPROC _gl_loader_glnormal3iv;
typedef void (APIENTRY *PFNGLNORMAL3SPROC)        (GLshort nx, GLshort ny, GLshort nz);
extern PFNGLNORMAL3SPROC _gl_loader_glnormal3s;
typedef void (APIENTRY *PFNGLNORMAL3SVPROC)        (const GLshort * v);
extern PFNGLNORMAL3SVPROC _gl_loader_glnormal3sv;
typedef void (APIENTRY *PFNGLNORMALP3UIPROC)        (GLenum type, GLuint coords);
extern PFNGLNORMALP3UIPROC _gl_loader_glnormalp3ui;
typedef void (APIENTRY *PFNGLNORMALP3UIVPROC)        (GLenum type, const GLuint * coords);
extern PFNGLNORMALP3UIVPROC _gl_loader_glnormalp3uiv;
typedef void (APIENTRY *PFNGLNORMALPOINTERPROC)        (GLenum type, GLsizei stride, const void * pointer);
extern PFNGLNORMALPOINTERPROC _gl_loader_glnormalpointer;
typedef void (APIENTRY *PFNGLOBJECTLABELPROC)        (GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
extern PFNGLOBJECTLABELPROC _gl_loader_globjectlabel;
typedef void (APIENTRY *PFNGLOBJECTPTRLABELPROC)        (const void * ptr, GLsizei length, const GLchar * label);
extern PFNGLOBJECTPTRLABELPROC _gl_loader_globjectptrlabel;
typedef void (APIENTRY *PFNGLORTHOPROC)        (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
extern PFNGLORTHOPROC _gl_loader_glortho;
typedef void (APIENTRY *PFNGLPASSTHROUGHPROC)        (GLfloat token);
extern PFNGLPASSTHROUGHPROC _gl_loader_glpassthrough;
typedef void (APIENTRY *PFNGLPATCHPARAMETERFVPROC)        (GLenum pname, const GLfloat * values);
extern PFNGLPATCHPARAMETERFVPROC _gl_loader_glpatchparameterfv;
typedef void (APIENTRY *PFNGLPATCHPARAMETERIPROC)        (GLenum pname, GLint value);
extern PFNGLPATCHPARAMETERIPROC _gl_loader_glpatchparameteri;
typedef void (APIENTRY *PFNGLPAUSETRANSFORMFEEDBACKPROC)        ();
extern PFNGLPAUSETRANSFORMFEEDBACKPROC _gl_loader_glpausetransformfeedback;
typedef void (APIENTRY *PFNGLPIXELMAPFVPROC)        (GLenum map, GLsizei mapsize, const GLfloat * values);
extern PFNGLPIXELMAPFVPROC _gl_loader_glpixelmapfv;
typedef void (APIENTRY *PFNGLPIXELMAPUIVPROC)        (GLenum map, GLsizei mapsize, const GLuint * values);
extern PFNGLPIXELMAPUIVPROC _gl_loader_glpixelmapuiv;
typedef void (APIENTRY *PFNGLPIXELMAPUSVPROC)        (GLenum map, GLsizei mapsize, const GLushort * values);
extern PFNGLPIXELMAPUSVPROC _gl_loader_glpixelmapusv;
typedef void (APIENTRY *PFNGLPIXELSTOREFPROC)        (GLenum pname, GLfloat param);
extern PFNGLPIXELSTOREFPROC _gl_loader_glpixelstoref;
typedef void (APIENTRY *PFNGLPIXELSTOREIPROC)        (GLenum pname, GLint param);
extern PFNGLPIXELSTOREIPROC _gl_loader_glpixelstorei;
typedef void (APIENTRY *PFNGLPIXELTRANSFERFPROC)        (GLenum pname, GLfloat param);
extern PFNGLPIXELTRANSFERFPROC _gl_loader_glpixeltransferf;
typedef void (APIENTRY *PFNGLPIXELTRANSFERIPROC)        (GLenum pname, GLint param);
extern PFNGLPIXELTRANSFERIPROC _gl_loader_glpixeltransferi;
typedef void (APIENTRY *PFNGLPIXELZOOMPROC)        (GLfloat xfactor, GLfloat yfactor);
extern PFNGLPIXELZOOMPROC _gl_loader_glpixelzoom;
typedef void (APIENTRY *PFNGLPOINTPARAMETERFPROC)        (GLenum pname, GLfloat param);
extern PFNGLPOINTPARAMETERFPROC _gl_loader_glpointparameterf;
typedef void (APIENTRY *PFNGLPOINTPARAMETERFVPROC)        (GLenum pname, const GLfloat * params);
extern PFNGLPOINTPARAMETERFVPROC _gl_loader_glpointparameterfv;
typedef void (APIENTRY *PFNGLPOINTPARAMETERIPROC)        (GLenum pname, GLint param);
extern PFNGLPOINTPARAMETERIPROC _gl_loader_glpointparameteri;
typedef void (APIENTRY *PFNGLPOINTPARAMETERIVPROC)        (GLenum pname, const GLint * params);
extern PFNGLPOINTPARAMETERIVPROC _gl_loader_glpointparameteriv;
typedef void (APIENTRY *PFNGLPOINTSIZEPROC)        (GLfloat size);
extern PFNGLPOINTSIZEPROC _gl_loader_glpointsize;
typedef void (APIENTRY *PFNGLPOLYGONMODEPROC)        (GLenum face, GLenum mode);
extern PFNGLPOLYGONMODEPROC _gl_loader_glpolygonmode;
typedef void (APIENTRY *PFNGLPOLYGONOFFSETPROC)        (GLfloat factor, GLfloat units);
extern PFNGLPOLYGONOFFSETPROC _gl_loader_glpolygonoffset;
typedef void (APIENTRY *PFNGLPOLYGONOFFSETCLAMPPROC)        (GLfloat factor, GLfloat units, GLfloat clamp);
extern PFNGLPOLYGONOFFSETCLAMPPROC _gl_loader_glpolygonoffsetclamp;
typedef void (APIENTRY *PFNGLPOLYGONSTIPPLEPROC)        (const GLubyte * mask);
extern PFNGLPOLYGONSTIPPLEPROC _gl_loader_glpolygonstipple;
typedef void (APIENTRY *PFNGLPOPATTRIBPROC)        ();
extern PFNGLPOPATTRIBPROC _gl_loader_glpopattrib;
typedef void (APIENTRY *PFNGLPOPCLIENTATTRIBPROC)        ();
extern PFNGLPOPCLIENTATTRIBPROC _gl_loader_glpopclientattrib;
typedef void (APIENTRY *PFNGLPOPDEBUGGROUPPROC)        ();
extern PFNGLPOPDEBUGGROUPPROC _gl_loader_glpopdebuggroup;
typedef void (APIENTRY *PFNGLPOPMATRIXPROC)        ();
extern PFNGLPOPMATRIXPROC _gl_loader_glpopmatrix;
typedef void (APIENTRY *PFNGLPOPNAMEPROC)        ();
extern PFNGLPOPNAMEPROC _gl_loader_glpopname;
typedef void (APIENTRY *PFNGLPRIMITIVERESTARTINDEXPROC)        (GLuint index);
extern PFNGLPRIMITIVERESTARTINDEXPROC _gl_loader_glprimitiverestartindex;
typedef void (APIENTRY *PFNGLPRIORITIZETEXTURESPROC)        (GLsizei n, const GLuint * textures, const GLfloat * priorities);
extern PFNGLPRIORITIZETEXTURESPROC _gl_loader_glprioritizetextures;
typedef void (APIENTRY *PFNGLPROGRAMBINARYPROC)        (GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);
extern PFNGLPROGRAMBINARYPROC _gl_loader_glprogrambinary;
typedef void (APIENTRY *PFNGLPROGRAMPARAMETERIPROC)        (GLuint program, GLenum pname, GLint value);
extern PFNGLPROGRAMPARAMETERIPROC _gl_loader_glprogramparameteri;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM1DPROC)        (GLuint program, GLint location, GLdouble v0);
extern PFNGLPROGRAMUNIFORM1DPROC _gl_loader_glprogramuniform1d;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM1DVPROC)        (GLuint program, GLint location, GLsizei count, const GLdouble * value);
extern PFNGLPROGRAMUNIFORM1DVPROC _gl_loader_glprogramuniform1dv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM1FPROC)        (GLuint program, GLint location, GLfloat v0);
extern PFNGLPROGRAMUNIFORM1FPROC _gl_loader_glprogramuniform1f;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM1FVPROC)        (GLuint program, GLint location, GLsizei count, const GLfloat * value);
extern PFNGLPROGRAMUNIFORM1FVPROC _gl_loader_glprogramuniform1fv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM1IPROC)        (GLuint program, GLint location, GLint v0);
extern PFNGLPROGRAMUNIFORM1IPROC _gl_loader_glprogramuniform1i;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM1IVPROC)        (GLuint program, GLint location, GLsizei count, const GLint * value);
extern PFNGLPROGRAMUNIFORM1IVPROC _gl_loader_glprogramuniform1iv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM1UIPROC)        (GLuint program, GLint location, GLuint v0);
extern PFNGLPROGRAMUNIFORM1UIPROC _gl_loader_glprogramuniform1ui;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM1UIVPROC)        (GLuint program, GLint location, GLsizei count, const GLuint * value);
extern PFNGLPROGRAMUNIFORM1UIVPROC _gl_loader_glprogramuniform1uiv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM2DPROC)        (GLuint program, GLint location, GLdouble v0, GLdouble v1);
extern PFNGLPROGRAMUNIFORM2DPROC _gl_loader_glprogramuniform2d;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM2DVPROC)        (GLuint program, GLint location, GLsizei count, const GLdouble * value);
extern PFNGLPROGRAMUNIFORM2DVPROC _gl_loader_glprogramuniform2dv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM2FPROC)        (GLuint program, GLint location, GLfloat v0, GLfloat v1);
extern PFNGLPROGRAMUNIFORM2FPROC _gl_loader_glprogramuniform2f;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM2FVPROC)        (GLuint program, GLint location, GLsizei count, const GLfloat * value);
extern PFNGLPROGRAMUNIFORM2FVPROC _gl_loader_glprogramuniform2fv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM2IPROC)        (GLuint program, GLint location, GLint v0, GLint v1);
extern PFNGLPROGRAMUNIFORM2IPROC _gl_loader_glprogramuniform2i;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM2IVPROC)        (GLuint program, GLint location, GLsizei count, const GLint * value);
extern PFNGLPROGRAMUNIFORM2IVPROC _gl_loader_glprogramuniform2iv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM2UIPROC)        (GLuint program, GLint location, GLuint v0, GLuint v1);
extern PFNGLPROGRAMUNIFORM2UIPROC _gl_loader_glprogramuniform2ui;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM2UIVPROC)        (GLuint program, GLint location, GLsizei count, const GLuint * value);
extern PFNGLPROGRAMUNIFORM2UIVPROC _gl_loader_glprogramuniform2uiv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM3DPROC)        (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
extern PFNGLPROGRAMUNIFORM3DPROC _gl_loader_glprogramuniform3d;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM3DVPROC)        (GLuint program, GLint location, GLsizei count, const GLdouble * value);
extern PFNGLPROGRAMUNIFORM3DVPROC _gl_loader_glprogramuniform3dv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM3FPROC)        (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern PFNGLPROGRAMUNIFORM3FPROC _gl_loader_glprogramuniform3f;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM3FVPROC)        (GLuint program, GLint location, GLsizei count, const GLfloat * value);
extern PFNGLPROGRAMUNIFORM3FVPROC _gl_loader_glprogramuniform3fv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM3IPROC)        (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
extern PFNGLPROGRAMUNIFORM3IPROC _gl_loader_glprogramuniform3i;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM3IVPROC)        (GLuint program, GLint location, GLsizei count, const GLint * value);
extern PFNGLPROGRAMUNIFORM3IVPROC _gl_loader_glprogramuniform3iv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM3UIPROC)        (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
extern PFNGLPROGRAMUNIFORM3UIPROC _gl_loader_glprogramuniform3ui;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM3UIVPROC)        (GLuint program, GLint location, GLsizei count, const GLuint * value);
extern PFNGLPROGRAMUNIFORM3UIVPROC _gl_loader_glprogramuniform3uiv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM4DPROC)        (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
extern PFNGLPROGRAMUNIFORM4DPROC _gl_loader_glprogramuniform4d;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM4DVPROC)        (GLuint program, GLint location, GLsizei count, const GLdouble * value);
extern PFNGLPROGRAMUNIFORM4DVPROC _gl_loader_glprogramuniform4dv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM4FPROC)        (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern PFNGLPROGRAMUNIFORM4FPROC _gl_loader_glprogramuniform4f;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM4FVPROC)        (GLuint program, GLint location, GLsizei count, const GLfloat * value);
extern PFNGLPROGRAMUNIFORM4FVPROC _gl_loader_glprogramuniform4fv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM4IPROC)        (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern PFNGLPROGRAMUNIFORM4IPROC _gl_loader_glprogramuniform4i;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM4IVPROC)        (GLuint program, GLint location, GLsizei count, const GLint * value);
extern PFNGLPROGRAMUNIFORM4IVPROC _gl_loader_glprogramuniform4iv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM4UIPROC)        (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
extern PFNGLPROGRAMUNIFORM4UIPROC _gl_loader_glprogramuniform4ui;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORM4UIVPROC)        (GLuint program, GLint location, GLsizei count, const GLuint * value);
extern PFNGLPROGRAMUNIFORM4UIVPROC _gl_loader_glprogramuniform4uiv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX2DVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLPROGRAMUNIFORMMATRIX2DVPROC _gl_loader_glprogramuniformmatrix2dv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX2FVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLPROGRAMUNIFORMMATRIX2FVPROC _gl_loader_glprogramuniformmatrix2fv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC _gl_loader_glprogramuniformmatrix2x3dv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC _gl_loader_glprogramuniformmatrix2x3fv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC _gl_loader_glprogramuniformmatrix2x4dv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC _gl_loader_glprogramuniformmatrix2x4fv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX3DVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLPROGRAMUNIFORMMATRIX3DVPROC _gl_loader_glprogramuniformmatrix3dv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX3FVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLPROGRAMUNIFORMMATRIX3FVPROC _gl_loader_glprogramuniformmatrix3fv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC _gl_loader_glprogramuniformmatrix3x2dv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC _gl_loader_glprogramuniformmatrix3x2fv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC _gl_loader_glprogramuniformmatrix3x4dv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC _gl_loader_glprogramuniformmatrix3x4fv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX4DVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLPROGRAMUNIFORMMATRIX4DVPROC _gl_loader_glprogramuniformmatrix4dv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX4FVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLPROGRAMUNIFORMMATRIX4FVPROC _gl_loader_glprogramuniformmatrix4fv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC _gl_loader_glprogramuniformmatrix4x2dv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC _gl_loader_glprogramuniformmatrix4x2fv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC _gl_loader_glprogramuniformmatrix4x3dv;
typedef void (APIENTRY *PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)        (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC _gl_loader_glprogramuniformmatrix4x3fv;
typedef void (APIENTRY *PFNGLPROVOKINGVERTEXPROC)        (GLenum mode);
extern PFNGLPROVOKINGVERTEXPROC _gl_loader_glprovokingvertex;
typedef void (APIENTRY *PFNGLPUSHATTRIBPROC)        (GLbitfield mask);
extern PFNGLPUSHATTRIBPROC _gl_loader_glpushattrib;
typedef void (APIENTRY *PFNGLPUSHCLIENTATTRIBPROC)        (GLbitfield mask);
extern PFNGLPUSHCLIENTATTRIBPROC _gl_loader_glpushclientattrib;
typedef void (APIENTRY *PFNGLPUSHDEBUGGROUPPROC)        (GLenum source, GLuint id, GLsizei length, const GLchar * message);
extern PFNGLPUSHDEBUGGROUPPROC _gl_loader_glpushdebuggroup;
typedef void (APIENTRY *PFNGLPUSHMATRIXPROC)        ();
extern PFNGLPUSHMATRIXPROC _gl_loader_glpushmatrix;
typedef void (APIENTRY *PFNGLPUSHNAMEPROC)        (GLuint name);
extern PFNGLPUSHNAMEPROC _gl_loader_glpushname;
typedef void (APIENTRY *PFNGLQUERYCOUNTERPROC)        (GLuint id, GLenum target);
extern PFNGLQUERYCOUNTERPROC _gl_loader_glquerycounter;
typedef void (APIENTRY *PFNGLRASTERPOS2DPROC)        (GLdouble x, GLdouble y);
extern PFNGLRASTERPOS2DPROC _gl_loader_glrasterpos2d;
typedef void (APIENTRY *PFNGLRASTERPOS2DVPROC)        (const GLdouble * v);
extern PFNGLRASTERPOS2DVPROC _gl_loader_glrasterpos2dv;
typedef void (APIENTRY *PFNGLRASTERPOS2FPROC)        (GLfloat x, GLfloat y);
extern PFNGLRASTERPOS2FPROC _gl_loader_glrasterpos2f;
typedef void (APIENTRY *PFNGLRASTERPOS2FVPROC)        (const GLfloat * v);
extern PFNGLRASTERPOS2FVPROC _gl_loader_glrasterpos2fv;
typedef void (APIENTRY *PFNGLRASTERPOS2IPROC)        (GLint x, GLint y);
extern PFNGLRASTERPOS2IPROC _gl_loader_glrasterpos2i;
typedef void (APIENTRY *PFNGLRASTERPOS2IVPROC)        (const GLint * v);
extern PFNGLRASTERPOS2IVPROC _gl_loader_glrasterpos2iv;
typedef void (APIENTRY *PFNGLRASTERPOS2SPROC)        (GLshort x, GLshort y);
extern PFNGLRASTERPOS2SPROC _gl_loader_glrasterpos2s;
typedef void (APIENTRY *PFNGLRASTERPOS2SVPROC)        (const GLshort * v);
extern PFNGLRASTERPOS2SVPROC _gl_loader_glrasterpos2sv;
typedef void (APIENTRY *PFNGLRASTERPOS3DPROC)        (GLdouble x, GLdouble y, GLdouble z);
extern PFNGLRASTERPOS3DPROC _gl_loader_glrasterpos3d;
typedef void (APIENTRY *PFNGLRASTERPOS3DVPROC)        (const GLdouble * v);
extern PFNGLRASTERPOS3DVPROC _gl_loader_glrasterpos3dv;
typedef void (APIENTRY *PFNGLRASTERPOS3FPROC)        (GLfloat x, GLfloat y, GLfloat z);
extern PFNGLRASTERPOS3FPROC _gl_loader_glrasterpos3f;
typedef void (APIENTRY *PFNGLRASTERPOS3FVPROC)        (const GLfloat * v);
extern PFNGLRASTERPOS3FVPROC _gl_loader_glrasterpos3fv;
typedef void (APIENTRY *PFNGLRASTERPOS3IPROC)        (GLint x, GLint y, GLint z);
extern PFNGLRASTERPOS3IPROC _gl_loader_glrasterpos3i;
typedef void (APIENTRY *PFNGLRASTERPOS3IVPROC)        (const GLint * v);
extern PFNGLRASTERPOS3IVPROC _gl_loader_glrasterpos3iv;
typedef void (APIENTRY *PFNGLRASTERPOS3SPROC)        (GLshort x, GLshort y, GLshort z);
extern PFNGLRASTERPOS3SPROC _gl_loader_glrasterpos3s;
typedef void (APIENTRY *PFNGLRASTERPOS3SVPROC)        (const GLshort * v);
extern PFNGLRASTERPOS3SVPROC _gl_loader_glrasterpos3sv;
typedef void (APIENTRY *PFNGLRASTERPOS4DPROC)        (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFNGLRASTERPOS4DPROC _gl_loader_glrasterpos4d;
typedef void (APIENTRY *PFNGLRASTERPOS4DVPROC)        (const GLdouble * v);
extern PFNGLRASTERPOS4DVPROC _gl_loader_glrasterpos4dv;
typedef void (APIENTRY *PFNGLRASTERPOS4FPROC)        (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern PFNGLRASTERPOS4FPROC _gl_loader_glrasterpos4f;
typedef void (APIENTRY *PFNGLRASTERPOS4FVPROC)        (const GLfloat * v);
extern PFNGLRASTERPOS4FVPROC _gl_loader_glrasterpos4fv;
typedef void (APIENTRY *PFNGLRASTERPOS4IPROC)        (GLint x, GLint y, GLint z, GLint w);
extern PFNGLRASTERPOS4IPROC _gl_loader_glrasterpos4i;
typedef void (APIENTRY *PFNGLRASTERPOS4IVPROC)        (const GLint * v);
extern PFNGLRASTERPOS4IVPROC _gl_loader_glrasterpos4iv;
typedef void (APIENTRY *PFNGLRASTERPOS4SPROC)        (GLshort x, GLshort y, GLshort z, GLshort w);
extern PFNGLRASTERPOS4SPROC _gl_loader_glrasterpos4s;
typedef void (APIENTRY *PFNGLRASTERPOS4SVPROC)        (const GLshort * v);
extern PFNGLRASTERPOS4SVPROC _gl_loader_glrasterpos4sv;
typedef void (APIENTRY *PFNGLREADBUFFERPROC)        (GLenum src);
extern PFNGLREADBUFFERPROC _gl_loader_glreadbuffer;
typedef void (APIENTRY *PFNGLREADPIXELSPROC)        (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
extern PFNGLREADPIXELSPROC _gl_loader_glreadpixels;
typedef void (APIENTRY *PFNGLREADNPIXELSPROC)        (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
extern PFNGLREADNPIXELSPROC _gl_loader_glreadnpixels;
typedef void (APIENTRY *PFNGLRECTDPROC)        (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
extern PFNGLRECTDPROC _gl_loader_glrectd;
typedef void (APIENTRY *PFNGLRECTDVPROC)        (const GLdouble * v1, const GLdouble * v2);
extern PFNGLRECTDVPROC _gl_loader_glrectdv;
typedef void (APIENTRY *PFNGLRECTFPROC)        (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
extern PFNGLRECTFPROC _gl_loader_glrectf;
typedef void (APIENTRY *PFNGLRECTFVPROC)        (const GLfloat * v1, const GLfloat * v2);
extern PFNGLRECTFVPROC _gl_loader_glrectfv;
typedef void (APIENTRY *PFNGLRECTIPROC)        (GLint x1, GLint y1, GLint x2, GLint y2);
extern PFNGLRECTIPROC _gl_loader_glrecti;
typedef void (APIENTRY *PFNGLRECTIVPROC)        (const GLint * v1, const GLint * v2);
extern PFNGLRECTIVPROC _gl_loader_glrectiv;
typedef void (APIENTRY *PFNGLRECTSPROC)        (GLshort x1, GLshort y1, GLshort x2, GLshort y2);
extern PFNGLRECTSPROC _gl_loader_glrects;
typedef void (APIENTRY *PFNGLRECTSVPROC)        (const GLshort * v1, const GLshort * v2);
extern PFNGLRECTSVPROC _gl_loader_glrectsv;
typedef void (APIENTRY *PFNGLRELEASESHADERCOMPILERPROC)        ();
extern PFNGLRELEASESHADERCOMPILERPROC _gl_loader_glreleaseshadercompiler;
typedef GLint (APIENTRY *PFNGLRENDERMODEPROC)        (GLenum mode);
extern PFNGLRENDERMODEPROC _gl_loader_glrendermode;
typedef void (APIENTRY *PFNGLRENDERBUFFERSTORAGEPROC)        (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLRENDERBUFFERSTORAGEPROC _gl_loader_glrenderbufferstorage;
typedef void (APIENTRY *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)        (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC _gl_loader_glrenderbufferstoragemultisample;
typedef void (APIENTRY *PFNGLRESUMETRANSFORMFEEDBACKPROC)        ();
extern PFNGLRESUMETRANSFORMFEEDBACKPROC _gl_loader_glresumetransformfeedback;
typedef void (APIENTRY *PFNGLROTATEDPROC)        (GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
extern PFNGLROTATEDPROC _gl_loader_glrotated;
typedef void (APIENTRY *PFNGLROTATEFPROC)        (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
extern PFNGLROTATEFPROC _gl_loader_glrotatef;
typedef void (APIENTRY *PFNGLSAMPLECOVERAGEPROC)        (GLfloat value, GLboolean invert);
extern PFNGLSAMPLECOVERAGEPROC _gl_loader_glsamplecoverage;
typedef void (APIENTRY *PFNGLSAMPLEMASKIPROC)        (GLuint maskNumber, GLbitfield mask);
extern PFNGLSAMPLEMASKIPROC _gl_loader_glsamplemaski;
typedef void (APIENTRY *PFNGLSAMPLERPARAMETERIIVPROC)        (GLuint sampler, GLenum pname, const GLint * param);
extern PFNGLSAMPLERPARAMETERIIVPROC _gl_loader_glsamplerparameteriiv;
typedef void (APIENTRY *PFNGLSAMPLERPARAMETERIUIVPROC)        (GLuint sampler, GLenum pname, const GLuint * param);
extern PFNGLSAMPLERPARAMETERIUIVPROC _gl_loader_glsamplerparameteriuiv;
typedef void (APIENTRY *PFNGLSAMPLERPARAMETERFPROC)        (GLuint sampler, GLenum pname, GLfloat param);
extern PFNGLSAMPLERPARAMETERFPROC _gl_loader_glsamplerparameterf;
typedef void (APIENTRY *PFNGLSAMPLERPARAMETERFVPROC)        (GLuint sampler, GLenum pname, const GLfloat * param);
extern PFNGLSAMPLERPARAMETERFVPROC _gl_loader_glsamplerparameterfv;
typedef void (APIENTRY *PFNGLSAMPLERPARAMETERIPROC)        (GLuint sampler, GLenum pname, GLint param);
extern PFNGLSAMPLERPARAMETERIPROC _gl_loader_glsamplerparameteri;
typedef void (APIENTRY *PFNGLSAMPLERPARAMETERIVPROC)        (GLuint sampler, GLenum pname, const GLint * param);
extern PFNGLSAMPLERPARAMETERIVPROC _gl_loader_glsamplerparameteriv;
typedef void (APIENTRY *PFNGLSCALEDPROC)        (GLdouble x, GLdouble y, GLdouble z);
extern PFNGLSCALEDPROC _gl_loader_glscaled;
typedef void (APIENTRY *PFNGLSCALEFPROC)        (GLfloat x, GLfloat y, GLfloat z);
extern PFNGLSCALEFPROC _gl_loader_glscalef;
typedef void (APIENTRY *PFNGLSCISSORPROC)        (GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLSCISSORPROC _gl_loader_glscissor;
typedef void (APIENTRY *PFNGLSCISSORARRAYVPROC)        (GLuint first, GLsizei count, const GLint * v);
extern PFNGLSCISSORARRAYVPROC _gl_loader_glscissorarrayv;
typedef void (APIENTRY *PFNGLSCISSORINDEXEDPROC)        (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
extern PFNGLSCISSORINDEXEDPROC _gl_loader_glscissorindexed;
typedef void (APIENTRY *PFNGLSCISSORINDEXEDVPROC)        (GLuint index, const GLint * v);
extern PFNGLSCISSORINDEXEDVPROC _gl_loader_glscissorindexedv;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3BPROC)        (GLbyte red, GLbyte green, GLbyte blue);
extern PFNGLSECONDARYCOLOR3BPROC _gl_loader_glsecondarycolor3b;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3BVPROC)        (const GLbyte * v);
extern PFNGLSECONDARYCOLOR3BVPROC _gl_loader_glsecondarycolor3bv;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3DPROC)        (GLdouble red, GLdouble green, GLdouble blue);
extern PFNGLSECONDARYCOLOR3DPROC _gl_loader_glsecondarycolor3d;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3DVPROC)        (const GLdouble * v);
extern PFNGLSECONDARYCOLOR3DVPROC _gl_loader_glsecondarycolor3dv;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3FPROC)        (GLfloat red, GLfloat green, GLfloat blue);
extern PFNGLSECONDARYCOLOR3FPROC _gl_loader_glsecondarycolor3f;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3FVPROC)        (const GLfloat * v);
extern PFNGLSECONDARYCOLOR3FVPROC _gl_loader_glsecondarycolor3fv;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3IPROC)        (GLint red, GLint green, GLint blue);
extern PFNGLSECONDARYCOLOR3IPROC _gl_loader_glsecondarycolor3i;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3IVPROC)        (const GLint * v);
extern PFNGLSECONDARYCOLOR3IVPROC _gl_loader_glsecondarycolor3iv;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3SPROC)        (GLshort red, GLshort green, GLshort blue);
extern PFNGLSECONDARYCOLOR3SPROC _gl_loader_glsecondarycolor3s;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3SVPROC)        (const GLshort * v);
extern PFNGLSECONDARYCOLOR3SVPROC _gl_loader_glsecondarycolor3sv;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3UBPROC)        (GLubyte red, GLubyte green, GLubyte blue);
extern PFNGLSECONDARYCOLOR3UBPROC _gl_loader_glsecondarycolor3ub;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3UBVPROC)        (const GLubyte * v);
extern PFNGLSECONDARYCOLOR3UBVPROC _gl_loader_glsecondarycolor3ubv;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3UIPROC)        (GLuint red, GLuint green, GLuint blue);
extern PFNGLSECONDARYCOLOR3UIPROC _gl_loader_glsecondarycolor3ui;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3UIVPROC)        (const GLuint * v);
extern PFNGLSECONDARYCOLOR3UIVPROC _gl_loader_glsecondarycolor3uiv;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3USPROC)        (GLushort red, GLushort green, GLushort blue);
extern PFNGLSECONDARYCOLOR3USPROC _gl_loader_glsecondarycolor3us;
typedef void (APIENTRY *PFNGLSECONDARYCOLOR3USVPROC)        (const GLushort * v);
extern PFNGLSECONDARYCOLOR3USVPROC _gl_loader_glsecondarycolor3usv;
typedef void (APIENTRY *PFNGLSECONDARYCOLORP3UIPROC)        (GLenum type, GLuint color);
extern PFNGLSECONDARYCOLORP3UIPROC _gl_loader_glsecondarycolorp3ui;
typedef void (APIENTRY *PFNGLSECONDARYCOLORP3UIVPROC)        (GLenum type, const GLuint * color);
extern PFNGLSECONDARYCOLORP3UIVPROC _gl_loader_glsecondarycolorp3uiv;
typedef void (APIENTRY *PFNGLSECONDARYCOLORPOINTERPROC)        (GLint size, GLenum type, GLsizei stride, const void * pointer);
extern PFNGLSECONDARYCOLORPOINTERPROC _gl_loader_glsecondarycolorpointer;
typedef void (APIENTRY *PFNGLSELECTBUFFERPROC)        (GLsizei size, GLuint * buffer);
extern PFNGLSELECTBUFFERPROC _gl_loader_glselectbuffer;
typedef void (APIENTRY *PFNGLSHADEMODELPROC)        (GLenum mode);
extern PFNGLSHADEMODELPROC _gl_loader_glshademodel;
typedef void (APIENTRY *PFNGLSHADERBINARYPROC)        (GLsizei count, const GLuint * shaders, GLenum binaryFormat, const void * binary, GLsizei length);
extern PFNGLSHADERBINARYPROC _gl_loader_glshaderbinary;
typedef void (APIENTRY *PFNGLSHADERSOURCEPROC)        (GLuint shader, GLsizei count, const GLchar * const * string, const GLint * length);
extern PFNGLSHADERSOURCEPROC _gl_loader_glshadersource;
typedef void (APIENTRY *PFNGLSHADERSTORAGEBLOCKBINDINGPROC)        (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
extern PFNGLSHADERSTORAGEBLOCKBINDINGPROC _gl_loader_glshaderstorageblockbinding;
typedef void (APIENTRY *PFNGLSPECIALIZESHADERPROC)        (GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue);
extern PFNGLSPECIALIZESHADERPROC _gl_loader_glspecializeshader;
typedef void (APIENTRY *PFNGLSTENCILFUNCPROC)        (GLenum func, GLint ref, GLuint mask);
extern PFNGLSTENCILFUNCPROC _gl_loader_glstencilfunc;
typedef void (APIENTRY *PFNGLSTENCILFUNCSEPARATEPROC)        (GLenum face, GLenum func, GLint ref, GLuint mask);
extern PFNGLSTENCILFUNCSEPARATEPROC _gl_loader_glstencilfuncseparate;
typedef void (APIENTRY *PFNGLSTENCILMASKPROC)        (GLuint mask);
extern PFNGLSTENCILMASKPROC _gl_loader_glstencilmask;
typedef void (APIENTRY *PFNGLSTENCILMASKSEPARATEPROC)        (GLenum face, GLuint mask);
extern PFNGLSTENCILMASKSEPARATEPROC _gl_loader_glstencilmaskseparate;
typedef void (APIENTRY *PFNGLSTENCILOPPROC)        (GLenum fail, GLenum zfail, GLenum zpass);
extern PFNGLSTENCILOPPROC _gl_loader_glstencilop;
typedef void (APIENTRY *PFNGLSTENCILOPSEPARATEPROC)        (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
extern PFNGLSTENCILOPSEPARATEPROC _gl_loader_glstencilopseparate;
typedef void (APIENTRY *PFNGLTEXBUFFERPROC)        (GLenum target, GLenum internalformat, GLuint buffer);
extern PFNGLTEXBUFFERPROC _gl_loader_gltexbuffer;
typedef void (APIENTRY *PFNGLTEXBUFFERRANGEPROC)        (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern PFNGLTEXBUFFERRANGEPROC _gl_loader_gltexbufferrange;
typedef void (APIENTRY *PFNGLTEXCOORD1DPROC)        (GLdouble s);
extern PFNGLTEXCOORD1DPROC _gl_loader_gltexcoord1d;
typedef void (APIENTRY *PFNGLTEXCOORD1DVPROC)        (const GLdouble * v);
extern PFNGLTEXCOORD1DVPROC _gl_loader_gltexcoord1dv;
typedef void (APIENTRY *PFNGLTEXCOORD1FPROC)        (GLfloat s);
extern PFNGLTEXCOORD1FPROC _gl_loader_gltexcoord1f;
typedef void (APIENTRY *PFNGLTEXCOORD1FVPROC)        (const GLfloat * v);
extern PFNGLTEXCOORD1FVPROC _gl_loader_gltexcoord1fv;
typedef void (APIENTRY *PFNGLTEXCOORD1IPROC)        (GLint s);
extern PFNGLTEXCOORD1IPROC _gl_loader_gltexcoord1i;
typedef void (APIENTRY *PFNGLTEXCOORD1IVPROC)        (const GLint * v);
extern PFNGLTEXCOORD1IVPROC _gl_loader_gltexcoord1iv;
typedef void (APIENTRY *PFNGLTEXCOORD1SPROC)        (GLshort s);
extern PFNGLTEXCOORD1SPROC _gl_loader_gltexcoord1s;
typedef void (APIENTRY *PFNGLTEXCOORD1SVPROC)        (const GLshort * v);
extern PFNGLTEXCOORD1SVPROC _gl_loader_gltexcoord1sv;
typedef void (APIENTRY *PFNGLTEXCOORD2DPROC)        (GLdouble s, GLdouble t);
extern PFNGLTEXCOORD2DPROC _gl_loader_gltexcoord2d;
typedef void (APIENTRY *PFNGLTEXCOORD2DVPROC)        (const GLdouble * v);
extern PFNGLTEXCOORD2DVPROC _gl_loader_gltexcoord2dv;
typedef void (APIENTRY *PFNGLTEXCOORD2FPROC)        (GLfloat s, GLfloat t);
extern PFNGLTEXCOORD2FPROC _gl_loader_gltexcoord2f;
typedef void (APIENTRY *PFNGLTEXCOORD2FVPROC)        (const GLfloat * v);
extern PFNGLTEXCOORD2FVPROC _gl_loader_gltexcoord2fv;
typedef void (APIENTRY *PFNGLTEXCOORD2IPROC)        (GLint s, GLint t);
extern PFNGLTEXCOORD2IPROC _gl_loader_gltexcoord2i;
typedef void (APIENTRY *PFNGLTEXCOORD2IVPROC)        (const GLint * v);
extern PFNGLTEXCOORD2IVPROC _gl_loader_gltexcoord2iv;
typedef void (APIENTRY *PFNGLTEXCOORD2SPROC)        (GLshort s, GLshort t);
extern PFNGLTEXCOORD2SPROC _gl_loader_gltexcoord2s;
typedef void (APIENTRY *PFNGLTEXCOORD2SVPROC)        (const GLshort * v);
extern PFNGLTEXCOORD2SVPROC _gl_loader_gltexcoord2sv;
typedef void (APIENTRY *PFNGLTEXCOORD3DPROC)        (GLdouble s, GLdouble t, GLdouble r);
extern PFNGLTEXCOORD3DPROC _gl_loader_gltexcoord3d;
typedef void (APIENTRY *PFNGLTEXCOORD3DVPROC)        (const GLdouble * v);
extern PFNGLTEXCOORD3DVPROC _gl_loader_gltexcoord3dv;
typedef void (APIENTRY *PFNGLTEXCOORD3FPROC)        (GLfloat s, GLfloat t, GLfloat r);
extern PFNGLTEXCOORD3FPROC _gl_loader_gltexcoord3f;
typedef void (APIENTRY *PFNGLTEXCOORD3FVPROC)        (const GLfloat * v);
extern PFNGLTEXCOORD3FVPROC _gl_loader_gltexcoord3fv;
typedef void (APIENTRY *PFNGLTEXCOORD3IPROC)        (GLint s, GLint t, GLint r);
extern PFNGLTEXCOORD3IPROC _gl_loader_gltexcoord3i;
typedef void (APIENTRY *PFNGLTEXCOORD3IVPROC)        (const GLint * v);
extern PFNGLTEXCOORD3IVPROC _gl_loader_gltexcoord3iv;
typedef void (APIENTRY *PFNGLTEXCOORD3SPROC)        (GLshort s, GLshort t, GLshort r);
extern PFNGLTEXCOORD3SPROC _gl_loader_gltexcoord3s;
typedef void (APIENTRY *PFNGLTEXCOORD3SVPROC)        (const GLshort * v);
extern PFNGLTEXCOORD3SVPROC _gl_loader_gltexcoord3sv;
typedef void (APIENTRY *PFNGLTEXCOORD4DPROC)        (GLdouble s, GLdouble t, GLdouble r, GLdouble q);
extern PFNGLTEXCOORD4DPROC _gl_loader_gltexcoord4d;
typedef void (APIENTRY *PFNGLTEXCOORD4DVPROC)        (const GLdouble * v);
extern PFNGLTEXCOORD4DVPROC _gl_loader_gltexcoord4dv;
typedef void (APIENTRY *PFNGLTEXCOORD4FPROC)        (GLfloat s, GLfloat t, GLfloat r, GLfloat q);
extern PFNGLTEXCOORD4FPROC _gl_loader_gltexcoord4f;
typedef void (APIENTRY *PFNGLTEXCOORD4FVPROC)        (const GLfloat * v);
extern PFNGLTEXCOORD4FVPROC _gl_loader_gltexcoord4fv;
typedef void (APIENTRY *PFNGLTEXCOORD4IPROC)        (GLint s, GLint t, GLint r, GLint q);
extern PFNGLTEXCOORD4IPROC _gl_loader_gltexcoord4i;
typedef void (APIENTRY *PFNGLTEXCOORD4IVPROC)        (const GLint * v);
extern PFNGLTEXCOORD4IVPROC _gl_loader_gltexcoord4iv;
typedef void (APIENTRY *PFNGLTEXCOORD4SPROC)        (GLshort s, GLshort t, GLshort r, GLshort q);
extern PFNGLTEXCOORD4SPROC _gl_loader_gltexcoord4s;
typedef void (APIENTRY *PFNGLTEXCOORD4SVPROC)        (const GLshort * v);
extern PFNGLTEXCOORD4SVPROC _gl_loader_gltexcoord4sv;
typedef void (APIENTRY *PFNGLTEXCOORDP1UIPROC)        (GLenum type, GLuint coords);
extern PFNGLTEXCOORDP1UIPROC _gl_loader_gltexcoordp1ui;
typedef void (APIENTRY *PFNGLTEXCOORDP1UIVPROC)        (GLenum type, const GLuint * coords);
extern PFNGLTEXCOORDP1UIVPROC _gl_loader_gltexcoordp1uiv;
typedef void (APIENTRY *PFNGLTEXCOORDP2UIPROC)        (GLenum type, GLuint coords);
extern PFNGLTEXCOORDP2UIPROC _gl_loader_gltexcoordp2ui;
typedef void (APIENTRY *PFNGLTEXCOORDP2UIVPROC)        (GLenum type, const GLuint * coords);
extern PFNGLTEXCOORDP2UIVPROC _gl_loader_gltexcoordp2uiv;
typedef void (APIENTRY *PFNGLTEXCOORDP3UIPROC)        (GLenum type, GLuint coords);
extern PFNGLTEXCOORDP3UIPROC _gl_loader_gltexcoordp3ui;
typedef void (APIENTRY *PFNGLTEXCOORDP3UIVPROC)        (GLenum type, const GLuint * coords);
extern PFNGLTEXCOORDP3UIVPROC _gl_loader_gltexcoordp3uiv;
typedef void (APIENTRY *PFNGLTEXCOORDP4UIPROC)        (GLenum type, GLuint coords);
extern PFNGLTEXCOORDP4UIPROC _gl_loader_gltexcoordp4ui;
typedef void (APIENTRY *PFNGLTEXCOORDP4UIVPROC)        (GLenum type, const GLuint * coords);
extern PFNGLTEXCOORDP4UIVPROC _gl_loader_gltexcoordp4uiv;
typedef void (APIENTRY *PFNGLTEXCOORDPOINTERPROC)        (GLint size, GLenum type, GLsizei stride, const void * pointer);
extern PFNGLTEXCOORDPOINTERPROC _gl_loader_gltexcoordpointer;
typedef void (APIENTRY *PFNGLTEXENVFPROC)        (GLenum target, GLenum pname, GLfloat param);
extern PFNGLTEXENVFPROC _gl_loader_gltexenvf;
typedef void (APIENTRY *PFNGLTEXENVFVPROC)        (GLenum target, GLenum pname, const GLfloat * params);
extern PFNGLTEXENVFVPROC _gl_loader_gltexenvfv;
typedef void (APIENTRY *PFNGLTEXENVIPROC)        (GLenum target, GLenum pname, GLint param);
extern PFNGLTEXENVIPROC _gl_loader_gltexenvi;
typedef void (APIENTRY *PFNGLTEXENVIVPROC)        (GLenum target, GLenum pname, const GLint * params);
extern PFNGLTEXENVIVPROC _gl_loader_gltexenviv;
typedef void (APIENTRY *PFNGLTEXGENDPROC)        (GLenum coord, GLenum pname, GLdouble param);
extern PFNGLTEXGENDPROC _gl_loader_gltexgend;
typedef void (APIENTRY *PFNGLTEXGENDVPROC)        (GLenum coord, GLenum pname, const GLdouble * params);
extern PFNGLTEXGENDVPROC _gl_loader_gltexgendv;
typedef void (APIENTRY *PFNGLTEXGENFPROC)        (GLenum coord, GLenum pname, GLfloat param);
extern PFNGLTEXGENFPROC _gl_loader_gltexgenf;
typedef void (APIENTRY *PFNGLTEXGENFVPROC)        (GLenum coord, GLenum pname, const GLfloat * params);
extern PFNGLTEXGENFVPROC _gl_loader_gltexgenfv;
typedef void (APIENTRY *PFNGLTEXGENIPROC)        (GLenum coord, GLenum pname, GLint param);
extern PFNGLTEXGENIPROC _gl_loader_gltexgeni;
typedef void (APIENTRY *PFNGLTEXGENIVPROC)        (GLenum coord, GLenum pname, const GLint * params);
extern PFNGLTEXGENIVPROC _gl_loader_gltexgeniv;
typedef void (APIENTRY *PFNGLTEXIMAGE1DPROC)        (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
extern PFNGLTEXIMAGE1DPROC _gl_loader_glteximage1d;
typedef void (APIENTRY *PFNGLTEXIMAGE2DPROC)        (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
extern PFNGLTEXIMAGE2DPROC _gl_loader_glteximage2d;
typedef void (APIENTRY *PFNGLTEXIMAGE2DMULTISAMPLEPROC)        (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern PFNGLTEXIMAGE2DMULTISAMPLEPROC _gl_loader_glteximage2dmultisample;
typedef void (APIENTRY *PFNGLTEXIMAGE3DPROC)        (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
extern PFNGLTEXIMAGE3DPROC _gl_loader_glteximage3d;
typedef void (APIENTRY *PFNGLTEXIMAGE3DMULTISAMPLEPROC)        (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern PFNGLTEXIMAGE3DMULTISAMPLEPROC _gl_loader_glteximage3dmultisample;
typedef void (APIENTRY *PFNGLTEXPARAMETERIIVPROC)        (GLenum target, GLenum pname, const GLint * params);
extern PFNGLTEXPARAMETERIIVPROC _gl_loader_gltexparameteriiv;
typedef void (APIENTRY *PFNGLTEXPARAMETERIUIVPROC)        (GLenum target, GLenum pname, const GLuint * params);
extern PFNGLTEXPARAMETERIUIVPROC _gl_loader_gltexparameteriuiv;
typedef void (APIENTRY *PFNGLTEXPARAMETERFPROC)        (GLenum target, GLenum pname, GLfloat param);
extern PFNGLTEXPARAMETERFPROC _gl_loader_gltexparameterf;
typedef void (APIENTRY *PFNGLTEXPARAMETERFVPROC)        (GLenum target, GLenum pname, const GLfloat * params);
extern PFNGLTEXPARAMETERFVPROC _gl_loader_gltexparameterfv;
typedef void (APIENTRY *PFNGLTEXPARAMETERIPROC)        (GLenum target, GLenum pname, GLint param);
extern PFNGLTEXPARAMETERIPROC _gl_loader_gltexparameteri;
typedef void (APIENTRY *PFNGLTEXPARAMETERIVPROC)        (GLenum target, GLenum pname, const GLint * params);
extern PFNGLTEXPARAMETERIVPROC _gl_loader_gltexparameteriv;
typedef void (APIENTRY *PFNGLTEXSTORAGE1DPROC)        (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
extern PFNGLTEXSTORAGE1DPROC _gl_loader_gltexstorage1d;
typedef void (APIENTRY *PFNGLTEXSTORAGE2DPROC)        (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLTEXSTORAGE2DPROC _gl_loader_gltexstorage2d;
typedef void (APIENTRY *PFNGLTEXSTORAGE2DMULTISAMPLEPROC)        (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern PFNGLTEXSTORAGE2DMULTISAMPLEPROC _gl_loader_gltexstorage2dmultisample;
typedef void (APIENTRY *PFNGLTEXSTORAGE3DPROC)        (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
extern PFNGLTEXSTORAGE3DPROC _gl_loader_gltexstorage3d;
typedef void (APIENTRY *PFNGLTEXSTORAGE3DMULTISAMPLEPROC)        (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern PFNGLTEXSTORAGE3DMULTISAMPLEPROC _gl_loader_gltexstorage3dmultisample;
typedef void (APIENTRY *PFNGLTEXSUBIMAGE1DPROC)        (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
extern PFNGLTEXSUBIMAGE1DPROC _gl_loader_gltexsubimage1d;
typedef void (APIENTRY *PFNGLTEXSUBIMAGE2DPROC)        (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
extern PFNGLTEXSUBIMAGE2DPROC _gl_loader_gltexsubimage2d;
typedef void (APIENTRY *PFNGLTEXSUBIMAGE3DPROC)        (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
extern PFNGLTEXSUBIMAGE3DPROC _gl_loader_gltexsubimage3d;
typedef void (APIENTRY *PFNGLTEXTUREBARRIERPROC)        ();
extern PFNGLTEXTUREBARRIERPROC _gl_loader_gltexturebarrier;
typedef void (APIENTRY *PFNGLTEXTUREBUFFERPROC)        (GLuint texture, GLenum internalformat, GLuint buffer);
extern PFNGLTEXTUREBUFFERPROC _gl_loader_gltexturebuffer;
typedef void (APIENTRY *PFNGLTEXTUREBUFFERRANGEPROC)        (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern PFNGLTEXTUREBUFFERRANGEPROC _gl_loader_gltexturebufferrange;
typedef void (APIENTRY *PFNGLTEXTUREPARAMETERIIVPROC)        (GLuint texture, GLenum pname, const GLint * params);
extern PFNGLTEXTUREPARAMETERIIVPROC _gl_loader_gltextureparameteriiv;
typedef void (APIENTRY *PFNGLTEXTUREPARAMETERIUIVPROC)        (GLuint texture, GLenum pname, const GLuint * params);
extern PFNGLTEXTUREPARAMETERIUIVPROC _gl_loader_gltextureparameteriuiv;
typedef void (APIENTRY *PFNGLTEXTUREPARAMETERFPROC)        (GLuint texture, GLenum pname, GLfloat param);
extern PFNGLTEXTUREPARAMETERFPROC _gl_loader_gltextureparameterf;
typedef void (APIENTRY *PFNGLTEXTUREPARAMETERFVPROC)        (GLuint texture, GLenum pname, const GLfloat * param);
extern PFNGLTEXTUREPARAMETERFVPROC _gl_loader_gltextureparameterfv;
typedef void (APIENTRY *PFNGLTEXTUREPARAMETERIPROC)        (GLuint texture, GLenum pname, GLint param);
extern PFNGLTEXTUREPARAMETERIPROC _gl_loader_gltextureparameteri;
typedef void (APIENTRY *PFNGLTEXTUREPARAMETERIVPROC)        (GLuint texture, GLenum pname, const GLint * param);
extern PFNGLTEXTUREPARAMETERIVPROC _gl_loader_gltextureparameteriv;
typedef void (APIENTRY *PFNGLTEXTURESTORAGE1DPROC)        (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
extern PFNGLTEXTURESTORAGE1DPROC _gl_loader_gltexturestorage1d;
typedef void (APIENTRY *PFNGLTEXTURESTORAGE2DPROC)        (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLTEXTURESTORAGE2DPROC _gl_loader_gltexturestorage2d;
typedef void (APIENTRY *PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)        (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC _gl_loader_gltexturestorage2dmultisample;
typedef void (APIENTRY *PFNGLTEXTURESTORAGE3DPROC)        (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
extern PFNGLTEXTURESTORAGE3DPROC _gl_loader_gltexturestorage3d;
typedef void (APIENTRY *PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)        (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC _gl_loader_gltexturestorage3dmultisample;
typedef void (APIENTRY *PFNGLTEXTURESUBIMAGE1DPROC)        (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
extern PFNGLTEXTURESUBIMAGE1DPROC _gl_loader_gltexturesubimage1d;
typedef void (APIENTRY *PFNGLTEXTURESUBIMAGE2DPROC)        (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
extern PFNGLTEXTURESUBIMAGE2DPROC _gl_loader_gltexturesubimage2d;
typedef void (APIENTRY *PFNGLTEXTURESUBIMAGE3DPROC)        (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
extern PFNGLTEXTURESUBIMAGE3DPROC _gl_loader_gltexturesubimage3d;
typedef void (APIENTRY *PFNGLTEXTUREVIEWPROC)        (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
extern PFNGLTEXTUREVIEWPROC _gl_loader_gltextureview;
typedef void (APIENTRY *PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)        (GLuint xfb, GLuint index, GLuint buffer);
extern PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC _gl_loader_gltransformfeedbackbufferbase;
typedef void (APIENTRY *PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)        (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC _gl_loader_gltransformfeedbackbufferrange;
typedef void (APIENTRY *PFNGLTRANSFORMFEEDBACKVARYINGSPROC)        (GLuint program, GLsizei count, const GLchar * const * varyings, GLenum bufferMode);
extern PFNGLTRANSFORMFEEDBACKVARYINGSPROC _gl_loader_gltransformfeedbackvaryings;
typedef void (APIENTRY *PFNGLTRANSLATEDPROC)        (GLdouble x, GLdouble y, GLdouble z);
extern PFNGLTRANSLATEDPROC _gl_loader_gltranslated;
typedef void (APIENTRY *PFNGLTRANSLATEFPROC)        (GLfloat x, GLfloat y, GLfloat z);
extern PFNGLTRANSLATEFPROC _gl_loader_gltranslatef;
typedef void (APIENTRY *PFNGLUNIFORM1DPROC)        (GLint location, GLdouble x);
extern PFNGLUNIFORM1DPROC _gl_loader_gluniform1d;
typedef void (APIENTRY *PFNGLUNIFORM1DVPROC)        (GLint location, GLsizei count, const GLdouble * value);
extern PFNGLUNIFORM1DVPROC _gl_loader_gluniform1dv;
typedef void (APIENTRY *PFNGLUNIFORM1FPROC)        (GLint location, GLfloat v0);
extern PFNGLUNIFORM1FPROC _gl_loader_gluniform1f;
typedef void (APIENTRY *PFNGLUNIFORM1FVPROC)        (GLint location, GLsizei count, const GLfloat * value);
extern PFNGLUNIFORM1FVPROC _gl_loader_gluniform1fv;
typedef void (APIENTRY *PFNGLUNIFORM1IPROC)        (GLint location, GLint v0);
extern PFNGLUNIFORM1IPROC _gl_loader_gluniform1i;
typedef void (APIENTRY *PFNGLUNIFORM1IVPROC)        (GLint location, GLsizei count, const GLint * value);
extern PFNGLUNIFORM1IVPROC _gl_loader_gluniform1iv;
typedef void (APIENTRY *PFNGLUNIFORM1UIPROC)        (GLint location, GLuint v0);
extern PFNGLUNIFORM1UIPROC _gl_loader_gluniform1ui;
typedef void (APIENTRY *PFNGLUNIFORM1UIVPROC)        (GLint location, GLsizei count, const GLuint * value);
extern PFNGLUNIFORM1UIVPROC _gl_loader_gluniform1uiv;
typedef void (APIENTRY *PFNGLUNIFORM2DPROC)        (GLint location, GLdouble x, GLdouble y);
extern PFNGLUNIFORM2DPROC _gl_loader_gluniform2d;
typedef void (APIENTRY *PFNGLUNIFORM2DVPROC)        (GLint location, GLsizei count, const GLdouble * value);
extern PFNGLUNIFORM2DVPROC _gl_loader_gluniform2dv;
typedef void (APIENTRY *PFNGLUNIFORM2FPROC)        (GLint location, GLfloat v0, GLfloat v1);
extern PFNGLUNIFORM2FPROC _gl_loader_gluniform2f;
typedef void (APIENTRY *PFNGLUNIFORM2FVPROC)        (GLint location, GLsizei count, const GLfloat * value);
extern PFNGLUNIFORM2FVPROC _gl_loader_gluniform2fv;
typedef void (APIENTRY *PFNGLUNIFORM2IPROC)        (GLint location, GLint v0, GLint v1);
extern PFNGLUNIFORM2IPROC _gl_loader_gluniform2i;
typedef void (APIENTRY *PFNGLUNIFORM2IVPROC)        (GLint location, GLsizei count, const GLint * value);
extern PFNGLUNIFORM2IVPROC _gl_loader_gluniform2iv;
typedef void (APIENTRY *PFNGLUNIFORM2UIPROC)        (GLint location, GLuint v0, GLuint v1);
extern PFNGLUNIFORM2UIPROC _gl_loader_gluniform2ui;
typedef void (APIENTRY *PFNGLUNIFORM2UIVPROC)        (GLint location, GLsizei count, const GLuint * value);
extern PFNGLUNIFORM2UIVPROC _gl_loader_gluniform2uiv;
typedef void (APIENTRY *PFNGLUNIFORM3DPROC)        (GLint location, GLdouble x, GLdouble y, GLdouble z);
extern PFNGLUNIFORM3DPROC _gl_loader_gluniform3d;
typedef void (APIENTRY *PFNGLUNIFORM3DVPROC)        (GLint location, GLsizei count, const GLdouble * value);
extern PFNGLUNIFORM3DVPROC _gl_loader_gluniform3dv;
typedef void (APIENTRY *PFNGLUNIFORM3FPROC)        (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern PFNGLUNIFORM3FPROC _gl_loader_gluniform3f;
typedef void (APIENTRY *PFNGLUNIFORM3FVPROC)        (GLint location, GLsizei count, const GLfloat * value);
extern PFNGLUNIFORM3FVPROC _gl_loader_gluniform3fv;
typedef void (APIENTRY *PFNGLUNIFORM3IPROC)        (GLint location, GLint v0, GLint v1, GLint v2);
extern PFNGLUNIFORM3IPROC _gl_loader_gluniform3i;
typedef void (APIENTRY *PFNGLUNIFORM3IVPROC)        (GLint location, GLsizei count, const GLint * value);
extern PFNGLUNIFORM3IVPROC _gl_loader_gluniform3iv;
typedef void (APIENTRY *PFNGLUNIFORM3UIPROC)        (GLint location, GLuint v0, GLuint v1, GLuint v2);
extern PFNGLUNIFORM3UIPROC _gl_loader_gluniform3ui;
typedef void (APIENTRY *PFNGLUNIFORM3UIVPROC)        (GLint location, GLsizei count, const GLuint * value);
extern PFNGLUNIFORM3UIVPROC _gl_loader_gluniform3uiv;
typedef void (APIENTRY *PFNGLUNIFORM4DPROC)        (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFNGLUNIFORM4DPROC _gl_loader_gluniform4d;
typedef void (APIENTRY *PFNGLUNIFORM4DVPROC)        (GLint location, GLsizei count, const GLdouble * value);
extern PFNGLUNIFORM4DVPROC _gl_loader_gluniform4dv;
typedef void (APIENTRY *PFNGLUNIFORM4FPROC)        (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern PFNGLUNIFORM4FPROC _gl_loader_gluniform4f;
typedef void (APIENTRY *PFNGLUNIFORM4FVPROC)        (GLint location, GLsizei count, const GLfloat * value);
extern PFNGLUNIFORM4FVPROC _gl_loader_gluniform4fv;
typedef void (APIENTRY *PFNGLUNIFORM4IPROC)        (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern PFNGLUNIFORM4IPROC _gl_loader_gluniform4i;
typedef void (APIENTRY *PFNGLUNIFORM4IVPROC)        (GLint location, GLsizei count, const GLint * value);
extern PFNGLUNIFORM4IVPROC _gl_loader_gluniform4iv;
typedef void (APIENTRY *PFNGLUNIFORM4UIPROC)        (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
extern PFNGLUNIFORM4UIPROC _gl_loader_gluniform4ui;
typedef void (APIENTRY *PFNGLUNIFORM4UIVPROC)        (GLint location, GLsizei count, const GLuint * value);
extern PFNGLUNIFORM4UIVPROC _gl_loader_gluniform4uiv;
typedef void (APIENTRY *PFNGLUNIFORMBLOCKBINDINGPROC)        (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
extern PFNGLUNIFORMBLOCKBINDINGPROC _gl_loader_gluniformblockbinding;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX2DVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLUNIFORMMATRIX2DVPROC _gl_loader_gluniformmatrix2dv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX2FVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLUNIFORMMATRIX2FVPROC _gl_loader_gluniformmatrix2fv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX2X3DVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLUNIFORMMATRIX2X3DVPROC _gl_loader_gluniformmatrix2x3dv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX2X3FVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLUNIFORMMATRIX2X3FVPROC _gl_loader_gluniformmatrix2x3fv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX2X4DVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLUNIFORMMATRIX2X4DVPROC _gl_loader_gluniformmatrix2x4dv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX2X4FVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLUNIFORMMATRIX2X4FVPROC _gl_loader_gluniformmatrix2x4fv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX3DVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLUNIFORMMATRIX3DVPROC _gl_loader_gluniformmatrix3dv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX3FVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLUNIFORMMATRIX3FVPROC _gl_loader_gluniformmatrix3fv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX3X2DVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLUNIFORMMATRIX3X2DVPROC _gl_loader_gluniformmatrix3x2dv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX3X2FVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLUNIFORMMATRIX3X2FVPROC _gl_loader_gluniformmatrix3x2fv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX3X4DVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLUNIFORMMATRIX3X4DVPROC _gl_loader_gluniformmatrix3x4dv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX3X4FVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLUNIFORMMATRIX3X4FVPROC _gl_loader_gluniformmatrix3x4fv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX4DVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLUNIFORMMATRIX4DVPROC _gl_loader_gluniformmatrix4dv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX4FVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLUNIFORMMATRIX4FVPROC _gl_loader_gluniformmatrix4fv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX4X2DVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLUNIFORMMATRIX4X2DVPROC _gl_loader_gluniformmatrix4x2dv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX4X2FVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLUNIFORMMATRIX4X2FVPROC _gl_loader_gluniformmatrix4x2fv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX4X3DVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern PFNGLUNIFORMMATRIX4X3DVPROC _gl_loader_gluniformmatrix4x3dv;
typedef void (APIENTRY *PFNGLUNIFORMMATRIX4X3FVPROC)        (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFNGLUNIFORMMATRIX4X3FVPROC _gl_loader_gluniformmatrix4x3fv;
typedef void (APIENTRY *PFNGLUNIFORMSUBROUTINESUIVPROC)        (GLenum shadertype, GLsizei count, const GLuint * indices);
extern PFNGLUNIFORMSUBROUTINESUIVPROC _gl_loader_gluniformsubroutinesuiv;
typedef GLboolean (APIENTRY *PFNGLUNMAPBUFFERPROC)        (GLenum target);
extern PFNGLUNMAPBUFFERPROC _gl_loader_glunmapbuffer;
typedef GLboolean (APIENTRY *PFNGLUNMAPNAMEDBUFFERPROC)        (GLuint buffer);
extern PFNGLUNMAPNAMEDBUFFERPROC _gl_loader_glunmapnamedbuffer;
typedef void (APIENTRY *PFNGLUSEPROGRAMPROC)        (GLuint program);
extern PFNGLUSEPROGRAMPROC _gl_loader_gluseprogram;
typedef void (APIENTRY *PFNGLUSEPROGRAMSTAGESPROC)        (GLuint pipeline, GLbitfield stages, GLuint program);
extern PFNGLUSEPROGRAMSTAGESPROC _gl_loader_gluseprogramstages;
typedef void (APIENTRY *PFNGLVALIDATEPROGRAMPROC)        (GLuint program);
extern PFNGLVALIDATEPROGRAMPROC _gl_loader_glvalidateprogram;
typedef void (APIENTRY *PFNGLVALIDATEPROGRAMPIPELINEPROC)        (GLuint pipeline);
extern PFNGLVALIDATEPROGRAMPIPELINEPROC _gl_loader_glvalidateprogrampipeline;
typedef void (APIENTRY *PFNGLVERTEX2DPROC)        (GLdouble x, GLdouble y);
extern PFNGLVERTEX2DPROC _gl_loader_glvertex2d;
typedef void (APIENTRY *PFNGLVERTEX2DVPROC)        (const GLdouble * v);
extern PFNGLVERTEX2DVPROC _gl_loader_glvertex2dv;
typedef void (APIENTRY *PFNGLVERTEX2FPROC)        (GLfloat x, GLfloat y);
extern PFNGLVERTEX2FPROC _gl_loader_glvertex2f;
typedef void (APIENTRY *PFNGLVERTEX2FVPROC)        (const GLfloat * v);
extern PFNGLVERTEX2FVPROC _gl_loader_glvertex2fv;
typedef void (APIENTRY *PFNGLVERTEX2IPROC)        (GLint x, GLint y);
extern PFNGLVERTEX2IPROC _gl_loader_glvertex2i;
typedef void (APIENTRY *PFNGLVERTEX2IVPROC)        (const GLint * v);
extern PFNGLVERTEX2IVPROC _gl_loader_glvertex2iv;
typedef void (APIENTRY *PFNGLVERTEX2SPROC)        (GLshort x, GLshort y);
extern PFNGLVERTEX2SPROC _gl_loader_glvertex2s;
typedef void (APIENTRY *PFNGLVERTEX2SVPROC)        (const GLshort * v);
extern PFNGLVERTEX2SVPROC _gl_loader_glvertex2sv;
typedef void (APIENTRY *PFNGLVERTEX3DPROC)        (GLdouble x, GLdouble y, GLdouble z);
extern PFNGLVERTEX3DPROC _gl_loader_glvertex3d;
typedef void (APIENTRY *PFNGLVERTEX3DVPROC)        (const GLdouble * v);
extern PFNGLVERTEX3DVPROC _gl_loader_glvertex3dv;
typedef void (APIENTRY *PFNGLVERTEX3FPROC)        (GLfloat x, GLfloat y, GLfloat z);
extern PFNGLVERTEX3FPROC _gl_loader_glvertex3f;
typedef void (APIENTRY *PFNGLVERTEX3FVPROC)        (const GLfloat * v);
extern PFNGLVERTEX3FVPROC _gl_loader_glvertex3fv;
typedef void (APIENTRY *PFNGLVERTEX3IPROC)        (GLint x, GLint y, GLint z);
extern PFNGLVERTEX3IPROC _gl_loader_glvertex3i;
typedef void (APIENTRY *PFNGLVERTEX3IVPROC)        (const GLint * v);
extern PFNGLVERTEX3IVPROC _gl_loader_glvertex3iv;
typedef void (APIENTRY *PFNGLVERTEX3SPROC)        (GLshort x, GLshort y, GLshort z);
extern PFNGLVERTEX3SPROC _gl_loader_glvertex3s;
typedef void (APIENTRY *PFNGLVERTEX3SVPROC)        (const GLshort * v);
extern PFNGLVERTEX3SVPROC _gl_loader_glvertex3sv;
typedef void (APIENTRY *PFNGLVERTEX4DPROC)        (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFNGLVERTEX4DPROC _gl_loader_glvertex4d;
typedef void (APIENTRY *PFNGLVERTEX4DVPROC)        (const GLdouble * v);
extern PFNGLVERTEX4DVPROC _gl_loader_glvertex4dv;
typedef void (APIENTRY *PFNGLVERTEX4FPROC)        (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern PFNGLVERTEX4FPROC _gl_loader_glvertex4f;
typedef void (APIENTRY *PFNGLVERTEX4FVPROC)        (const GLfloat * v);
extern PFNGLVERTEX4FVPROC _gl_loader_glvertex4fv;
typedef void (APIENTRY *PFNGLVERTEX4IPROC)        (GLint x, GLint y, GLint z, GLint w);
extern PFNGLVERTEX4IPROC _gl_loader_glvertex4i;
typedef void (APIENTRY *PFNGLVERTEX4IVPROC)        (const GLint * v);
extern PFNGLVERTEX4IVPROC _gl_loader_glvertex4iv;
typedef void (APIENTRY *PFNGLVERTEX4SPROC)        (GLshort x, GLshort y, GLshort z, GLshort w);
extern PFNGLVERTEX4SPROC _gl_loader_glvertex4s;
typedef void (APIENTRY *PFNGLVERTEX4SVPROC)        (const GLshort * v);
extern PFNGLVERTEX4SVPROC _gl_loader_glvertex4sv;
typedef void (APIENTRY *PFNGLVERTEXARRAYATTRIBBINDINGPROC)        (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
extern PFNGLVERTEXARRAYATTRIBBINDINGPROC _gl_loader_glvertexarrayattribbinding;
typedef void (APIENTRY *PFNGLVERTEXARRAYATTRIBFORMATPROC)        (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
extern PFNGLVERTEXARRAYATTRIBFORMATPROC _gl_loader_glvertexarrayattribformat;
typedef void (APIENTRY *PFNGLVERTEXARRAYATTRIBIFORMATPROC)        (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern PFNGLVERTEXARRAYATTRIBIFORMATPROC _gl_loader_glvertexarrayattribiformat;
typedef void (APIENTRY *PFNGLVERTEXARRAYATTRIBLFORMATPROC)        (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern PFNGLVERTEXARRAYATTRIBLFORMATPROC _gl_loader_glvertexarrayattriblformat;
typedef void (APIENTRY *PFNGLVERTEXARRAYBINDINGDIVISORPROC)        (GLuint vaobj, GLuint bindingindex, GLuint divisor);
extern PFNGLVERTEXARRAYBINDINGDIVISORPROC _gl_loader_glvertexarraybindingdivisor;
typedef void (APIENTRY *PFNGLVERTEXARRAYELEMENTBUFFERPROC)        (GLuint vaobj, GLuint buffer);
extern PFNGLVERTEXARRAYELEMENTBUFFERPROC _gl_loader_glvertexarrayelementbuffer;
typedef void (APIENTRY *PFNGLVERTEXARRAYVERTEXBUFFERPROC)        (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
extern PFNGLVERTEXARRAYVERTEXBUFFERPROC _gl_loader_glvertexarrayvertexbuffer;
typedef void (APIENTRY *PFNGLVERTEXARRAYVERTEXBUFFERSPROC)        (GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
extern PFNGLVERTEXARRAYVERTEXBUFFERSPROC _gl_loader_glvertexarrayvertexbuffers;
typedef void (APIENTRY *PFNGLVERTEXATTRIB1DPROC)        (GLuint index, GLdouble x);
extern PFNGLVERTEXATTRIB1DPROC _gl_loader_glvertexattrib1d;
typedef void (APIENTRY *PFNGLVERTEXATTRIB1DVPROC)        (GLuint index, const GLdouble * v);
extern PFNGLVERTEXATTRIB1DVPROC _gl_loader_glvertexattrib1dv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB1FPROC)        (GLuint index, GLfloat x);
extern PFNGLVERTEXATTRIB1FPROC _gl_loader_glvertexattrib1f;
typedef void (APIENTRY *PFNGLVERTEXATTRIB1FVPROC)        (GLuint index, const GLfloat * v);
extern PFNGLVERTEXATTRIB1FVPROC _gl_loader_glvertexattrib1fv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB1SPROC)        (GLuint index, GLshort x);
extern PFNGLVERTEXATTRIB1SPROC _gl_loader_glvertexattrib1s;
typedef void (APIENTRY *PFNGLVERTEXATTRIB1SVPROC)        (GLuint index, const GLshort * v);
extern PFNGLVERTEXATTRIB1SVPROC _gl_loader_glvertexattrib1sv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB2DPROC)        (GLuint index, GLdouble x, GLdouble y);
extern PFNGLVERTEXATTRIB2DPROC _gl_loader_glvertexattrib2d;
typedef void (APIENTRY *PFNGLVERTEXATTRIB2DVPROC)        (GLuint index, const GLdouble * v);
extern PFNGLVERTEXATTRIB2DVPROC _gl_loader_glvertexattrib2dv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB2FPROC)        (GLuint index, GLfloat x, GLfloat y);
extern PFNGLVERTEXATTRIB2FPROC _gl_loader_glvertexattrib2f;
typedef void (APIENTRY *PFNGLVERTEXATTRIB2FVPROC)        (GLuint index, const GLfloat * v);
extern PFNGLVERTEXATTRIB2FVPROC _gl_loader_glvertexattrib2fv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB2SPROC)        (GLuint index, GLshort x, GLshort y);
extern PFNGLVERTEXATTRIB2SPROC _gl_loader_glvertexattrib2s;
typedef void (APIENTRY *PFNGLVERTEXATTRIB2SVPROC)        (GLuint index, const GLshort * v);
extern PFNGLVERTEXATTRIB2SVPROC _gl_loader_glvertexattrib2sv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB3DPROC)        (GLuint index, GLdouble x, GLdouble y, GLdouble z);
extern PFNGLVERTEXATTRIB3DPROC _gl_loader_glvertexattrib3d;
typedef void (APIENTRY *PFNGLVERTEXATTRIB3DVPROC)        (GLuint index, const GLdouble * v);
extern PFNGLVERTEXATTRIB3DVPROC _gl_loader_glvertexattrib3dv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB3FPROC)        (GLuint index, GLfloat x, GLfloat y, GLfloat z);
extern PFNGLVERTEXATTRIB3FPROC _gl_loader_glvertexattrib3f;
typedef void (APIENTRY *PFNGLVERTEXATTRIB3FVPROC)        (GLuint index, const GLfloat * v);
extern PFNGLVERTEXATTRIB3FVPROC _gl_loader_glvertexattrib3fv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB3SPROC)        (GLuint index, GLshort x, GLshort y, GLshort z);
extern PFNGLVERTEXATTRIB3SPROC _gl_loader_glvertexattrib3s;
typedef void (APIENTRY *PFNGLVERTEXATTRIB3SVPROC)        (GLuint index, const GLshort * v);
extern PFNGLVERTEXATTRIB3SVPROC _gl_loader_glvertexattrib3sv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4NBVPROC)        (GLuint index, const GLbyte * v);
extern PFNGLVERTEXATTRIB4NBVPROC _gl_loader_glvertexattrib4nbv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4NIVPROC)        (GLuint index, const GLint * v);
extern PFNGLVERTEXATTRIB4NIVPROC _gl_loader_glvertexattrib4niv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4NSVPROC)        (GLuint index, const GLshort * v);
extern PFNGLVERTEXATTRIB4NSVPROC _gl_loader_glvertexattrib4nsv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4NUBPROC)        (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
extern PFNGLVERTEXATTRIB4NUBPROC _gl_loader_glvertexattrib4nub;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4NUBVPROC)        (GLuint index, const GLubyte * v);
extern PFNGLVERTEXATTRIB4NUBVPROC _gl_loader_glvertexattrib4nubv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4NUIVPROC)        (GLuint index, const GLuint * v);
extern PFNGLVERTEXATTRIB4NUIVPROC _gl_loader_glvertexattrib4nuiv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4NUSVPROC)        (GLuint index, const GLushort * v);
extern PFNGLVERTEXATTRIB4NUSVPROC _gl_loader_glvertexattrib4nusv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4BVPROC)        (GLuint index, const GLbyte * v);
extern PFNGLVERTEXATTRIB4BVPROC _gl_loader_glvertexattrib4bv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4DPROC)        (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFNGLVERTEXATTRIB4DPROC _gl_loader_glvertexattrib4d;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4DVPROC)        (GLuint index, const GLdouble * v);
extern PFNGLVERTEXATTRIB4DVPROC _gl_loader_glvertexattrib4dv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4FPROC)        (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern PFNGLVERTEXATTRIB4FPROC _gl_loader_glvertexattrib4f;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4FVPROC)        (GLuint index, const GLfloat * v);
extern PFNGLVERTEXATTRIB4FVPROC _gl_loader_glvertexattrib4fv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4IVPROC)        (GLuint index, const GLint * v);
extern PFNGLVERTEXATTRIB4IVPROC _gl_loader_glvertexattrib4iv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4SPROC)        (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
extern PFNGLVERTEXATTRIB4SPROC _gl_loader_glvertexattrib4s;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4SVPROC)        (GLuint index, const GLshort * v);
extern PFNGLVERTEXATTRIB4SVPROC _gl_loader_glvertexattrib4sv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4UBVPROC)        (GLuint index, const GLubyte * v);
extern PFNGLVERTEXATTRIB4UBVPROC _gl_loader_glvertexattrib4ubv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4UIVPROC)        (GLuint index, const GLuint * v);
extern PFNGLVERTEXATTRIB4UIVPROC _gl_loader_glvertexattrib4uiv;
typedef void (APIENTRY *PFNGLVERTEXATTRIB4USVPROC)        (GLuint index, const GLushort * v);
extern PFNGLVERTEXATTRIB4USVPROC _gl_loader_glvertexattrib4usv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBBINDINGPROC)        (GLuint attribindex, GLuint bindingindex);
extern PFNGLVERTEXATTRIBBINDINGPROC _gl_loader_glvertexattribbinding;
typedef void (APIENTRY *PFNGLVERTEXATTRIBDIVISORPROC)        (GLuint index, GLuint divisor);
extern PFNGLVERTEXATTRIBDIVISORPROC _gl_loader_glvertexattribdivisor;
typedef void (APIENTRY *PFNGLVERTEXATTRIBFORMATPROC)        (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
extern PFNGLVERTEXATTRIBFORMATPROC _gl_loader_glvertexattribformat;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI1IPROC)        (GLuint index, GLint x);
extern PFNGLVERTEXATTRIBI1IPROC _gl_loader_glvertexattribi1i;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI1IVPROC)        (GLuint index, const GLint * v);
extern PFNGLVERTEXATTRIBI1IVPROC _gl_loader_glvertexattribi1iv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI1UIPROC)        (GLuint index, GLuint x);
extern PFNGLVERTEXATTRIBI1UIPROC _gl_loader_glvertexattribi1ui;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI1UIVPROC)        (GLuint index, const GLuint * v);
extern PFNGLVERTEXATTRIBI1UIVPROC _gl_loader_glvertexattribi1uiv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI2IPROC)        (GLuint index, GLint x, GLint y);
extern PFNGLVERTEXATTRIBI2IPROC _gl_loader_glvertexattribi2i;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI2IVPROC)        (GLuint index, const GLint * v);
extern PFNGLVERTEXATTRIBI2IVPROC _gl_loader_glvertexattribi2iv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI2UIPROC)        (GLuint index, GLuint x, GLuint y);
extern PFNGLVERTEXATTRIBI2UIPROC _gl_loader_glvertexattribi2ui;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI2UIVPROC)        (GLuint index, const GLuint * v);
extern PFNGLVERTEXATTRIBI2UIVPROC _gl_loader_glvertexattribi2uiv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI3IPROC)        (GLuint index, GLint x, GLint y, GLint z);
extern PFNGLVERTEXATTRIBI3IPROC _gl_loader_glvertexattribi3i;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI3IVPROC)        (GLuint index, const GLint * v);
extern PFNGLVERTEXATTRIBI3IVPROC _gl_loader_glvertexattribi3iv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI3UIPROC)        (GLuint index, GLuint x, GLuint y, GLuint z);
extern PFNGLVERTEXATTRIBI3UIPROC _gl_loader_glvertexattribi3ui;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI3UIVPROC)        (GLuint index, const GLuint * v);
extern PFNGLVERTEXATTRIBI3UIVPROC _gl_loader_glvertexattribi3uiv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI4BVPROC)        (GLuint index, const GLbyte * v);
extern PFNGLVERTEXATTRIBI4BVPROC _gl_loader_glvertexattribi4bv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI4IPROC)        (GLuint index, GLint x, GLint y, GLint z, GLint w);
extern PFNGLVERTEXATTRIBI4IPROC _gl_loader_glvertexattribi4i;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI4IVPROC)        (GLuint index, const GLint * v);
extern PFNGLVERTEXATTRIBI4IVPROC _gl_loader_glvertexattribi4iv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI4SVPROC)        (GLuint index, const GLshort * v);
extern PFNGLVERTEXATTRIBI4SVPROC _gl_loader_glvertexattribi4sv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI4UBVPROC)        (GLuint index, const GLubyte * v);
extern PFNGLVERTEXATTRIBI4UBVPROC _gl_loader_glvertexattribi4ubv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI4UIPROC)        (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
extern PFNGLVERTEXATTRIBI4UIPROC _gl_loader_glvertexattribi4ui;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI4UIVPROC)        (GLuint index, const GLuint * v);
extern PFNGLVERTEXATTRIBI4UIVPROC _gl_loader_glvertexattribi4uiv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBI4USVPROC)        (GLuint index, const GLushort * v);
extern PFNGLVERTEXATTRIBI4USVPROC _gl_loader_glvertexattribi4usv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBIFORMATPROC)        (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern PFNGLVERTEXATTRIBIFORMATPROC _gl_loader_glvertexattribiformat;
typedef void (APIENTRY *PFNGLVERTEXATTRIBIPOINTERPROC)        (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
extern PFNGLVERTEXATTRIBIPOINTERPROC _gl_loader_glvertexattribipointer;
typedef void (APIENTRY *PFNGLVERTEXATTRIBL1DPROC)        (GLuint index, GLdouble x);
extern PFNGLVERTEXATTRIBL1DPROC _gl_loader_glvertexattribl1d;
typedef void (APIENTRY *PFNGLVERTEXATTRIBL1DVPROC)        (GLuint index, const GLdouble * v);
extern PFNGLVERTEXATTRIBL1DVPROC _gl_loader_glvertexattribl1dv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBL2DPROC)        (GLuint index, GLdouble x, GLdouble y);
extern PFNGLVERTEXATTRIBL2DPROC _gl_loader_glvertexattribl2d;
typedef void (APIENTRY *PFNGLVERTEXATTRIBL2DVPROC)        (GLuint index, const GLdouble * v);
extern PFNGLVERTEXATTRIBL2DVPROC _gl_loader_glvertexattribl2dv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBL3DPROC)        (GLuint index, GLdouble x, GLdouble y, GLdouble z);
extern PFNGLVERTEXATTRIBL3DPROC _gl_loader_glvertexattribl3d;
typedef void (APIENTRY *PFNGLVERTEXATTRIBL3DVPROC)        (GLuint index, const GLdouble * v);
extern PFNGLVERTEXATTRIBL3DVPROC _gl_loader_glvertexattribl3dv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBL4DPROC)        (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFNGLVERTEXATTRIBL4DPROC _gl_loader_glvertexattribl4d;
typedef void (APIENTRY *PFNGLVERTEXATTRIBL4DVPROC)        (GLuint index, const GLdouble * v);
extern PFNGLVERTEXATTRIBL4DVPROC _gl_loader_glvertexattribl4dv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBLFORMATPROC)        (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern PFNGLVERTEXATTRIBLFORMATPROC _gl_loader_glvertexattriblformat;
typedef void (APIENTRY *PFNGLVERTEXATTRIBLPOINTERPROC)        (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
extern PFNGLVERTEXATTRIBLPOINTERPROC _gl_loader_glvertexattriblpointer;
typedef void (APIENTRY *PFNGLVERTEXATTRIBP1UIPROC)        (GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP1UIPROC _gl_loader_glvertexattribp1ui;
typedef void (APIENTRY *PFNGLVERTEXATTRIBP1UIVPROC)        (GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
extern PFNGLVERTEXATTRIBP1UIVPROC _gl_loader_glvertexattribp1uiv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBP2UIPROC)        (GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP2UIPROC _gl_loader_glvertexattribp2ui;
typedef void (APIENTRY *PFNGLVERTEXATTRIBP2UIVPROC)        (GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
extern PFNGLVERTEXATTRIBP2UIVPROC _gl_loader_glvertexattribp2uiv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBP3UIPROC)        (GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP3UIPROC _gl_loader_glvertexattribp3ui;
typedef void (APIENTRY *PFNGLVERTEXATTRIBP3UIVPROC)        (GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
extern PFNGLVERTEXATTRIBP3UIVPROC _gl_loader_glvertexattribp3uiv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBP4UIPROC)        (GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP4UIPROC _gl_loader_glvertexattribp4ui;
typedef void (APIENTRY *PFNGLVERTEXATTRIBP4UIVPROC)        (GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
extern PFNGLVERTEXATTRIBP4UIVPROC _gl_loader_glvertexattribp4uiv;
typedef void (APIENTRY *PFNGLVERTEXATTRIBPOINTERPROC)        (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
extern PFNGLVERTEXATTRIBPOINTERPROC _gl_loader_glvertexattribpointer;
typedef void (APIENTRY *PFNGLVERTEXBINDINGDIVISORPROC)        (GLuint bindingindex, GLuint divisor);
extern PFNGLVERTEXBINDINGDIVISORPROC _gl_loader_glvertexbindingdivisor;
typedef void (APIENTRY *PFNGLVERTEXP2UIPROC)        (GLenum type, GLuint value);
extern PFNGLVERTEXP2UIPROC _gl_loader_glvertexp2ui;
typedef void (APIENTRY *PFNGLVERTEXP2UIVPROC)        (GLenum type, const GLuint * value);
extern PFNGLVERTEXP2UIVPROC _gl_loader_glvertexp2uiv;
typedef void (APIENTRY *PFNGLVERTEXP3UIPROC)        (GLenum type, GLuint value);
extern PFNGLVERTEXP3UIPROC _gl_loader_glvertexp3ui;
typedef void (APIENTRY *PFNGLVERTEXP3UIVPROC)        (GLenum type, const GLuint * value);
extern PFNGLVERTEXP3UIVPROC _gl_loader_glvertexp3uiv;
typedef void (APIENTRY *PFNGLVERTEXP4UIPROC)        (GLenum type, GLuint value);
extern PFNGLVERTEXP4UIPROC _gl_loader_glvertexp4ui;
typedef void (APIENTRY *PFNGLVERTEXP4UIVPROC)        (GLenum type, const GLuint * value);
extern PFNGLVERTEXP4UIVPROC _gl_loader_glvertexp4uiv;
typedef void (APIENTRY *PFNGLVERTEXPOINTERPROC)        (GLint size, GLenum type, GLsizei stride, const void * pointer);
extern PFNGLVERTEXPOINTERPROC _gl_loader_glvertexpointer;
typedef void (APIENTRY *PFNGLVIEWPORTPROC)        (GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLVIEWPORTPROC _gl_loader_glviewport;
typedef void (APIENTRY *PFNGLVIEWPORTARRAYVPROC)        (GLuint first, GLsizei count, const GLfloat * v);
extern PFNGLVIEWPORTARRAYVPROC _gl_loader_glviewportarrayv;
typedef void (APIENTRY *PFNGLVIEWPORTINDEXEDFPROC)        (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
extern PFNGLVIEWPORTINDEXEDFPROC _gl_loader_glviewportindexedf;
typedef void (APIENTRY *PFNGLVIEWPORTINDEXEDFVPROC)        (GLuint index, const GLfloat * v);
extern PFNGLVIEWPORTINDEXEDFVPROC _gl_loader_glviewportindexedfv;
typedef void (APIENTRY *PFNGLWAITSYNCPROC)        (GLsync sync, GLbitfield flags, GLuint64 timeout);
extern PFNGLWAITSYNCPROC _gl_loader_glwaitsync;
typedef void (APIENTRY *PFNGLWINDOWPOS2DPROC)        (GLdouble x, GLdouble y);
extern PFNGLWINDOWPOS2DPROC _gl_loader_glwindowpos2d;
typedef void (APIENTRY *PFNGLWINDOWPOS2DVPROC)        (const GLdouble * v);
extern PFNGLWINDOWPOS2DVPROC _gl_loader_glwindowpos2dv;
typedef void (APIENTRY *PFNGLWINDOWPOS2FPROC)        (GLfloat x, GLfloat y);
extern PFNGLWINDOWPOS2FPROC _gl_loader_glwindowpos2f;
typedef void (APIENTRY *PFNGLWINDOWPOS2FVPROC)        (const GLfloat * v);
extern PFNGLWINDOWPOS2FVPROC _gl_loader_glwindowpos2fv;
typedef void (APIENTRY *PFNGLWINDOWPOS2IPROC)        (GLint x, GLint y);
extern PFNGLWINDOWPOS2IPROC _gl_loader_glwindowpos2i;
typedef void (APIENTRY *PFNGLWINDOWPOS2IVPROC)        (const GLint * v);
extern PFNGLWINDOWPOS2IVPROC _gl_loader_glwindowpos2iv;
typedef void (APIENTRY *PFNGLWINDOWPOS2SPROC)        (GLshort x, GLshort y);
extern PFNGLWINDOWPOS2SPROC _gl_loader_glwindowpos2s;
typedef void (APIENTRY *PFNGLWINDOWPOS2SVPROC)        (const GLshort * v);
extern PFNGLWINDOWPOS2SVPROC _gl_loader_glwindowpos2sv;
typedef void (APIENTRY *PFNGLWINDOWPOS3DPROC)        (GLdouble x, GLdouble y, GLdouble z);
extern PFNGLWINDOWPOS3DPROC _gl_loader_glwindowpos3d;
typedef void (APIENTRY *PFNGLWINDOWPOS3DVPROC)        (const GLdouble * v);
extern PFNGLWINDOWPOS3DVPROC _gl_loader_glwindowpos3dv;
typedef void (APIENTRY *PFNGLWINDOWPOS3FPROC)        (GLfloat x, GLfloat y, GLfloat z);
extern PFNGLWINDOWPOS3FPROC _gl_loader_glwindowpos3f;
typedef void (APIENTRY *PFNGLWINDOWPOS3FVPROC)        (const GLfloat * v);
extern PFNGLWINDOWPOS3FVPROC _gl_loader_glwindowpos3fv;
typedef void (APIENTRY *PFNGLWINDOWPOS3IPROC)        (GLint x, GLint y, GLint z);
extern PFNGLWINDOWPOS3IPROC _gl_loader_glwindowpos3i;
typedef void (APIENTRY *PFNGLWINDOWPOS3IVPROC)        (const GLint * v);
extern PFNGLWINDOWPOS3IVPROC _gl_loader_glwindowpos3iv;
typedef void (APIENTRY *PFNGLWINDOWPOS3SPROC)        (GLshort x, GLshort y, GLshort z);
extern PFNGLWINDOWPOS3SPROC _gl_loader_glwindowpos3s;
typedef void (APIENTRY *PFNGLWINDOWPOS3SVPROC)        (const GLshort * v);
extern PFNGLWINDOWPOS3SVPROC _gl_loader_glwindowpos3sv;


#ifdef _WIN32

inline HGLRC wglCreateContextAttribsARB(HDC hDC, HGLRC hShareContext, const int* attribList) { return _gl_loader_wglcreatecontextatribsarb(hDC, hShareContext, attribList); }
inline BOOL wglChoosePixelFormatARB(HDC hdc, const int* piAttribIList, const FLOAT* pfAttribFList, UINT nMaxFormats, int* piFormats, UINT* nNumFormats) {
	return _gl_loader_wglchoosepixelformatarb(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
}

#endif

inline void glAccum(GLenum op, GLfloat value){return _gl_loader_glaccum               (op, value);}
inline void glActiveShaderProgram(GLuint pipeline, GLuint program){return _gl_loader_glactiveshaderprogram               (pipeline, program);}
inline void glActiveTexture(GLenum texture){return _gl_loader_glactivetexture               (texture);}
inline void glAlphaFunc(GLenum func, GLfloat ref){return _gl_loader_glalphafunc               (func, ref);}
inline GLboolean glAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences){return _gl_loader_glaretexturesresident               (n, textures, residences);}
inline void glArrayElement(GLint i){return _gl_loader_glarrayelement               (i);}
inline void glAttachShader(GLuint program, GLuint shader){return _gl_loader_glattachshader               (program, shader);}
inline void glBegin(GLenum mode){return _gl_loader_glbegin               (mode);}
inline void glBeginConditionalRender(GLuint id, GLenum mode){return _gl_loader_glbeginconditionalrender               (id, mode);}
inline void glBeginQuery(GLenum target, GLuint id){return _gl_loader_glbeginquery               (target, id);}
inline void glBeginQueryIndexed(GLenum target, GLuint index, GLuint id){return _gl_loader_glbeginqueryindexed               (target, index, id);}
inline void glBeginTransformFeedback(GLenum primitiveMode){return _gl_loader_glbegintransformfeedback               (primitiveMode);}
inline void glBindAttribLocation(GLuint program, GLuint index, const GLchar * name){return _gl_loader_glbindattriblocation               (program, index, name);}
inline void glBindBuffer(GLenum target, GLuint buffer){return _gl_loader_glbindbuffer               (target, buffer);}
inline void glBindBufferBase(GLenum target, GLuint index, GLuint buffer){return _gl_loader_glbindbufferbase               (target, index, buffer);}
inline void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size){return _gl_loader_glbindbufferrange               (target, index, buffer, offset, size);}
inline void glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint * buffers){return _gl_loader_glbindbuffersbase               (target, first, count, buffers);}
inline void glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes){return _gl_loader_glbindbuffersrange               (target, first, count, buffers, offsets, sizes);}
inline void glBindFragDataLocation(GLuint program, GLuint color, const GLchar * name){return _gl_loader_glbindfragdatalocation               (program, color, name);}
inline void glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name){return _gl_loader_glbindfragdatalocationindexed               (program, colorNumber, index, name);}
inline void glBindFramebuffer(GLenum target, GLuint framebuffer){return _gl_loader_glbindframebuffer               (target, framebuffer);}
inline void glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format){return _gl_loader_glbindimagetexture               (unit, texture, level, layered, layer, access, format);}
inline void glBindImageTextures(GLuint first, GLsizei count, const GLuint * textures){return _gl_loader_glbindimagetextures               (first, count, textures);}
inline void glBindProgramPipeline(GLuint pipeline){return _gl_loader_glbindprogrampipeline               (pipeline);}
inline void glBindRenderbuffer(GLenum target, GLuint renderbuffer){return _gl_loader_glbindrenderbuffer               (target, renderbuffer);}
inline void glBindSampler(GLuint unit, GLuint sampler){return _gl_loader_glbindsampler               (unit, sampler);}
inline void glBindSamplers(GLuint first, GLsizei count, const GLuint * samplers){return _gl_loader_glbindsamplers               (first, count, samplers);}
inline void glBindTexture(GLenum target, GLuint texture){return _gl_loader_glbindtexture               (target, texture);}
inline void glBindTextureUnit(GLuint unit, GLuint texture){return _gl_loader_glbindtextureunit               (unit, texture);}
inline void glBindTextures(GLuint first, GLsizei count, const GLuint * textures){return _gl_loader_glbindtextures               (first, count, textures);}
inline void glBindTransformFeedback(GLenum target, GLuint id){return _gl_loader_glbindtransformfeedback               (target, id);}
inline void glBindVertexArray(GLuint array){return _gl_loader_glbindvertexarray               (array);}
inline void glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride){return _gl_loader_glbindvertexbuffer               (bindingindex, buffer, offset, stride);}
inline void glBindVertexBuffers(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides){return _gl_loader_glbindvertexbuffers               (first, count, buffers, offsets, strides);}
inline void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap){return _gl_loader_glbitmap               (width, height, xorig, yorig, xmove, ymove, bitmap);}
inline void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha){return _gl_loader_glblendcolor               (red, green, blue, alpha);}
inline void glBlendEquation(GLenum mode){return _gl_loader_glblendequation               (mode);}
inline void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha){return _gl_loader_glblendequationseparate               (modeRGB, modeAlpha);}
inline void glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha){return _gl_loader_glblendequationseparatei               (buf, modeRGB, modeAlpha);}
inline void glBlendEquationi(GLuint buf, GLenum mode){return _gl_loader_glblendequationi               (buf, mode);}
inline void glBlendFunc(GLenum sfactor, GLenum dfactor){return _gl_loader_glblendfunc               (sfactor, dfactor);}
inline void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha){return _gl_loader_glblendfuncseparate               (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);}
inline void glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha){return _gl_loader_glblendfuncseparatei               (buf, srcRGB, dstRGB, srcAlpha, dstAlpha);}
inline void glBlendFunci(GLuint buf, GLenum src, GLenum dst){return _gl_loader_glblendfunci               (buf, src, dst);}
inline void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter){return _gl_loader_glblitframebuffer               (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);}
inline void glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter){return _gl_loader_glblitnamedframebuffer               (readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);}
inline void glBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage){return _gl_loader_glbufferdata               (target, size, data, usage);}
inline void glBufferStorage(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags){return _gl_loader_glbufferstorage               (target, size, data, flags);}
inline void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data){return _gl_loader_glbuffersubdata               (target, offset, size, data);}
inline void glCallList(GLuint list){return _gl_loader_glcalllist               (list);}
inline void glCallLists(GLsizei n, GLenum type, const void * lists){return _gl_loader_glcalllists               (n, type, lists);}
inline GLenum glCheckFramebufferStatus(GLenum target){return _gl_loader_glcheckframebufferstatus               (target);}
inline GLenum glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target){return _gl_loader_glchecknamedframebufferstatus               (framebuffer, target);}
inline void glClampColor(GLenum target, GLenum clamp){return _gl_loader_glclampcolor               (target, clamp);}
inline void glClear(GLbitfield mask){return _gl_loader_glclear               (mask);}
inline void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha){return _gl_loader_glclearaccum               (red, green, blue, alpha);}
inline void glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data){return _gl_loader_glclearbufferdata               (target, internalformat, format, type, data);}
inline void glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data){return _gl_loader_glclearbuffersubdata               (target, internalformat, offset, size, format, type, data);}
inline void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil){return _gl_loader_glclearbufferfi               (buffer, drawbuffer, depth, stencil);}
inline void glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value){return _gl_loader_glclearbufferfv               (buffer, drawbuffer, value);}
inline void glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value){return _gl_loader_glclearbufferiv               (buffer, drawbuffer, value);}
inline void glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value){return _gl_loader_glclearbufferuiv               (buffer, drawbuffer, value);}
inline void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha){return _gl_loader_glclearcolor               (red, green, blue, alpha);}
inline void glClearDepth(GLdouble depth){return _gl_loader_glcleardepth               (depth);}
inline void glClearDepthf(GLfloat d){return _gl_loader_glcleardepthf               (d);}
inline void glClearIndex(GLfloat c){return _gl_loader_glclearindex               (c);}
inline void glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data){return _gl_loader_glclearnamedbufferdata               (buffer, internalformat, format, type, data);}
inline void glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data){return _gl_loader_glclearnamedbuffersubdata               (buffer, internalformat, offset, size, format, type, data);}
inline void glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil){return _gl_loader_glclearnamedframebufferfi               (framebuffer, buffer, drawbuffer, depth, stencil);}
inline void glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value){return _gl_loader_glclearnamedframebufferfv               (framebuffer, buffer, drawbuffer, value);}
inline void glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value){return _gl_loader_glclearnamedframebufferiv               (framebuffer, buffer, drawbuffer, value);}
inline void glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value){return _gl_loader_glclearnamedframebufferuiv               (framebuffer, buffer, drawbuffer, value);}
inline void glClearStencil(GLint s){return _gl_loader_glclearstencil               (s);}
inline void glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void * data){return _gl_loader_glclearteximage               (texture, level, format, type, data);}
inline void glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data){return _gl_loader_glcleartexsubimage               (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);}
inline void glClientActiveTexture(GLenum texture){return _gl_loader_glclientactivetexture               (texture);}
inline GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout){return _gl_loader_glclientwaitsync               (sync, flags, timeout);}
inline void glClipControl(GLenum origin, GLenum depth){return _gl_loader_glclipcontrol               (origin, depth);}
inline void glClipPlane(GLenum plane, const GLdouble * equation){return _gl_loader_glclipplane               (plane, equation);}
inline void glColor3b(GLbyte red, GLbyte green, GLbyte blue){return _gl_loader_glcolor3b               (red, green, blue);}
inline void glColor3bv(const GLbyte * v){return _gl_loader_glcolor3bv               (v);}
inline void glColor3d(GLdouble red, GLdouble green, GLdouble blue){return _gl_loader_glcolor3d               (red, green, blue);}
inline void glColor3dv(const GLdouble * v){return _gl_loader_glcolor3dv               (v);}
inline void glColor3f(GLfloat red, GLfloat green, GLfloat blue){return _gl_loader_glcolor3f               (red, green, blue);}
inline void glColor3fv(const GLfloat * v){return _gl_loader_glcolor3fv               (v);}
inline void glColor3i(GLint red, GLint green, GLint blue){return _gl_loader_glcolor3i               (red, green, blue);}
inline void glColor3iv(const GLint * v){return _gl_loader_glcolor3iv               (v);}
inline void glColor3s(GLshort red, GLshort green, GLshort blue){return _gl_loader_glcolor3s               (red, green, blue);}
inline void glColor3sv(const GLshort * v){return _gl_loader_glcolor3sv               (v);}
inline void glColor3ub(GLubyte red, GLubyte green, GLubyte blue){return _gl_loader_glcolor3ub               (red, green, blue);}
inline void glColor3ubv(const GLubyte * v){return _gl_loader_glcolor3ubv               (v);}
inline void glColor3ui(GLuint red, GLuint green, GLuint blue){return _gl_loader_glcolor3ui               (red, green, blue);}
inline void glColor3uiv(const GLuint * v){return _gl_loader_glcolor3uiv               (v);}
inline void glColor3us(GLushort red, GLushort green, GLushort blue){return _gl_loader_glcolor3us               (red, green, blue);}
inline void glColor3usv(const GLushort * v){return _gl_loader_glcolor3usv               (v);}
inline void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha){return _gl_loader_glcolor4b               (red, green, blue, alpha);}
inline void glColor4bv(const GLbyte * v){return _gl_loader_glcolor4bv               (v);}
inline void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha){return _gl_loader_glcolor4d               (red, green, blue, alpha);}
inline void glColor4dv(const GLdouble * v){return _gl_loader_glcolor4dv               (v);}
inline void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha){return _gl_loader_glcolor4f               (red, green, blue, alpha);}
inline void glColor4fv(const GLfloat * v){return _gl_loader_glcolor4fv               (v);}
inline void glColor4i(GLint red, GLint green, GLint blue, GLint alpha){return _gl_loader_glcolor4i               (red, green, blue, alpha);}
inline void glColor4iv(const GLint * v){return _gl_loader_glcolor4iv               (v);}
inline void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha){return _gl_loader_glcolor4s               (red, green, blue, alpha);}
inline void glColor4sv(const GLshort * v){return _gl_loader_glcolor4sv               (v);}
inline void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha){return _gl_loader_glcolor4ub               (red, green, blue, alpha);}
inline void glColor4ubv(const GLubyte * v){return _gl_loader_glcolor4ubv               (v);}
inline void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha){return _gl_loader_glcolor4ui               (red, green, blue, alpha);}
inline void glColor4uiv(const GLuint * v){return _gl_loader_glcolor4uiv               (v);}
inline void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha){return _gl_loader_glcolor4us               (red, green, blue, alpha);}
inline void glColor4usv(const GLushort * v){return _gl_loader_glcolor4usv               (v);}
inline void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha){return _gl_loader_glcolormask               (red, green, blue, alpha);}
inline void glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a){return _gl_loader_glcolormaski               (index, r, g, b, a);}
inline void glColorMaterial(GLenum face, GLenum mode){return _gl_loader_glcolormaterial               (face, mode);}
inline void glColorP3ui(GLenum type, GLuint color){return _gl_loader_glcolorp3ui               (type, color);}
inline void glColorP3uiv(GLenum type, const GLuint * color){return _gl_loader_glcolorp3uiv               (type, color);}
inline void glColorP4ui(GLenum type, GLuint color){return _gl_loader_glcolorp4ui               (type, color);}
inline void glColorP4uiv(GLenum type, const GLuint * color){return _gl_loader_glcolorp4uiv               (type, color);}
inline void glColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer){return _gl_loader_glcolorpointer               (size, type, stride, pointer);}
inline void glCompileShader(GLuint shader){return _gl_loader_glcompileshader               (shader);}
inline void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data){return _gl_loader_glcompressedteximage1d               (target, level, internalformat, width, border, imageSize, data);}
inline void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data){return _gl_loader_glcompressedteximage2d               (target, level, internalformat, width, height, border, imageSize, data);}
inline void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data){return _gl_loader_glcompressedteximage3d               (target, level, internalformat, width, height, depth, border, imageSize, data);}
inline void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data){return _gl_loader_glcompressedtexsubimage1d               (target, level, xoffset, width, format, imageSize, data);}
inline void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data){return _gl_loader_glcompressedtexsubimage2d               (target, level, xoffset, yoffset, width, height, format, imageSize, data);}
inline void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data){return _gl_loader_glcompressedtexsubimage3d               (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);}
inline void glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data){return _gl_loader_glcompressedtexturesubimage1d               (texture, level, xoffset, width, format, imageSize, data);}
inline void glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data){return _gl_loader_glcompressedtexturesubimage2d               (texture, level, xoffset, yoffset, width, height, format, imageSize, data);}
inline void glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data){return _gl_loader_glcompressedtexturesubimage3d               (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);}
inline void glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size){return _gl_loader_glcopybuffersubdata               (readTarget, writeTarget, readOffset, writeOffset, size);}
inline void glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth){return _gl_loader_glcopyimagesubdata               (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);}
inline void glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size){return _gl_loader_glcopynamedbuffersubdata               (readBuffer, writeBuffer, readOffset, writeOffset, size);}
inline void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type){return _gl_loader_glcopypixels               (x, y, width, height, type);}
inline void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border){return _gl_loader_glcopyteximage1d               (target, level, internalformat, x, y, width, border);}
inline void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border){return _gl_loader_glcopyteximage2d               (target, level, internalformat, x, y, width, height, border);}
inline void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width){return _gl_loader_glcopytexsubimage1d               (target, level, xoffset, x, y, width);}
inline void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height){return _gl_loader_glcopytexsubimage2d               (target, level, xoffset, yoffset, x, y, width, height);}
inline void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height){return _gl_loader_glcopytexsubimage3d               (target, level, xoffset, yoffset, zoffset, x, y, width, height);}
inline void glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width){return _gl_loader_glcopytexturesubimage1d               (texture, level, xoffset, x, y, width);}
inline void glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height){return _gl_loader_glcopytexturesubimage2d               (texture, level, xoffset, yoffset, x, y, width, height);}
inline void glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height){return _gl_loader_glcopytexturesubimage3d               (texture, level, xoffset, yoffset, zoffset, x, y, width, height);}
inline void glCreateBuffers(GLsizei n, GLuint * buffers){return _gl_loader_glcreatebuffers               (n, buffers);}
inline void glCreateFramebuffers(GLsizei n, GLuint * framebuffers){return _gl_loader_glcreateframebuffers               (n, framebuffers);}
inline GLuint glCreateProgram(){return _gl_loader_glcreateprogram               ();}
inline void glCreateProgramPipelines(GLsizei n, GLuint * pipelines){return _gl_loader_glcreateprogrampipelines               (n, pipelines);}
inline void glCreateQueries(GLenum target, GLsizei n, GLuint * ids){return _gl_loader_glcreatequeries               (target, n, ids);}
inline void glCreateRenderbuffers(GLsizei n, GLuint * renderbuffers){return _gl_loader_glcreaterenderbuffers               (n, renderbuffers);}
inline void glCreateSamplers(GLsizei n, GLuint * samplers){return _gl_loader_glcreatesamplers               (n, samplers);}
inline GLuint glCreateShader(GLenum type){return _gl_loader_glcreateshader               (type);}
inline GLuint glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar * const * strings){return _gl_loader_glcreateshaderprogramv               (type, count, strings);}
inline void glCreateTextures(GLenum target, GLsizei n, GLuint * textures){return _gl_loader_glcreatetextures               (target, n, textures);}
inline void glCreateTransformFeedbacks(GLsizei n, GLuint * ids){return _gl_loader_glcreatetransformfeedbacks               (n, ids);}
inline void glCreateVertexArrays(GLsizei n, GLuint * arrays){return _gl_loader_glcreatevertexarrays               (n, arrays);}
inline void glCullFace(GLenum mode){return _gl_loader_glcullface               (mode);}
inline void glDebugMessageCallback(GLDEBUGPROC callback, const void * userParam){return _gl_loader_gldebugmessagecallback               (callback, userParam);}
inline void glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled){return _gl_loader_gldebugmessagecontrol               (source, type, severity, count, ids, enabled);}
inline void glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf){return _gl_loader_gldebugmessageinsert               (source, type, id, severity, length, buf);}
inline void glDeleteBuffers(GLsizei n, const GLuint * buffers){return _gl_loader_gldeletebuffers               (n, buffers);}
inline void glDeleteFramebuffers(GLsizei n, const GLuint * framebuffers){return _gl_loader_gldeleteframebuffers               (n, framebuffers);}
inline void glDeleteLists(GLuint list, GLsizei range){return _gl_loader_gldeletelists               (list, range);}
inline void glDeleteProgram(GLuint program){return _gl_loader_gldeleteprogram               (program);}
inline void glDeleteProgramPipelines(GLsizei n, const GLuint * pipelines){return _gl_loader_gldeleteprogrampipelines               (n, pipelines);}
inline void glDeleteQueries(GLsizei n, const GLuint * ids){return _gl_loader_gldeletequeries               (n, ids);}
inline void glDeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers){return _gl_loader_gldeleterenderbuffers               (n, renderbuffers);}
inline void glDeleteSamplers(GLsizei count, const GLuint * samplers){return _gl_loader_gldeletesamplers               (count, samplers);}
inline void glDeleteShader(GLuint shader){return _gl_loader_gldeleteshader               (shader);}
inline void glDeleteSync(GLsync sync){return _gl_loader_gldeletesync               (sync);}
inline void glDeleteTextures(GLsizei n, const GLuint * textures){return _gl_loader_gldeletetextures               (n, textures);}
inline void glDeleteTransformFeedbacks(GLsizei n, const GLuint * ids){return _gl_loader_gldeletetransformfeedbacks               (n, ids);}
inline void glDeleteVertexArrays(GLsizei n, const GLuint * arrays){return _gl_loader_gldeletevertexarrays               (n, arrays);}
inline void glDepthFunc(GLenum func){return _gl_loader_gldepthfunc               (func);}
inline void glDepthMask(GLboolean flag){return _gl_loader_gldepthmask               (flag);}
inline void glDepthRange(GLdouble n, GLdouble f){return _gl_loader_gldepthrange               (n, f);}
inline void glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble * v){return _gl_loader_gldepthrangearrayv               (first, count, v);}
inline void glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f){return _gl_loader_gldepthrangeindexed               (index, n, f);}
inline void glDepthRangef(GLfloat n, GLfloat f){return _gl_loader_gldepthrangef               (n, f);}
inline void glDetachShader(GLuint program, GLuint shader){return _gl_loader_gldetachshader               (program, shader);}
inline void glDisable(GLenum cap){return _gl_loader_gldisable               (cap);}
inline void glDisableClientState(GLenum array){return _gl_loader_gldisableclientstate               (array);}
inline void glDisableVertexArrayAttrib(GLuint vaobj, GLuint index){return _gl_loader_gldisablevertexarrayattrib               (vaobj, index);}
inline void glDisableVertexAttribArray(GLuint index){return _gl_loader_gldisablevertexattribarray               (index);}
inline void glDisablei(GLenum target, GLuint index){return _gl_loader_gldisablei               (target, index);}
inline void glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z){return _gl_loader_gldispatchcompute               (num_groups_x, num_groups_y, num_groups_z);}
inline void glDispatchComputeIndirect(GLintptr indirect){return _gl_loader_gldispatchcomputeindirect               (indirect);}
inline void glDrawArrays(GLenum mode, GLint first, GLsizei count){return _gl_loader_gldrawarrays               (mode, first, count);}
inline void glDrawArraysIndirect(GLenum mode, const void * indirect){return _gl_loader_gldrawarraysindirect               (mode, indirect);}
inline void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount){return _gl_loader_gldrawarraysinstanced               (mode, first, count, instancecount);}
inline void glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance){return _gl_loader_gldrawarraysinstancedbaseinstance               (mode, first, count, instancecount, baseinstance);}
inline void glDrawBuffer(GLenum buf){return _gl_loader_gldrawbuffer               (buf);}
inline void glDrawBuffers(GLsizei n, const GLenum * bufs){return _gl_loader_gldrawbuffers               (n, bufs);}
inline void glDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices){return _gl_loader_gldrawelements               (mode, count, type, indices);}
inline void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex){return _gl_loader_gldrawelementsbasevertex               (mode, count, type, indices, basevertex);}
inline void glDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect){return _gl_loader_gldrawelementsindirect               (mode, type, indirect);}
inline void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount){return _gl_loader_gldrawelementsinstanced               (mode, count, type, indices, instancecount);}
inline void glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance){return _gl_loader_gldrawelementsinstancedbaseinstance               (mode, count, type, indices, instancecount, baseinstance);}
inline void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex){return _gl_loader_gldrawelementsinstancedbasevertex               (mode, count, type, indices, instancecount, basevertex);}
inline void glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance){return _gl_loader_gldrawelementsinstancedbasevertexbaseinstance               (mode, count, type, indices, instancecount, basevertex, baseinstance);}
inline void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels){return _gl_loader_gldrawpixels               (width, height, format, type, pixels);}
inline void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices){return _gl_loader_gldrawrangeelements               (mode, start, end, count, type, indices);}
inline void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex){return _gl_loader_gldrawrangeelementsbasevertex               (mode, start, end, count, type, indices, basevertex);}
inline void glDrawTransformFeedback(GLenum mode, GLuint id){return _gl_loader_gldrawtransformfeedback               (mode, id);}
inline void glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount){return _gl_loader_gldrawtransformfeedbackinstanced               (mode, id, instancecount);}
inline void glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream){return _gl_loader_gldrawtransformfeedbackstream               (mode, id, stream);}
inline void glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount){return _gl_loader_gldrawtransformfeedbackstreaminstanced               (mode, id, stream, instancecount);}
inline void glEdgeFlag(GLboolean flag){return _gl_loader_gledgeflag               (flag);}
inline void glEdgeFlagPointer(GLsizei stride, const void * pointer){return _gl_loader_gledgeflagpointer               (stride, pointer);}
inline void glEdgeFlagv(const GLboolean * flag){return _gl_loader_gledgeflagv               (flag);}
inline void glEnable(GLenum cap){return _gl_loader_glenable               (cap);}
inline void glEnableClientState(GLenum array){return _gl_loader_glenableclientstate               (array);}
inline void glEnableVertexArrayAttrib(GLuint vaobj, GLuint index){return _gl_loader_glenablevertexarrayattrib               (vaobj, index);}
inline void glEnableVertexAttribArray(GLuint index){return _gl_loader_glenablevertexattribarray               (index);}
inline void glEnablei(GLenum target, GLuint index){return _gl_loader_glenablei               (target, index);}
inline void glEnd(){return _gl_loader_glend               ();}
inline void glEndConditionalRender(){return _gl_loader_glendconditionalrender               ();}
inline void glEndList(){return _gl_loader_glendlist               ();}
inline void glEndQuery(GLenum target){return _gl_loader_glendquery               (target);}
inline void glEndQueryIndexed(GLenum target, GLuint index){return _gl_loader_glendqueryindexed               (target, index);}
inline void glEndTransformFeedback(){return _gl_loader_glendtransformfeedback               ();}
inline void glEvalCoord1d(GLdouble u){return _gl_loader_glevalcoord1d               (u);}
inline void glEvalCoord1dv(const GLdouble * u){return _gl_loader_glevalcoord1dv               (u);}
inline void glEvalCoord1f(GLfloat u){return _gl_loader_glevalcoord1f               (u);}
inline void glEvalCoord1fv(const GLfloat * u){return _gl_loader_glevalcoord1fv               (u);}
inline void glEvalCoord2d(GLdouble u, GLdouble v){return _gl_loader_glevalcoord2d               (u, v);}
inline void glEvalCoord2dv(const GLdouble * u){return _gl_loader_glevalcoord2dv               (u);}
inline void glEvalCoord2f(GLfloat u, GLfloat v){return _gl_loader_glevalcoord2f               (u, v);}
inline void glEvalCoord2fv(const GLfloat * u){return _gl_loader_glevalcoord2fv               (u);}
inline void glEvalMesh1(GLenum mode, GLint i1, GLint i2){return _gl_loader_glevalmesh1               (mode, i1, i2);}
inline void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2){return _gl_loader_glevalmesh2               (mode, i1, i2, j1, j2);}
inline void glEvalPoint1(GLint i){return _gl_loader_glevalpoint1               (i);}
inline void glEvalPoint2(GLint i, GLint j){return _gl_loader_glevalpoint2               (i, j);}
inline void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer){return _gl_loader_glfeedbackbuffer               (size, type, buffer);}
inline GLsync glFenceSync(GLenum condition, GLbitfield flags){return _gl_loader_glfencesync               (condition, flags);}
inline void glFinish(){return _gl_loader_glfinish               ();}
inline void glFlush(){return _gl_loader_glflush               ();}
inline void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length){return _gl_loader_glflushmappedbufferrange               (target, offset, length);}
inline void glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length){return _gl_loader_glflushmappednamedbufferrange               (buffer, offset, length);}
inline void glFogCoordPointer(GLenum type, GLsizei stride, const void * pointer){return _gl_loader_glfogcoordpointer               (type, stride, pointer);}
inline void glFogCoordd(GLdouble coord){return _gl_loader_glfogcoordd               (coord);}
inline void glFogCoorddv(const GLdouble * coord){return _gl_loader_glfogcoorddv               (coord);}
inline void glFogCoordf(GLfloat coord){return _gl_loader_glfogcoordf               (coord);}
inline void glFogCoordfv(const GLfloat * coord){return _gl_loader_glfogcoordfv               (coord);}
inline void glFogf(GLenum pname, GLfloat param){return _gl_loader_glfogf               (pname, param);}
inline void glFogfv(GLenum pname, const GLfloat * params){return _gl_loader_glfogfv               (pname, params);}
inline void glFogi(GLenum pname, GLint param){return _gl_loader_glfogi               (pname, param);}
inline void glFogiv(GLenum pname, const GLint * params){return _gl_loader_glfogiv               (pname, params);}
inline void glFramebufferParameteri(GLenum target, GLenum pname, GLint param){return _gl_loader_glframebufferparameteri               (target, pname, param);}
inline void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer){return _gl_loader_glframebufferrenderbuffer               (target, attachment, renderbuffertarget, renderbuffer);}
inline void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level){return _gl_loader_glframebuffertexture               (target, attachment, texture, level);}
inline void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level){return _gl_loader_glframebuffertexture1d               (target, attachment, textarget, texture, level);}
inline void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level){return _gl_loader_glframebuffertexture2d               (target, attachment, textarget, texture, level);}
inline void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset){return _gl_loader_glframebuffertexture3d               (target, attachment, textarget, texture, level, zoffset);}
inline void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer){return _gl_loader_glframebuffertexturelayer               (target, attachment, texture, level, layer);}
inline void glFrontFace(GLenum mode){return _gl_loader_glfrontface               (mode);}
inline void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar){return _gl_loader_glfrustum               (left, right, bottom, top, zNear, zFar);}
inline void glGenBuffers(GLsizei n, GLuint * buffers){return _gl_loader_glgenbuffers               (n, buffers);}
inline void glGenFramebuffers(GLsizei n, GLuint * framebuffers){return _gl_loader_glgenframebuffers               (n, framebuffers);}
inline GLuint glGenLists(GLsizei range){return _gl_loader_glgenlists               (range);}
inline void glGenProgramPipelines(GLsizei n, GLuint * pipelines){return _gl_loader_glgenprogrampipelines               (n, pipelines);}
inline void glGenQueries(GLsizei n, GLuint * ids){return _gl_loader_glgenqueries               (n, ids);}
inline void glGenRenderbuffers(GLsizei n, GLuint * renderbuffers){return _gl_loader_glgenrenderbuffers               (n, renderbuffers);}
inline void glGenSamplers(GLsizei count, GLuint * samplers){return _gl_loader_glgensamplers               (count, samplers);}
inline void glGenTextures(GLsizei n, GLuint * textures){return _gl_loader_glgentextures               (n, textures);}
inline void glGenTransformFeedbacks(GLsizei n, GLuint * ids){return _gl_loader_glgentransformfeedbacks               (n, ids);}
inline void glGenVertexArrays(GLsizei n, GLuint * arrays){return _gl_loader_glgenvertexarrays               (n, arrays);}
inline void glGenerateMipmap(GLenum target){return _gl_loader_glgeneratemipmap               (target);}
inline void glGenerateTextureMipmap(GLuint texture){return _gl_loader_glgeneratetexturemipmap               (texture);}
inline void glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params){return _gl_loader_glgetactiveatomiccounterbufferiv               (program, bufferIndex, pname, params);}
inline void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name){return _gl_loader_glgetactiveattrib               (program, index, bufSize, length, size, type, name);}
inline void glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name){return _gl_loader_glgetactivesubroutinename               (program, shadertype, index, bufSize, length, name);}
inline void glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name){return _gl_loader_glgetactivesubroutineuniformname               (program, shadertype, index, bufSize, length, name);}
inline void glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values){return _gl_loader_glgetactivesubroutineuniformiv               (program, shadertype, index, pname, values);}
inline void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name){return _gl_loader_glgetactiveuniform               (program, index, bufSize, length, size, type, name);}
inline void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName){return _gl_loader_glgetactiveuniformblockname               (program, uniformBlockIndex, bufSize, length, uniformBlockName);}
inline void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params){return _gl_loader_glgetactiveuniformblockiv               (program, uniformBlockIndex, pname, params);}
inline void glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName){return _gl_loader_glgetactiveuniformname               (program, uniformIndex, bufSize, length, uniformName);}
inline void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params){return _gl_loader_glgetactiveuniformsiv               (program, uniformCount, uniformIndices, pname, params);}
inline void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders){return _gl_loader_glgetattachedshaders               (program, maxCount, count, shaders);}
inline GLint glGetAttribLocation(GLuint program, const GLchar * name){return _gl_loader_glgetattriblocation               (program, name);}
inline void glGetBooleani_v(GLenum target, GLuint index, GLboolean * data){return _gl_loader_glgetbooleani_v               (target, index, data);}
inline void glGetBooleanv(GLenum pname, GLboolean * data){return _gl_loader_glgetbooleanv               (pname, data);}
inline void glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 * params){return _gl_loader_glgetbufferparameteri64v               (target, pname, params);}
inline void glGetBufferParameteriv(GLenum target, GLenum pname, GLint * params){return _gl_loader_glgetbufferparameteriv               (target, pname, params);}
inline void glGetBufferPointerv(GLenum target, GLenum pname, void * * params){return _gl_loader_glgetbufferpointerv               (target, pname, params);}
inline void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void * data){return _gl_loader_glgetbuffersubdata               (target, offset, size, data);}
inline void glGetClipPlane(GLenum plane, GLdouble * equation){return _gl_loader_glgetclipplane               (plane, equation);}
inline void glGetCompressedTexImage(GLenum target, GLint level, void * img){return _gl_loader_glgetcompressedteximage               (target, level, img);}
inline void glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void * pixels){return _gl_loader_glgetcompressedtextureimage               (texture, level, bufSize, pixels);}
inline void glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels){return _gl_loader_glgetcompressedtexturesubimage               (texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);}
inline GLuint glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog){return _gl_loader_glgetdebugmessagelog               (count, bufSize, sources, types, ids, severities, lengths, messageLog);}
inline void glGetDoublei_v(GLenum target, GLuint index, GLdouble * data){return _gl_loader_glgetdoublei_v               (target, index, data);}
inline void glGetDoublev(GLenum pname, GLdouble * data){return _gl_loader_glgetdoublev               (pname, data);}
inline GLenum glGetError(){return _gl_loader_glgeterror               ();}
inline void glGetFloati_v(GLenum target, GLuint index, GLfloat * data){return _gl_loader_glgetfloati_v               (target, index, data);}
inline void glGetFloatv(GLenum pname, GLfloat * data){return _gl_loader_glgetfloatv               (pname, data);}
inline GLint glGetFragDataIndex(GLuint program, const GLchar * name){return _gl_loader_glgetfragdataindex               (program, name);}
inline GLint glGetFragDataLocation(GLuint program, const GLchar * name){return _gl_loader_glgetfragdatalocation               (program, name);}
inline void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint * params){return _gl_loader_glgetframebufferattachmentparameteriv               (target, attachment, pname, params);}
inline void glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint * params){return _gl_loader_glgetframebufferparameteriv               (target, pname, params);}
inline GLenum glGetGraphicsResetStatus(){return _gl_loader_glgetgraphicsresetstatus               ();}
inline void glGetInteger64i_v(GLenum target, GLuint index, GLint64 * data){return _gl_loader_glgetinteger64i_v               (target, index, data);}
inline void glGetInteger64v(GLenum pname, GLint64 * data){return _gl_loader_glgetinteger64v               (pname, data);}
inline void glGetIntegeri_v(GLenum target, GLuint index, GLint * data){return _gl_loader_glgetintegeri_v               (target, index, data);}
inline void glGetIntegerv(GLenum pname, GLint * data){return _gl_loader_glgetintegerv               (pname, data);}
inline void glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 * params){return _gl_loader_glgetinternalformati64v               (target, internalformat, pname, count, params);}
inline void glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params){return _gl_loader_glgetinternalformativ               (target, internalformat, pname, count, params);}
inline void glGetLightfv(GLenum light, GLenum pname, GLfloat * params){return _gl_loader_glgetlightfv               (light, pname, params);}
inline void glGetLightiv(GLenum light, GLenum pname, GLint * params){return _gl_loader_glgetlightiv               (light, pname, params);}
inline void glGetMapdv(GLenum target, GLenum query, GLdouble * v){return _gl_loader_glgetmapdv               (target, query, v);}
inline void glGetMapfv(GLenum target, GLenum query, GLfloat * v){return _gl_loader_glgetmapfv               (target, query, v);}
inline void glGetMapiv(GLenum target, GLenum query, GLint * v){return _gl_loader_glgetmapiv               (target, query, v);}
inline void glGetMaterialfv(GLenum face, GLenum pname, GLfloat * params){return _gl_loader_glgetmaterialfv               (face, pname, params);}
inline void glGetMaterialiv(GLenum face, GLenum pname, GLint * params){return _gl_loader_glgetmaterialiv               (face, pname, params);}
inline void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat * val){return _gl_loader_glgetmultisamplefv               (pname, index, val);}
inline void glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 * params){return _gl_loader_glgetnamedbufferparameteri64v               (buffer, pname, params);}
inline void glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint * params){return _gl_loader_glgetnamedbufferparameteriv               (buffer, pname, params);}
inline void glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void * * params){return _gl_loader_glgetnamedbufferpointerv               (buffer, pname, params);}
inline void glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data){return _gl_loader_glgetnamedbuffersubdata               (buffer, offset, size, data);}
inline void glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params){return _gl_loader_glgetnamedframebufferattachmentparameteriv               (framebuffer, attachment, pname, params);}
inline void glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint * param){return _gl_loader_glgetnamedframebufferparameteriv               (framebuffer, pname, param);}
inline void glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint * params){return _gl_loader_glgetnamedrenderbufferparameteriv               (renderbuffer, pname, params);}
inline void glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label){return _gl_loader_glgetobjectlabel               (identifier, name, bufSize, length, label);}
inline void glGetObjectPtrLabel(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label){return _gl_loader_glgetobjectptrlabel               (ptr, bufSize, length, label);}
inline void glGetPixelMapfv(GLenum map, GLfloat * values){return _gl_loader_glgetpixelmapfv               (map, values);}
inline void glGetPixelMapuiv(GLenum map, GLuint * values){return _gl_loader_glgetpixelmapuiv               (map, values);}
inline void glGetPixelMapusv(GLenum map, GLushort * values){return _gl_loader_glgetpixelmapusv               (map, values);}
inline void glGetPointerv(GLenum pname, void * * params){return _gl_loader_glgetpointerv               (pname, params);}
inline void glGetPolygonStipple(GLubyte * mask){return _gl_loader_glgetpolygonstipple               (mask);}
inline void glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary){return _gl_loader_glgetprogrambinary               (program, bufSize, length, binaryFormat, binary);}
inline void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog){return _gl_loader_glgetprograminfolog               (program, bufSize, length, infoLog);}
inline void glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint * params){return _gl_loader_glgetprograminterfaceiv               (program, programInterface, pname, params);}
inline void glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog){return _gl_loader_glgetprogrampipelineinfolog               (pipeline, bufSize, length, infoLog);}
inline void glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint * params){return _gl_loader_glgetprogrampipelineiv               (pipeline, pname, params);}
inline GLuint glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar * name){return _gl_loader_glgetprogramresourceindex               (program, programInterface, name);}
inline GLint glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar * name){return _gl_loader_glgetprogramresourcelocation               (program, programInterface, name);}
inline GLint glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar * name){return _gl_loader_glgetprogramresourcelocationindex               (program, programInterface, name);}
inline void glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name){return _gl_loader_glgetprogramresourcename               (program, programInterface, index, bufSize, length, name);}
inline void glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params){return _gl_loader_glgetprogramresourceiv               (program, programInterface, index, propCount, props, count, length, params);}
inline void glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint * values){return _gl_loader_glgetprogramstageiv               (program, shadertype, pname, values);}
inline void glGetProgramiv(GLuint program, GLenum pname, GLint * params){return _gl_loader_glgetprogramiv               (program, pname, params);}
inline void glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset){return _gl_loader_glgetquerybufferobjecti64v               (id, buffer, pname, offset);}
inline void glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset){return _gl_loader_glgetquerybufferobjectiv               (id, buffer, pname, offset);}
inline void glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset){return _gl_loader_glgetquerybufferobjectui64v               (id, buffer, pname, offset);}
inline void glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset){return _gl_loader_glgetquerybufferobjectuiv               (id, buffer, pname, offset);}
inline void glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint * params){return _gl_loader_glgetqueryindexediv               (target, index, pname, params);}
inline void glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 * params){return _gl_loader_glgetqueryobjecti64v               (id, pname, params);}
inline void glGetQueryObjectiv(GLuint id, GLenum pname, GLint * params){return _gl_loader_glgetqueryobjectiv               (id, pname, params);}
inline void glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params){return _gl_loader_glgetqueryobjectui64v               (id, pname, params);}
inline void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params){return _gl_loader_glgetqueryobjectuiv               (id, pname, params);}
inline void glGetQueryiv(GLenum target, GLenum pname, GLint * params){return _gl_loader_glgetqueryiv               (target, pname, params);}
inline void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params){return _gl_loader_glgetrenderbufferparameteriv               (target, pname, params);}
inline void glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint * params){return _gl_loader_glgetsamplerparameteriiv               (sampler, pname, params);}
inline void glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint * params){return _gl_loader_glgetsamplerparameteriuiv               (sampler, pname, params);}
inline void glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat * params){return _gl_loader_glgetsamplerparameterfv               (sampler, pname, params);}
inline void glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint * params){return _gl_loader_glgetsamplerparameteriv               (sampler, pname, params);}
inline void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog){return _gl_loader_glgetshaderinfolog               (shader, bufSize, length, infoLog);}
inline void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision){return _gl_loader_glgetshaderprecisionformat               (shadertype, precisiontype, range, precision);}
inline void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source){return _gl_loader_glgetshadersource               (shader, bufSize, length, source);}
inline void glGetShaderiv(GLuint shader, GLenum pname, GLint * params){return _gl_loader_glgetshaderiv               (shader, pname, params);}
inline GLubyte glGetString(GLenum name){return _gl_loader_glgetstring               (name);}
inline GLubyte glGetStringi(GLenum name, GLuint index){return _gl_loader_glgetstringi               (name, index);}
inline GLuint glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar * name){return _gl_loader_glgetsubroutineindex               (program, shadertype, name);}
inline GLint glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar * name){return _gl_loader_glgetsubroutineuniformlocation               (program, shadertype, name);}
inline void glGetSynciv(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values){return _gl_loader_glgetsynciv               (sync, pname, count, length, values);}
inline void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params){return _gl_loader_glgettexenvfv               (target, pname, params);}
inline void glGetTexEnviv(GLenum target, GLenum pname, GLint * params){return _gl_loader_glgettexenviv               (target, pname, params);}
inline void glGetTexGendv(GLenum coord, GLenum pname, GLdouble * params){return _gl_loader_glgettexgendv               (coord, pname, params);}
inline void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params){return _gl_loader_glgettexgenfv               (coord, pname, params);}
inline void glGetTexGeniv(GLenum coord, GLenum pname, GLint * params){return _gl_loader_glgettexgeniv               (coord, pname, params);}
inline void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * pixels){return _gl_loader_glgetteximage               (target, level, format, type, pixels);}
inline void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params){return _gl_loader_glgettexlevelparameterfv               (target, level, pname, params);}
inline void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params){return _gl_loader_glgettexlevelparameteriv               (target, level, pname, params);}
inline void glGetTexParameterIiv(GLenum target, GLenum pname, GLint * params){return _gl_loader_glgettexparameteriiv               (target, pname, params);}
inline void glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params){return _gl_loader_glgettexparameteriuiv               (target, pname, params);}
inline void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params){return _gl_loader_glgettexparameterfv               (target, pname, params);}
inline void glGetTexParameteriv(GLenum target, GLenum pname, GLint * params){return _gl_loader_glgettexparameteriv               (target, pname, params);}
inline void glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels){return _gl_loader_glgettextureimage               (texture, level, format, type, bufSize, pixels);}
inline void glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat * params){return _gl_loader_glgettexturelevelparameterfv               (texture, level, pname, params);}
inline void glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint * params){return _gl_loader_glgettexturelevelparameteriv               (texture, level, pname, params);}
inline void glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint * params){return _gl_loader_glgettextureparameteriiv               (texture, pname, params);}
inline void glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint * params){return _gl_loader_glgettextureparameteriuiv               (texture, pname, params);}
inline void glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat * params){return _gl_loader_glgettextureparameterfv               (texture, pname, params);}
inline void glGetTextureParameteriv(GLuint texture, GLenum pname, GLint * params){return _gl_loader_glgettextureparameteriv               (texture, pname, params);}
inline void glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels){return _gl_loader_glgettexturesubimage               (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);}
inline void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name){return _gl_loader_glgettransformfeedbackvarying               (program, index, bufSize, length, size, type, name);}
inline void glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 * param){return _gl_loader_glgettransformfeedbacki64_v               (xfb, pname, index, param);}
inline void glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint * param){return _gl_loader_glgettransformfeedbacki_v               (xfb, pname, index, param);}
inline void glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint * param){return _gl_loader_glgettransformfeedbackiv               (xfb, pname, param);}
inline GLuint glGetUniformBlockIndex(GLuint program, const GLchar * uniformBlockName){return _gl_loader_glgetuniformblockindex               (program, uniformBlockName);}
inline void glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar * const * uniformNames, GLuint * uniformIndices){return _gl_loader_glgetuniformindices               (program, uniformCount, uniformNames, uniformIndices);}
inline GLint glGetUniformLocation(GLuint program, const GLchar * name){return _gl_loader_glgetuniformlocation               (program, name);}
inline void glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint * params){return _gl_loader_glgetuniformsubroutineuiv               (shadertype, location, params);}
inline void glGetUniformdv(GLuint program, GLint location, GLdouble * params){return _gl_loader_glgetuniformdv               (program, location, params);}
inline void glGetUniformfv(GLuint program, GLint location, GLfloat * params){return _gl_loader_glgetuniformfv               (program, location, params);}
inline void glGetUniformiv(GLuint program, GLint location, GLint * params){return _gl_loader_glgetuniformiv               (program, location, params);}
inline void glGetUniformuiv(GLuint program, GLint location, GLuint * params){return _gl_loader_glgetuniformuiv               (program, location, params);}
inline void glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param){return _gl_loader_glgetvertexarrayindexed64iv               (vaobj, index, pname, param);}
inline void glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint * param){return _gl_loader_glgetvertexarrayindexediv               (vaobj, index, pname, param);}
inline void glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint * param){return _gl_loader_glgetvertexarrayiv               (vaobj, pname, param);}
inline void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint * params){return _gl_loader_glgetvertexattribiiv               (index, pname, params);}
inline void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint * params){return _gl_loader_glgetvertexattribiuiv               (index, pname, params);}
inline void glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble * params){return _gl_loader_glgetvertexattribldv               (index, pname, params);}
inline void glGetVertexAttribPointerv(GLuint index, GLenum pname, void * * pointer){return _gl_loader_glgetvertexattribpointerv               (index, pname, pointer);}
inline void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params){return _gl_loader_glgetvertexattribdv               (index, pname, params);}
inline void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat * params){return _gl_loader_glgetvertexattribfv               (index, pname, params);}
inline void glGetVertexAttribiv(GLuint index, GLenum pname, GLint * params){return _gl_loader_glgetvertexattribiv               (index, pname, params);}
inline void glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table){return _gl_loader_glgetncolortable               (target, format, type, bufSize, table);}
inline void glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void * pixels){return _gl_loader_glgetncompressedteximage               (target, lod, bufSize, pixels);}
inline void glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image){return _gl_loader_glgetnconvolutionfilter               (target, format, type, bufSize, image);}
inline void glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values){return _gl_loader_glgetnhistogram               (target, reset, format, type, bufSize, values);}
inline void glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v){return _gl_loader_glgetnmapdv               (target, query, bufSize, v);}
inline void glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v){return _gl_loader_glgetnmapfv               (target, query, bufSize, v);}
inline void glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint * v){return _gl_loader_glgetnmapiv               (target, query, bufSize, v);}
inline void glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values){return _gl_loader_glgetnminmax               (target, reset, format, type, bufSize, values);}
inline void glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat * values){return _gl_loader_glgetnpixelmapfv               (map, bufSize, values);}
inline void glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint * values){return _gl_loader_glgetnpixelmapuiv               (map, bufSize, values);}
inline void glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort * values){return _gl_loader_glgetnpixelmapusv               (map, bufSize, values);}
inline void glGetnPolygonStipple(GLsizei bufSize, GLubyte * pattern){return _gl_loader_glgetnpolygonstipple               (bufSize, pattern);}
inline void glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span){return _gl_loader_glgetnseparablefilter               (target, format, type, rowBufSize, row, columnBufSize, column, span);}
inline void glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels){return _gl_loader_glgetnteximage               (target, level, format, type, bufSize, pixels);}
inline void glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble * params){return _gl_loader_glgetnuniformdv               (program, location, bufSize, params);}
inline void glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat * params){return _gl_loader_glgetnuniformfv               (program, location, bufSize, params);}
inline void glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint * params){return _gl_loader_glgetnuniformiv               (program, location, bufSize, params);}
inline void glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint * params){return _gl_loader_glgetnuniformuiv               (program, location, bufSize, params);}
inline void glHint(GLenum target, GLenum mode){return _gl_loader_glhint               (target, mode);}
inline void glIndexMask(GLuint mask){return _gl_loader_glindexmask               (mask);}
inline void glIndexPointer(GLenum type, GLsizei stride, const void * pointer){return _gl_loader_glindexpointer               (type, stride, pointer);}
inline void glIndexd(GLdouble c){return _gl_loader_glindexd               (c);}
inline void glIndexdv(const GLdouble * c){return _gl_loader_glindexdv               (c);}
inline void glIndexf(GLfloat c){return _gl_loader_glindexf               (c);}
inline void glIndexfv(const GLfloat * c){return _gl_loader_glindexfv               (c);}
inline void glIndexi(GLint c){return _gl_loader_glindexi               (c);}
inline void glIndexiv(const GLint * c){return _gl_loader_glindexiv               (c);}
inline void glIndexs(GLshort c){return _gl_loader_glindexs               (c);}
inline void glIndexsv(const GLshort * c){return _gl_loader_glindexsv               (c);}
inline void glIndexub(GLubyte c){return _gl_loader_glindexub               (c);}
inline void glIndexubv(const GLubyte * c){return _gl_loader_glindexubv               (c);}
inline void glInitNames(){return _gl_loader_glinitnames               ();}
inline void glInterleavedArrays(GLenum format, GLsizei stride, const void * pointer){return _gl_loader_glinterleavedarrays               (format, stride, pointer);}
inline void glInvalidateBufferData(GLuint buffer){return _gl_loader_glinvalidatebufferdata               (buffer);}
inline void glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length){return _gl_loader_glinvalidatebuffersubdata               (buffer, offset, length);}
inline void glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments){return _gl_loader_glinvalidateframebuffer               (target, numAttachments, attachments);}
inline void glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments){return _gl_loader_glinvalidatenamedframebufferdata               (framebuffer, numAttachments, attachments);}
inline void glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height){return _gl_loader_glinvalidatenamedframebuffersubdata               (framebuffer, numAttachments, attachments, x, y, width, height);}
inline void glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height){return _gl_loader_glinvalidatesubframebuffer               (target, numAttachments, attachments, x, y, width, height);}
inline void glInvalidateTexImage(GLuint texture, GLint level){return _gl_loader_glinvalidateteximage               (texture, level);}
inline void glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth){return _gl_loader_glinvalidatetexsubimage               (texture, level, xoffset, yoffset, zoffset, width, height, depth);}
inline GLboolean glIsBuffer(GLuint buffer){return _gl_loader_glisbuffer               (buffer);}
inline GLboolean glIsEnabled(GLenum cap){return _gl_loader_glisenabled               (cap);}
inline GLboolean glIsEnabledi(GLenum target, GLuint index){return _gl_loader_glisenabledi               (target, index);}
inline GLboolean glIsFramebuffer(GLuint framebuffer){return _gl_loader_glisframebuffer               (framebuffer);}
inline GLboolean glIsList(GLuint list){return _gl_loader_glislist               (list);}
inline GLboolean glIsProgram(GLuint program){return _gl_loader_glisprogram               (program);}
inline GLboolean glIsProgramPipeline(GLuint pipeline){return _gl_loader_glisprogrampipeline               (pipeline);}
inline GLboolean glIsQuery(GLuint id){return _gl_loader_glisquery               (id);}
inline GLboolean glIsRenderbuffer(GLuint renderbuffer){return _gl_loader_glisrenderbuffer               (renderbuffer);}
inline GLboolean glIsSampler(GLuint sampler){return _gl_loader_glissampler               (sampler);}
inline GLboolean glIsShader(GLuint shader){return _gl_loader_glisshader               (shader);}
inline GLboolean glIsSync(GLsync sync){return _gl_loader_glissync               (sync);}
inline GLboolean glIsTexture(GLuint texture){return _gl_loader_glistexture               (texture);}
inline GLboolean glIsTransformFeedback(GLuint id){return _gl_loader_glistransformfeedback               (id);}
inline GLboolean glIsVertexArray(GLuint array){return _gl_loader_glisvertexarray               (array);}
inline void glLightModelf(GLenum pname, GLfloat param){return _gl_loader_gllightmodelf               (pname, param);}
inline void glLightModelfv(GLenum pname, const GLfloat * params){return _gl_loader_gllightmodelfv               (pname, params);}
inline void glLightModeli(GLenum pname, GLint param){return _gl_loader_gllightmodeli               (pname, param);}
inline void glLightModeliv(GLenum pname, const GLint * params){return _gl_loader_gllightmodeliv               (pname, params);}
inline void glLightf(GLenum light, GLenum pname, GLfloat param){return _gl_loader_gllightf               (light, pname, param);}
inline void glLightfv(GLenum light, GLenum pname, const GLfloat * params){return _gl_loader_gllightfv               (light, pname, params);}
inline void glLighti(GLenum light, GLenum pname, GLint param){return _gl_loader_gllighti               (light, pname, param);}
inline void glLightiv(GLenum light, GLenum pname, const GLint * params){return _gl_loader_gllightiv               (light, pname, params);}
inline void glLineStipple(GLint factor, GLushort pattern){return _gl_loader_gllinestipple               (factor, pattern);}
inline void glLineWidth(GLfloat width){return _gl_loader_gllinewidth               (width);}
inline void glLinkProgram(GLuint program){return _gl_loader_gllinkprogram               (program);}
inline void glListBase(GLuint base){return _gl_loader_gllistbase               (base);}
inline void glLoadIdentity(){return _gl_loader_glloadidentity               ();}
inline void glLoadMatrixd(const GLdouble * m){return _gl_loader_glloadmatrixd               (m);}
inline void glLoadMatrixf(const GLfloat * m){return _gl_loader_glloadmatrixf               (m);}
inline void glLoadName(GLuint name){return _gl_loader_glloadname               (name);}
inline void glLoadTransposeMatrixd(const GLdouble * m){return _gl_loader_glloadtransposematrixd               (m);}
inline void glLoadTransposeMatrixf(const GLfloat * m){return _gl_loader_glloadtransposematrixf               (m);}
inline void glLogicOp(GLenum opcode){return _gl_loader_gllogicop               (opcode);}
inline void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points){return _gl_loader_glmap1d               (target, u1, u2, stride, order, points);}
inline void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points){return _gl_loader_glmap1f               (target, u1, u2, stride, order, points);}
inline void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points){return _gl_loader_glmap2d               (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);}
inline void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points){return _gl_loader_glmap2f               (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);}
inline void glMapBuffer(GLenum target, GLenum access){return _gl_loader_glmapbuffer               (target, access);}
inline void glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access){return _gl_loader_glmapbufferrange               (target, offset, length, access);}
inline void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2){return _gl_loader_glmapgrid1d               (un, u1, u2);}
inline void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2){return _gl_loader_glmapgrid1f               (un, u1, u2);}
inline void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2){return _gl_loader_glmapgrid2d               (un, u1, u2, vn, v1, v2);}
inline void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2){return _gl_loader_glmapgrid2f               (un, u1, u2, vn, v1, v2);}
inline void glMapNamedBuffer(GLuint buffer, GLenum access){return _gl_loader_glmapnamedbuffer               (buffer, access);}
inline void glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access){return _gl_loader_glmapnamedbufferrange               (buffer, offset, length, access);}
inline void glMaterialf(GLenum face, GLenum pname, GLfloat param){return _gl_loader_glmaterialf               (face, pname, param);}
inline void glMaterialfv(GLenum face, GLenum pname, const GLfloat * params){return _gl_loader_glmaterialfv               (face, pname, params);}
inline void glMateriali(GLenum face, GLenum pname, GLint param){return _gl_loader_glmateriali               (face, pname, param);}
inline void glMaterialiv(GLenum face, GLenum pname, const GLint * params){return _gl_loader_glmaterialiv               (face, pname, params);}
inline void glMatrixMode(GLenum mode){return _gl_loader_glmatrixmode               (mode);}
inline void glMemoryBarrier(GLbitfield barriers){return _gl_loader_glmemorybarrier               (barriers);}
inline void glMemoryBarrierByRegion(GLbitfield barriers){return _gl_loader_glmemorybarrierbyregion               (barriers);}
inline void glMinSampleShading(GLfloat value){return _gl_loader_glminsampleshading               (value);}
inline void glMultMatrixd(const GLdouble * m){return _gl_loader_glmultmatrixd               (m);}
inline void glMultMatrixf(const GLfloat * m){return _gl_loader_glmultmatrixf               (m);}
inline void glMultTransposeMatrixd(const GLdouble * m){return _gl_loader_glmulttransposematrixd               (m);}
inline void glMultTransposeMatrixf(const GLfloat * m){return _gl_loader_glmulttransposematrixf               (m);}
inline void glMultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount){return _gl_loader_glmultidrawarrays               (mode, first, count, drawcount);}
inline void glMultiDrawArraysIndirect(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride){return _gl_loader_glmultidrawarraysindirect               (mode, indirect, drawcount, stride);}
inline void glMultiDrawArraysIndirectCount(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride){return _gl_loader_glmultidrawarraysindirectcount               (mode, indirect, drawcount, maxdrawcount, stride);}
inline void glMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const void * const * indices, GLsizei drawcount){return _gl_loader_glmultidrawelements               (mode, count, type, indices, drawcount);}
inline void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei * count, GLenum type, const void * const * indices, GLsizei drawcount, const GLint * basevertex){return _gl_loader_glmultidrawelementsbasevertex               (mode, count, type, indices, drawcount, basevertex);}
inline void glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride){return _gl_loader_glmultidrawelementsindirect               (mode, type, indirect, drawcount, stride);}
inline void glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride){return _gl_loader_glmultidrawelementsindirectcount               (mode, type, indirect, drawcount, maxdrawcount, stride);}
inline void glMultiTexCoord1d(GLenum target, GLdouble s){return _gl_loader_glmultitexcoord1d               (target, s);}
inline void glMultiTexCoord1dv(GLenum target, const GLdouble * v){return _gl_loader_glmultitexcoord1dv               (target, v);}
inline void glMultiTexCoord1f(GLenum target, GLfloat s){return _gl_loader_glmultitexcoord1f               (target, s);}
inline void glMultiTexCoord1fv(GLenum target, const GLfloat * v){return _gl_loader_glmultitexcoord1fv               (target, v);}
inline void glMultiTexCoord1i(GLenum target, GLint s){return _gl_loader_glmultitexcoord1i               (target, s);}
inline void glMultiTexCoord1iv(GLenum target, const GLint * v){return _gl_loader_glmultitexcoord1iv               (target, v);}
inline void glMultiTexCoord1s(GLenum target, GLshort s){return _gl_loader_glmultitexcoord1s               (target, s);}
inline void glMultiTexCoord1sv(GLenum target, const GLshort * v){return _gl_loader_glmultitexcoord1sv               (target, v);}
inline void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t){return _gl_loader_glmultitexcoord2d               (target, s, t);}
inline void glMultiTexCoord2dv(GLenum target, const GLdouble * v){return _gl_loader_glmultitexcoord2dv               (target, v);}
inline void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t){return _gl_loader_glmultitexcoord2f               (target, s, t);}
inline void glMultiTexCoord2fv(GLenum target, const GLfloat * v){return _gl_loader_glmultitexcoord2fv               (target, v);}
inline void glMultiTexCoord2i(GLenum target, GLint s, GLint t){return _gl_loader_glmultitexcoord2i               (target, s, t);}
inline void glMultiTexCoord2iv(GLenum target, const GLint * v){return _gl_loader_glmultitexcoord2iv               (target, v);}
inline void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t){return _gl_loader_glmultitexcoord2s               (target, s, t);}
inline void glMultiTexCoord2sv(GLenum target, const GLshort * v){return _gl_loader_glmultitexcoord2sv               (target, v);}
inline void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r){return _gl_loader_glmultitexcoord3d               (target, s, t, r);}
inline void glMultiTexCoord3dv(GLenum target, const GLdouble * v){return _gl_loader_glmultitexcoord3dv               (target, v);}
inline void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r){return _gl_loader_glmultitexcoord3f               (target, s, t, r);}
inline void glMultiTexCoord3fv(GLenum target, const GLfloat * v){return _gl_loader_glmultitexcoord3fv               (target, v);}
inline void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r){return _gl_loader_glmultitexcoord3i               (target, s, t, r);}
inline void glMultiTexCoord3iv(GLenum target, const GLint * v){return _gl_loader_glmultitexcoord3iv               (target, v);}
inline void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r){return _gl_loader_glmultitexcoord3s               (target, s, t, r);}
inline void glMultiTexCoord3sv(GLenum target, const GLshort * v){return _gl_loader_glmultitexcoord3sv               (target, v);}
inline void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q){return _gl_loader_glmultitexcoord4d               (target, s, t, r, q);}
inline void glMultiTexCoord4dv(GLenum target, const GLdouble * v){return _gl_loader_glmultitexcoord4dv               (target, v);}
inline void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q){return _gl_loader_glmultitexcoord4f               (target, s, t, r, q);}
inline void glMultiTexCoord4fv(GLenum target, const GLfloat * v){return _gl_loader_glmultitexcoord4fv               (target, v);}
inline void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q){return _gl_loader_glmultitexcoord4i               (target, s, t, r, q);}
inline void glMultiTexCoord4iv(GLenum target, const GLint * v){return _gl_loader_glmultitexcoord4iv               (target, v);}
inline void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q){return _gl_loader_glmultitexcoord4s               (target, s, t, r, q);}
inline void glMultiTexCoord4sv(GLenum target, const GLshort * v){return _gl_loader_glmultitexcoord4sv               (target, v);}
inline void glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords){return _gl_loader_glmultitexcoordp1ui               (texture, type, coords);}
inline void glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint * coords){return _gl_loader_glmultitexcoordp1uiv               (texture, type, coords);}
inline void glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords){return _gl_loader_glmultitexcoordp2ui               (texture, type, coords);}
inline void glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint * coords){return _gl_loader_glmultitexcoordp2uiv               (texture, type, coords);}
inline void glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords){return _gl_loader_glmultitexcoordp3ui               (texture, type, coords);}
inline void glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint * coords){return _gl_loader_glmultitexcoordp3uiv               (texture, type, coords);}
inline void glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords){return _gl_loader_glmultitexcoordp4ui               (texture, type, coords);}
inline void glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint * coords){return _gl_loader_glmultitexcoordp4uiv               (texture, type, coords);}
inline void glNamedBufferData(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage){return _gl_loader_glnamedbufferdata               (buffer, size, data, usage);}
inline void glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags){return _gl_loader_glnamedbufferstorage               (buffer, size, data, flags);}
inline void glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data){return _gl_loader_glnamedbuffersubdata               (buffer, offset, size, data);}
inline void glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf){return _gl_loader_glnamedframebufferdrawbuffer               (framebuffer, buf);}
inline void glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum * bufs){return _gl_loader_glnamedframebufferdrawbuffers               (framebuffer, n, bufs);}
inline void glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param){return _gl_loader_glnamedframebufferparameteri               (framebuffer, pname, param);}
inline void glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src){return _gl_loader_glnamedframebufferreadbuffer               (framebuffer, src);}
inline void glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer){return _gl_loader_glnamedframebufferrenderbuffer               (framebuffer, attachment, renderbuffertarget, renderbuffer);}
inline void glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level){return _gl_loader_glnamedframebuffertexture               (framebuffer, attachment, texture, level);}
inline void glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer){return _gl_loader_glnamedframebuffertexturelayer               (framebuffer, attachment, texture, level, layer);}
inline void glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height){return _gl_loader_glnamedrenderbufferstorage               (renderbuffer, internalformat, width, height);}
inline void glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height){return _gl_loader_glnamedrenderbufferstoragemultisample               (renderbuffer, samples, internalformat, width, height);}
inline void glNewList(GLuint list, GLenum mode){return _gl_loader_glnewlist               (list, mode);}
inline void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz){return _gl_loader_glnormal3b               (nx, ny, nz);}
inline void glNormal3bv(const GLbyte * v){return _gl_loader_glnormal3bv               (v);}
inline void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz){return _gl_loader_glnormal3d               (nx, ny, nz);}
inline void glNormal3dv(const GLdouble * v){return _gl_loader_glnormal3dv               (v);}
inline void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz){return _gl_loader_glnormal3f               (nx, ny, nz);}
inline void glNormal3fv(const GLfloat * v){return _gl_loader_glnormal3fv               (v);}
inline void glNormal3i(GLint nx, GLint ny, GLint nz){return _gl_loader_glnormal3i               (nx, ny, nz);}
inline void glNormal3iv(const GLint * v){return _gl_loader_glnormal3iv               (v);}
inline void glNormal3s(GLshort nx, GLshort ny, GLshort nz){return _gl_loader_glnormal3s               (nx, ny, nz);}
inline void glNormal3sv(const GLshort * v){return _gl_loader_glnormal3sv               (v);}
inline void glNormalP3ui(GLenum type, GLuint coords){return _gl_loader_glnormalp3ui               (type, coords);}
inline void glNormalP3uiv(GLenum type, const GLuint * coords){return _gl_loader_glnormalp3uiv               (type, coords);}
inline void glNormalPointer(GLenum type, GLsizei stride, const void * pointer){return _gl_loader_glnormalpointer               (type, stride, pointer);}
inline void glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar * label){return _gl_loader_globjectlabel               (identifier, name, length, label);}
inline void glObjectPtrLabel(const void * ptr, GLsizei length, const GLchar * label){return _gl_loader_globjectptrlabel               (ptr, length, label);}
inline void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar){return _gl_loader_glortho               (left, right, bottom, top, zNear, zFar);}
inline void glPassThrough(GLfloat token){return _gl_loader_glpassthrough               (token);}
inline void glPatchParameterfv(GLenum pname, const GLfloat * values){return _gl_loader_glpatchparameterfv               (pname, values);}
inline void glPatchParameteri(GLenum pname, GLint value){return _gl_loader_glpatchparameteri               (pname, value);}
inline void glPauseTransformFeedback(){return _gl_loader_glpausetransformfeedback               ();}
inline void glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values){return _gl_loader_glpixelmapfv               (map, mapsize, values);}
inline void glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values){return _gl_loader_glpixelmapuiv               (map, mapsize, values);}
inline void glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values){return _gl_loader_glpixelmapusv               (map, mapsize, values);}
inline void glPixelStoref(GLenum pname, GLfloat param){return _gl_loader_glpixelstoref               (pname, param);}
inline void glPixelStorei(GLenum pname, GLint param){return _gl_loader_glpixelstorei               (pname, param);}
inline void glPixelTransferf(GLenum pname, GLfloat param){return _gl_loader_glpixeltransferf               (pname, param);}
inline void glPixelTransferi(GLenum pname, GLint param){return _gl_loader_glpixeltransferi               (pname, param);}
inline void glPixelZoom(GLfloat xfactor, GLfloat yfactor){return _gl_loader_glpixelzoom               (xfactor, yfactor);}
inline void glPointParameterf(GLenum pname, GLfloat param){return _gl_loader_glpointparameterf               (pname, param);}
inline void glPointParameterfv(GLenum pname, const GLfloat * params){return _gl_loader_glpointparameterfv               (pname, params);}
inline void glPointParameteri(GLenum pname, GLint param){return _gl_loader_glpointparameteri               (pname, param);}
inline void glPointParameteriv(GLenum pname, const GLint * params){return _gl_loader_glpointparameteriv               (pname, params);}
inline void glPointSize(GLfloat size){return _gl_loader_glpointsize               (size);}
inline void glPolygonMode(GLenum face, GLenum mode){return _gl_loader_glpolygonmode               (face, mode);}
inline void glPolygonOffset(GLfloat factor, GLfloat units){return _gl_loader_glpolygonoffset               (factor, units);}
inline void glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp){return _gl_loader_glpolygonoffsetclamp               (factor, units, clamp);}
inline void glPolygonStipple(const GLubyte * mask){return _gl_loader_glpolygonstipple               (mask);}
inline void glPopAttrib(){return _gl_loader_glpopattrib               ();}
inline void glPopClientAttrib(){return _gl_loader_glpopclientattrib               ();}
inline void glPopDebugGroup(){return _gl_loader_glpopdebuggroup               ();}
inline void glPopMatrix(){return _gl_loader_glpopmatrix               ();}
inline void glPopName(){return _gl_loader_glpopname               ();}
inline void glPrimitiveRestartIndex(GLuint index){return _gl_loader_glprimitiverestartindex               (index);}
inline void glPrioritizeTextures(GLsizei n, const GLuint * textures, const GLfloat * priorities){return _gl_loader_glprioritizetextures               (n, textures, priorities);}
inline void glProgramBinary(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length){return _gl_loader_glprogrambinary               (program, binaryFormat, binary, length);}
inline void glProgramParameteri(GLuint program, GLenum pname, GLint value){return _gl_loader_glprogramparameteri               (program, pname, value);}
inline void glProgramUniform1d(GLuint program, GLint location, GLdouble v0){return _gl_loader_glprogramuniform1d               (program, location, v0);}
inline void glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble * value){return _gl_loader_glprogramuniform1dv               (program, location, count, value);}
inline void glProgramUniform1f(GLuint program, GLint location, GLfloat v0){return _gl_loader_glprogramuniform1f               (program, location, v0);}
inline void glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value){return _gl_loader_glprogramuniform1fv               (program, location, count, value);}
inline void glProgramUniform1i(GLuint program, GLint location, GLint v0){return _gl_loader_glprogramuniform1i               (program, location, v0);}
inline void glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value){return _gl_loader_glprogramuniform1iv               (program, location, count, value);}
inline void glProgramUniform1ui(GLuint program, GLint location, GLuint v0){return _gl_loader_glprogramuniform1ui               (program, location, v0);}
inline void glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value){return _gl_loader_glprogramuniform1uiv               (program, location, count, value);}
inline void glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1){return _gl_loader_glprogramuniform2d               (program, location, v0, v1);}
inline void glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble * value){return _gl_loader_glprogramuniform2dv               (program, location, count, value);}
inline void glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1){return _gl_loader_glprogramuniform2f               (program, location, v0, v1);}
inline void glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value){return _gl_loader_glprogramuniform2fv               (program, location, count, value);}
inline void glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1){return _gl_loader_glprogramuniform2i               (program, location, v0, v1);}
inline void glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value){return _gl_loader_glprogramuniform2iv               (program, location, count, value);}
inline void glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1){return _gl_loader_glprogramuniform2ui               (program, location, v0, v1);}
inline void glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value){return _gl_loader_glprogramuniform2uiv               (program, location, count, value);}
inline void glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2){return _gl_loader_glprogramuniform3d               (program, location, v0, v1, v2);}
inline void glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble * value){return _gl_loader_glprogramuniform3dv               (program, location, count, value);}
inline void glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2){return _gl_loader_glprogramuniform3f               (program, location, v0, v1, v2);}
inline void glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value){return _gl_loader_glprogramuniform3fv               (program, location, count, value);}
inline void glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2){return _gl_loader_glprogramuniform3i               (program, location, v0, v1, v2);}
inline void glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value){return _gl_loader_glprogramuniform3iv               (program, location, count, value);}
inline void glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2){return _gl_loader_glprogramuniform3ui               (program, location, v0, v1, v2);}
inline void glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value){return _gl_loader_glprogramuniform3uiv               (program, location, count, value);}
inline void glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3){return _gl_loader_glprogramuniform4d               (program, location, v0, v1, v2, v3);}
inline void glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble * value){return _gl_loader_glprogramuniform4dv               (program, location, count, value);}
inline void glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3){return _gl_loader_glprogramuniform4f               (program, location, v0, v1, v2, v3);}
inline void glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value){return _gl_loader_glprogramuniform4fv               (program, location, count, value);}
inline void glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3){return _gl_loader_glprogramuniform4i               (program, location, v0, v1, v2, v3);}
inline void glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value){return _gl_loader_glprogramuniform4iv               (program, location, count, value);}
inline void glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3){return _gl_loader_glprogramuniform4ui               (program, location, v0, v1, v2, v3);}
inline void glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value){return _gl_loader_glprogramuniform4uiv               (program, location, count, value);}
inline void glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_glprogramuniformmatrix2dv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_glprogramuniformmatrix2fv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_glprogramuniformmatrix2x3dv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_glprogramuniformmatrix2x3fv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_glprogramuniformmatrix2x4dv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_glprogramuniformmatrix2x4fv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_glprogramuniformmatrix3dv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_glprogramuniformmatrix3fv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_glprogramuniformmatrix3x2dv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_glprogramuniformmatrix3x2fv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_glprogramuniformmatrix3x4dv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_glprogramuniformmatrix3x4fv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_glprogramuniformmatrix4dv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_glprogramuniformmatrix4fv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_glprogramuniformmatrix4x2dv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_glprogramuniformmatrix4x2fv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_glprogramuniformmatrix4x3dv               (program, location, count, transpose, value);}
inline void glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_glprogramuniformmatrix4x3fv               (program, location, count, transpose, value);}
inline void glProvokingVertex(GLenum mode){return _gl_loader_glprovokingvertex               (mode);}
inline void glPushAttrib(GLbitfield mask){return _gl_loader_glpushattrib               (mask);}
inline void glPushClientAttrib(GLbitfield mask){return _gl_loader_glpushclientattrib               (mask);}
inline void glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar * message){return _gl_loader_glpushdebuggroup               (source, id, length, message);}
inline void glPushMatrix(){return _gl_loader_glpushmatrix               ();}
inline void glPushName(GLuint name){return _gl_loader_glpushname               (name);}
inline void glQueryCounter(GLuint id, GLenum target){return _gl_loader_glquerycounter               (id, target);}
inline void glRasterPos2d(GLdouble x, GLdouble y){return _gl_loader_glrasterpos2d               (x, y);}
inline void glRasterPos2dv(const GLdouble * v){return _gl_loader_glrasterpos2dv               (v);}
inline void glRasterPos2f(GLfloat x, GLfloat y){return _gl_loader_glrasterpos2f               (x, y);}
inline void glRasterPos2fv(const GLfloat * v){return _gl_loader_glrasterpos2fv               (v);}
inline void glRasterPos2i(GLint x, GLint y){return _gl_loader_glrasterpos2i               (x, y);}
inline void glRasterPos2iv(const GLint * v){return _gl_loader_glrasterpos2iv               (v);}
inline void glRasterPos2s(GLshort x, GLshort y){return _gl_loader_glrasterpos2s               (x, y);}
inline void glRasterPos2sv(const GLshort * v){return _gl_loader_glrasterpos2sv               (v);}
inline void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z){return _gl_loader_glrasterpos3d               (x, y, z);}
inline void glRasterPos3dv(const GLdouble * v){return _gl_loader_glrasterpos3dv               (v);}
inline void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z){return _gl_loader_glrasterpos3f               (x, y, z);}
inline void glRasterPos3fv(const GLfloat * v){return _gl_loader_glrasterpos3fv               (v);}
inline void glRasterPos3i(GLint x, GLint y, GLint z){return _gl_loader_glrasterpos3i               (x, y, z);}
inline void glRasterPos3iv(const GLint * v){return _gl_loader_glrasterpos3iv               (v);}
inline void glRasterPos3s(GLshort x, GLshort y, GLshort z){return _gl_loader_glrasterpos3s               (x, y, z);}
inline void glRasterPos3sv(const GLshort * v){return _gl_loader_glrasterpos3sv               (v);}
inline void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w){return _gl_loader_glrasterpos4d               (x, y, z, w);}
inline void glRasterPos4dv(const GLdouble * v){return _gl_loader_glrasterpos4dv               (v);}
inline void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w){return _gl_loader_glrasterpos4f               (x, y, z, w);}
inline void glRasterPos4fv(const GLfloat * v){return _gl_loader_glrasterpos4fv               (v);}
inline void glRasterPos4i(GLint x, GLint y, GLint z, GLint w){return _gl_loader_glrasterpos4i               (x, y, z, w);}
inline void glRasterPos4iv(const GLint * v){return _gl_loader_glrasterpos4iv               (v);}
inline void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w){return _gl_loader_glrasterpos4s               (x, y, z, w);}
inline void glRasterPos4sv(const GLshort * v){return _gl_loader_glrasterpos4sv               (v);}
inline void glReadBuffer(GLenum src){return _gl_loader_glreadbuffer               (src);}
inline void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels){return _gl_loader_glreadpixels               (x, y, width, height, format, type, pixels);}
inline void glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data){return _gl_loader_glreadnpixels               (x, y, width, height, format, type, bufSize, data);}
inline void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2){return _gl_loader_glrectd               (x1, y1, x2, y2);}
inline void glRectdv(const GLdouble * v1, const GLdouble * v2){return _gl_loader_glrectdv               (v1, v2);}
inline void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2){return _gl_loader_glrectf               (x1, y1, x2, y2);}
inline void glRectfv(const GLfloat * v1, const GLfloat * v2){return _gl_loader_glrectfv               (v1, v2);}
inline void glRecti(GLint x1, GLint y1, GLint x2, GLint y2){return _gl_loader_glrecti               (x1, y1, x2, y2);}
inline void glRectiv(const GLint * v1, const GLint * v2){return _gl_loader_glrectiv               (v1, v2);}
inline void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2){return _gl_loader_glrects               (x1, y1, x2, y2);}
inline void glRectsv(const GLshort * v1, const GLshort * v2){return _gl_loader_glrectsv               (v1, v2);}
inline void glReleaseShaderCompiler(){return _gl_loader_glreleaseshadercompiler               ();}
inline GLint glRenderMode(GLenum mode){return _gl_loader_glrendermode               (mode);}
inline void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height){return _gl_loader_glrenderbufferstorage               (target, internalformat, width, height);}
inline void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height){return _gl_loader_glrenderbufferstoragemultisample               (target, samples, internalformat, width, height);}
inline void glResumeTransformFeedback(){return _gl_loader_glresumetransformfeedback               ();}
inline void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z){return _gl_loader_glrotated               (angle, x, y, z);}
inline void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z){return _gl_loader_glrotatef               (angle, x, y, z);}
inline void glSampleCoverage(GLfloat value, GLboolean invert){return _gl_loader_glsamplecoverage               (value, invert);}
inline void glSampleMaski(GLuint maskNumber, GLbitfield mask){return _gl_loader_glsamplemaski               (maskNumber, mask);}
inline void glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint * param){return _gl_loader_glsamplerparameteriiv               (sampler, pname, param);}
inline void glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint * param){return _gl_loader_glsamplerparameteriuiv               (sampler, pname, param);}
inline void glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param){return _gl_loader_glsamplerparameterf               (sampler, pname, param);}
inline void glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * param){return _gl_loader_glsamplerparameterfv               (sampler, pname, param);}
inline void glSamplerParameteri(GLuint sampler, GLenum pname, GLint param){return _gl_loader_glsamplerparameteri               (sampler, pname, param);}
inline void glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint * param){return _gl_loader_glsamplerparameteriv               (sampler, pname, param);}
inline void glScaled(GLdouble x, GLdouble y, GLdouble z){return _gl_loader_glscaled               (x, y, z);}
inline void glScalef(GLfloat x, GLfloat y, GLfloat z){return _gl_loader_glscalef               (x, y, z);}
inline void glScissor(GLint x, GLint y, GLsizei width, GLsizei height){return _gl_loader_glscissor               (x, y, width, height);}
inline void glScissorArrayv(GLuint first, GLsizei count, const GLint * v){return _gl_loader_glscissorarrayv               (first, count, v);}
inline void glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height){return _gl_loader_glscissorindexed               (index, left, bottom, width, height);}
inline void glScissorIndexedv(GLuint index, const GLint * v){return _gl_loader_glscissorindexedv               (index, v);}
inline void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue){return _gl_loader_glsecondarycolor3b               (red, green, blue);}
inline void glSecondaryColor3bv(const GLbyte * v){return _gl_loader_glsecondarycolor3bv               (v);}
inline void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue){return _gl_loader_glsecondarycolor3d               (red, green, blue);}
inline void glSecondaryColor3dv(const GLdouble * v){return _gl_loader_glsecondarycolor3dv               (v);}
inline void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue){return _gl_loader_glsecondarycolor3f               (red, green, blue);}
inline void glSecondaryColor3fv(const GLfloat * v){return _gl_loader_glsecondarycolor3fv               (v);}
inline void glSecondaryColor3i(GLint red, GLint green, GLint blue){return _gl_loader_glsecondarycolor3i               (red, green, blue);}
inline void glSecondaryColor3iv(const GLint * v){return _gl_loader_glsecondarycolor3iv               (v);}
inline void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue){return _gl_loader_glsecondarycolor3s               (red, green, blue);}
inline void glSecondaryColor3sv(const GLshort * v){return _gl_loader_glsecondarycolor3sv               (v);}
inline void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue){return _gl_loader_glsecondarycolor3ub               (red, green, blue);}
inline void glSecondaryColor3ubv(const GLubyte * v){return _gl_loader_glsecondarycolor3ubv               (v);}
inline void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue){return _gl_loader_glsecondarycolor3ui               (red, green, blue);}
inline void glSecondaryColor3uiv(const GLuint * v){return _gl_loader_glsecondarycolor3uiv               (v);}
inline void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue){return _gl_loader_glsecondarycolor3us               (red, green, blue);}
inline void glSecondaryColor3usv(const GLushort * v){return _gl_loader_glsecondarycolor3usv               (v);}
inline void glSecondaryColorP3ui(GLenum type, GLuint color){return _gl_loader_glsecondarycolorp3ui               (type, color);}
inline void glSecondaryColorP3uiv(GLenum type, const GLuint * color){return _gl_loader_glsecondarycolorp3uiv               (type, color);}
inline void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer){return _gl_loader_glsecondarycolorpointer               (size, type, stride, pointer);}
inline void glSelectBuffer(GLsizei size, GLuint * buffer){return _gl_loader_glselectbuffer               (size, buffer);}
inline void glShadeModel(GLenum mode){return _gl_loader_glshademodel               (mode);}
inline void glShaderBinary(GLsizei count, const GLuint * shaders, GLenum binaryFormat, const void * binary, GLsizei length){return _gl_loader_glshaderbinary               (count, shaders, binaryFormat, binary, length);}
inline void glShaderSource(GLuint shader, GLsizei count, const GLchar * const * string, const GLint * length){return _gl_loader_glshadersource               (shader, count, string, length);}
inline void glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding){return _gl_loader_glshaderstorageblockbinding               (program, storageBlockIndex, storageBlockBinding);}
inline void glSpecializeShader(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue){return _gl_loader_glspecializeshader               (shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);}
inline void glStencilFunc(GLenum func, GLint ref, GLuint mask){return _gl_loader_glstencilfunc               (func, ref, mask);}
inline void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask){return _gl_loader_glstencilfuncseparate               (face, func, ref, mask);}
inline void glStencilMask(GLuint mask){return _gl_loader_glstencilmask               (mask);}
inline void glStencilMaskSeparate(GLenum face, GLuint mask){return _gl_loader_glstencilmaskseparate               (face, mask);}
inline void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass){return _gl_loader_glstencilop               (fail, zfail, zpass);}
inline void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass){return _gl_loader_glstencilopseparate               (face, sfail, dpfail, dppass);}
inline void glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer){return _gl_loader_gltexbuffer               (target, internalformat, buffer);}
inline void glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size){return _gl_loader_gltexbufferrange               (target, internalformat, buffer, offset, size);}
inline void glTexCoord1d(GLdouble s){return _gl_loader_gltexcoord1d               (s);}
inline void glTexCoord1dv(const GLdouble * v){return _gl_loader_gltexcoord1dv               (v);}
inline void glTexCoord1f(GLfloat s){return _gl_loader_gltexcoord1f               (s);}
inline void glTexCoord1fv(const GLfloat * v){return _gl_loader_gltexcoord1fv               (v);}
inline void glTexCoord1i(GLint s){return _gl_loader_gltexcoord1i               (s);}
inline void glTexCoord1iv(const GLint * v){return _gl_loader_gltexcoord1iv               (v);}
inline void glTexCoord1s(GLshort s){return _gl_loader_gltexcoord1s               (s);}
inline void glTexCoord1sv(const GLshort * v){return _gl_loader_gltexcoord1sv               (v);}
inline void glTexCoord2d(GLdouble s, GLdouble t){return _gl_loader_gltexcoord2d               (s, t);}
inline void glTexCoord2dv(const GLdouble * v){return _gl_loader_gltexcoord2dv               (v);}
inline void glTexCoord2f(GLfloat s, GLfloat t){return _gl_loader_gltexcoord2f               (s, t);}
inline void glTexCoord2fv(const GLfloat * v){return _gl_loader_gltexcoord2fv               (v);}
inline void glTexCoord2i(GLint s, GLint t){return _gl_loader_gltexcoord2i               (s, t);}
inline void glTexCoord2iv(const GLint * v){return _gl_loader_gltexcoord2iv               (v);}
inline void glTexCoord2s(GLshort s, GLshort t){return _gl_loader_gltexcoord2s               (s, t);}
inline void glTexCoord2sv(const GLshort * v){return _gl_loader_gltexcoord2sv               (v);}
inline void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r){return _gl_loader_gltexcoord3d               (s, t, r);}
inline void glTexCoord3dv(const GLdouble * v){return _gl_loader_gltexcoord3dv               (v);}
inline void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r){return _gl_loader_gltexcoord3f               (s, t, r);}
inline void glTexCoord3fv(const GLfloat * v){return _gl_loader_gltexcoord3fv               (v);}
inline void glTexCoord3i(GLint s, GLint t, GLint r){return _gl_loader_gltexcoord3i               (s, t, r);}
inline void glTexCoord3iv(const GLint * v){return _gl_loader_gltexcoord3iv               (v);}
inline void glTexCoord3s(GLshort s, GLshort t, GLshort r){return _gl_loader_gltexcoord3s               (s, t, r);}
inline void glTexCoord3sv(const GLshort * v){return _gl_loader_gltexcoord3sv               (v);}
inline void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q){return _gl_loader_gltexcoord4d               (s, t, r, q);}
inline void glTexCoord4dv(const GLdouble * v){return _gl_loader_gltexcoord4dv               (v);}
inline void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q){return _gl_loader_gltexcoord4f               (s, t, r, q);}
inline void glTexCoord4fv(const GLfloat * v){return _gl_loader_gltexcoord4fv               (v);}
inline void glTexCoord4i(GLint s, GLint t, GLint r, GLint q){return _gl_loader_gltexcoord4i               (s, t, r, q);}
inline void glTexCoord4iv(const GLint * v){return _gl_loader_gltexcoord4iv               (v);}
inline void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q){return _gl_loader_gltexcoord4s               (s, t, r, q);}
inline void glTexCoord4sv(const GLshort * v){return _gl_loader_gltexcoord4sv               (v);}
inline void glTexCoordP1ui(GLenum type, GLuint coords){return _gl_loader_gltexcoordp1ui               (type, coords);}
inline void glTexCoordP1uiv(GLenum type, const GLuint * coords){return _gl_loader_gltexcoordp1uiv               (type, coords);}
inline void glTexCoordP2ui(GLenum type, GLuint coords){return _gl_loader_gltexcoordp2ui               (type, coords);}
inline void glTexCoordP2uiv(GLenum type, const GLuint * coords){return _gl_loader_gltexcoordp2uiv               (type, coords);}
inline void glTexCoordP3ui(GLenum type, GLuint coords){return _gl_loader_gltexcoordp3ui               (type, coords);}
inline void glTexCoordP3uiv(GLenum type, const GLuint * coords){return _gl_loader_gltexcoordp3uiv               (type, coords);}
inline void glTexCoordP4ui(GLenum type, GLuint coords){return _gl_loader_gltexcoordp4ui               (type, coords);}
inline void glTexCoordP4uiv(GLenum type, const GLuint * coords){return _gl_loader_gltexcoordp4uiv               (type, coords);}
inline void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer){return _gl_loader_gltexcoordpointer               (size, type, stride, pointer);}
inline void glTexEnvf(GLenum target, GLenum pname, GLfloat param){return _gl_loader_gltexenvf               (target, pname, param);}
inline void glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params){return _gl_loader_gltexenvfv               (target, pname, params);}
inline void glTexEnvi(GLenum target, GLenum pname, GLint param){return _gl_loader_gltexenvi               (target, pname, param);}
inline void glTexEnviv(GLenum target, GLenum pname, const GLint * params){return _gl_loader_gltexenviv               (target, pname, params);}
inline void glTexGend(GLenum coord, GLenum pname, GLdouble param){return _gl_loader_gltexgend               (coord, pname, param);}
inline void glTexGendv(GLenum coord, GLenum pname, const GLdouble * params){return _gl_loader_gltexgendv               (coord, pname, params);}
inline void glTexGenf(GLenum coord, GLenum pname, GLfloat param){return _gl_loader_gltexgenf               (coord, pname, param);}
inline void glTexGenfv(GLenum coord, GLenum pname, const GLfloat * params){return _gl_loader_gltexgenfv               (coord, pname, params);}
inline void glTexGeni(GLenum coord, GLenum pname, GLint param){return _gl_loader_gltexgeni               (coord, pname, param);}
inline void glTexGeniv(GLenum coord, GLenum pname, const GLint * params){return _gl_loader_gltexgeniv               (coord, pname, params);}
inline void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels){return _gl_loader_glteximage1d               (target, level, internalformat, width, border, format, type, pixels);}
inline void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels){return _gl_loader_glteximage2d               (target, level, internalformat, width, height, border, format, type, pixels);}
inline void glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations){return _gl_loader_glteximage2dmultisample               (target, samples, internalformat, width, height, fixedsamplelocations);}
inline void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels){return _gl_loader_glteximage3d               (target, level, internalformat, width, height, depth, border, format, type, pixels);}
inline void glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations){return _gl_loader_glteximage3dmultisample               (target, samples, internalformat, width, height, depth, fixedsamplelocations);}
inline void glTexParameterIiv(GLenum target, GLenum pname, const GLint * params){return _gl_loader_gltexparameteriiv               (target, pname, params);}
inline void glTexParameterIuiv(GLenum target, GLenum pname, const GLuint * params){return _gl_loader_gltexparameteriuiv               (target, pname, params);}
inline void glTexParameterf(GLenum target, GLenum pname, GLfloat param){return _gl_loader_gltexparameterf               (target, pname, param);}
inline void glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params){return _gl_loader_gltexparameterfv               (target, pname, params);}
inline void glTexParameteri(GLenum target, GLenum pname, GLint param){return _gl_loader_gltexparameteri               (target, pname, param);}
inline void glTexParameteriv(GLenum target, GLenum pname, const GLint * params){return _gl_loader_gltexparameteriv               (target, pname, params);}
inline void glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width){return _gl_loader_gltexstorage1d               (target, levels, internalformat, width);}
inline void glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height){return _gl_loader_gltexstorage2d               (target, levels, internalformat, width, height);}
inline void glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations){return _gl_loader_gltexstorage2dmultisample               (target, samples, internalformat, width, height, fixedsamplelocations);}
inline void glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth){return _gl_loader_gltexstorage3d               (target, levels, internalformat, width, height, depth);}
inline void glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations){return _gl_loader_gltexstorage3dmultisample               (target, samples, internalformat, width, height, depth, fixedsamplelocations);}
inline void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels){return _gl_loader_gltexsubimage1d               (target, level, xoffset, width, format, type, pixels);}
inline void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels){return _gl_loader_gltexsubimage2d               (target, level, xoffset, yoffset, width, height, format, type, pixels);}
inline void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels){return _gl_loader_gltexsubimage3d               (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);}
inline void glTextureBarrier(){return _gl_loader_gltexturebarrier               ();}
inline void glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer){return _gl_loader_gltexturebuffer               (texture, internalformat, buffer);}
inline void glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size){return _gl_loader_gltexturebufferrange               (texture, internalformat, buffer, offset, size);}
inline void glTextureParameterIiv(GLuint texture, GLenum pname, const GLint * params){return _gl_loader_gltextureparameteriiv               (texture, pname, params);}
inline void glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint * params){return _gl_loader_gltextureparameteriuiv               (texture, pname, params);}
inline void glTextureParameterf(GLuint texture, GLenum pname, GLfloat param){return _gl_loader_gltextureparameterf               (texture, pname, param);}
inline void glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat * param){return _gl_loader_gltextureparameterfv               (texture, pname, param);}
inline void glTextureParameteri(GLuint texture, GLenum pname, GLint param){return _gl_loader_gltextureparameteri               (texture, pname, param);}
inline void glTextureParameteriv(GLuint texture, GLenum pname, const GLint * param){return _gl_loader_gltextureparameteriv               (texture, pname, param);}
inline void glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width){return _gl_loader_gltexturestorage1d               (texture, levels, internalformat, width);}
inline void glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height){return _gl_loader_gltexturestorage2d               (texture, levels, internalformat, width, height);}
inline void glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations){return _gl_loader_gltexturestorage2dmultisample               (texture, samples, internalformat, width, height, fixedsamplelocations);}
inline void glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth){return _gl_loader_gltexturestorage3d               (texture, levels, internalformat, width, height, depth);}
inline void glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations){return _gl_loader_gltexturestorage3dmultisample               (texture, samples, internalformat, width, height, depth, fixedsamplelocations);}
inline void glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels){return _gl_loader_gltexturesubimage1d               (texture, level, xoffset, width, format, type, pixels);}
inline void glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels){return _gl_loader_gltexturesubimage2d               (texture, level, xoffset, yoffset, width, height, format, type, pixels);}
inline void glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels){return _gl_loader_gltexturesubimage3d               (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);}
inline void glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers){return _gl_loader_gltextureview               (texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);}
inline void glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer){return _gl_loader_gltransformfeedbackbufferbase               (xfb, index, buffer);}
inline void glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size){return _gl_loader_gltransformfeedbackbufferrange               (xfb, index, buffer, offset, size);}
inline void glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar * const * varyings, GLenum bufferMode){return _gl_loader_gltransformfeedbackvaryings               (program, count, varyings, bufferMode);}
inline void glTranslated(GLdouble x, GLdouble y, GLdouble z){return _gl_loader_gltranslated               (x, y, z);}
inline void glTranslatef(GLfloat x, GLfloat y, GLfloat z){return _gl_loader_gltranslatef               (x, y, z);}
inline void glUniform1d(GLint location, GLdouble x){return _gl_loader_gluniform1d               (location, x);}
inline void glUniform1dv(GLint location, GLsizei count, const GLdouble * value){return _gl_loader_gluniform1dv               (location, count, value);}
inline void glUniform1f(GLint location, GLfloat v0){return _gl_loader_gluniform1f               (location, v0);}
inline void glUniform1fv(GLint location, GLsizei count, const GLfloat * value){return _gl_loader_gluniform1fv               (location, count, value);}
inline void glUniform1i(GLint location, GLint v0){return _gl_loader_gluniform1i               (location, v0);}
inline void glUniform1iv(GLint location, GLsizei count, const GLint * value){return _gl_loader_gluniform1iv               (location, count, value);}
inline void glUniform1ui(GLint location, GLuint v0){return _gl_loader_gluniform1ui               (location, v0);}
inline void glUniform1uiv(GLint location, GLsizei count, const GLuint * value){return _gl_loader_gluniform1uiv               (location, count, value);}
inline void glUniform2d(GLint location, GLdouble x, GLdouble y){return _gl_loader_gluniform2d               (location, x, y);}
inline void glUniform2dv(GLint location, GLsizei count, const GLdouble * value){return _gl_loader_gluniform2dv               (location, count, value);}
inline void glUniform2f(GLint location, GLfloat v0, GLfloat v1){return _gl_loader_gluniform2f               (location, v0, v1);}
inline void glUniform2fv(GLint location, GLsizei count, const GLfloat * value){return _gl_loader_gluniform2fv               (location, count, value);}
inline void glUniform2i(GLint location, GLint v0, GLint v1){return _gl_loader_gluniform2i               (location, v0, v1);}
inline void glUniform2iv(GLint location, GLsizei count, const GLint * value){return _gl_loader_gluniform2iv               (location, count, value);}
inline void glUniform2ui(GLint location, GLuint v0, GLuint v1){return _gl_loader_gluniform2ui               (location, v0, v1);}
inline void glUniform2uiv(GLint location, GLsizei count, const GLuint * value){return _gl_loader_gluniform2uiv               (location, count, value);}
inline void glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z){return _gl_loader_gluniform3d               (location, x, y, z);}
inline void glUniform3dv(GLint location, GLsizei count, const GLdouble * value){return _gl_loader_gluniform3dv               (location, count, value);}
inline void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2){return _gl_loader_gluniform3f               (location, v0, v1, v2);}
inline void glUniform3fv(GLint location, GLsizei count, const GLfloat * value){return _gl_loader_gluniform3fv               (location, count, value);}
inline void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2){return _gl_loader_gluniform3i               (location, v0, v1, v2);}
inline void glUniform3iv(GLint location, GLsizei count, const GLint * value){return _gl_loader_gluniform3iv               (location, count, value);}
inline void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2){return _gl_loader_gluniform3ui               (location, v0, v1, v2);}
inline void glUniform3uiv(GLint location, GLsizei count, const GLuint * value){return _gl_loader_gluniform3uiv               (location, count, value);}
inline void glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w){return _gl_loader_gluniform4d               (location, x, y, z, w);}
inline void glUniform4dv(GLint location, GLsizei count, const GLdouble * value){return _gl_loader_gluniform4dv               (location, count, value);}
inline void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3){return _gl_loader_gluniform4f               (location, v0, v1, v2, v3);}
inline void glUniform4fv(GLint location, GLsizei count, const GLfloat * value){return _gl_loader_gluniform4fv               (location, count, value);}
inline void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3){return _gl_loader_gluniform4i               (location, v0, v1, v2, v3);}
inline void glUniform4iv(GLint location, GLsizei count, const GLint * value){return _gl_loader_gluniform4iv               (location, count, value);}
inline void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3){return _gl_loader_gluniform4ui               (location, v0, v1, v2, v3);}
inline void glUniform4uiv(GLint location, GLsizei count, const GLuint * value){return _gl_loader_gluniform4uiv               (location, count, value);}
inline void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding){return _gl_loader_gluniformblockbinding               (program, uniformBlockIndex, uniformBlockBinding);}
inline void glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_gluniformmatrix2dv               (location, count, transpose, value);}
inline void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_gluniformmatrix2fv               (location, count, transpose, value);}
inline void glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_gluniformmatrix2x3dv               (location, count, transpose, value);}
inline void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_gluniformmatrix2x3fv               (location, count, transpose, value);}
inline void glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_gluniformmatrix2x4dv               (location, count, transpose, value);}
inline void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_gluniformmatrix2x4fv               (location, count, transpose, value);}
inline void glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_gluniformmatrix3dv               (location, count, transpose, value);}
inline void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_gluniformmatrix3fv               (location, count, transpose, value);}
inline void glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_gluniformmatrix3x2dv               (location, count, transpose, value);}
inline void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_gluniformmatrix3x2fv               (location, count, transpose, value);}
inline void glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_gluniformmatrix3x4dv               (location, count, transpose, value);}
inline void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_gluniformmatrix3x4fv               (location, count, transpose, value);}
inline void glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_gluniformmatrix4dv               (location, count, transpose, value);}
inline void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_gluniformmatrix4fv               (location, count, transpose, value);}
inline void glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_gluniformmatrix4x2dv               (location, count, transpose, value);}
inline void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_gluniformmatrix4x2fv               (location, count, transpose, value);}
inline void glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value){return _gl_loader_gluniformmatrix4x3dv               (location, count, transpose, value);}
inline void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value){return _gl_loader_gluniformmatrix4x3fv               (location, count, transpose, value);}
inline void glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint * indices){return _gl_loader_gluniformsubroutinesuiv               (shadertype, count, indices);}
inline GLboolean glUnmapBuffer(GLenum target){return _gl_loader_glunmapbuffer               (target);}
inline GLboolean glUnmapNamedBuffer(GLuint buffer){return _gl_loader_glunmapnamedbuffer               (buffer);}
inline void glUseProgram(GLuint program){return _gl_loader_gluseprogram               (program);}
inline void glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program){return _gl_loader_gluseprogramstages               (pipeline, stages, program);}
inline void glValidateProgram(GLuint program){return _gl_loader_glvalidateprogram               (program);}
inline void glValidateProgramPipeline(GLuint pipeline){return _gl_loader_glvalidateprogrampipeline               (pipeline);}
inline void glVertex2d(GLdouble x, GLdouble y){return _gl_loader_glvertex2d               (x, y);}
inline void glVertex2dv(const GLdouble * v){return _gl_loader_glvertex2dv               (v);}
inline void glVertex2f(GLfloat x, GLfloat y){return _gl_loader_glvertex2f               (x, y);}
inline void glVertex2fv(const GLfloat * v){return _gl_loader_glvertex2fv               (v);}
inline void glVertex2i(GLint x, GLint y){return _gl_loader_glvertex2i               (x, y);}
inline void glVertex2iv(const GLint * v){return _gl_loader_glvertex2iv               (v);}
inline void glVertex2s(GLshort x, GLshort y){return _gl_loader_glvertex2s               (x, y);}
inline void glVertex2sv(const GLshort * v){return _gl_loader_glvertex2sv               (v);}
inline void glVertex3d(GLdouble x, GLdouble y, GLdouble z){return _gl_loader_glvertex3d               (x, y, z);}
inline void glVertex3dv(const GLdouble * v){return _gl_loader_glvertex3dv               (v);}
inline void glVertex3f(GLfloat x, GLfloat y, GLfloat z){return _gl_loader_glvertex3f               (x, y, z);}
inline void glVertex3fv(const GLfloat * v){return _gl_loader_glvertex3fv               (v);}
inline void glVertex3i(GLint x, GLint y, GLint z){return _gl_loader_glvertex3i               (x, y, z);}
inline void glVertex3iv(const GLint * v){return _gl_loader_glvertex3iv               (v);}
inline void glVertex3s(GLshort x, GLshort y, GLshort z){return _gl_loader_glvertex3s               (x, y, z);}
inline void glVertex3sv(const GLshort * v){return _gl_loader_glvertex3sv               (v);}
inline void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w){return _gl_loader_glvertex4d               (x, y, z, w);}
inline void glVertex4dv(const GLdouble * v){return _gl_loader_glvertex4dv               (v);}
inline void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w){return _gl_loader_glvertex4f               (x, y, z, w);}
inline void glVertex4fv(const GLfloat * v){return _gl_loader_glvertex4fv               (v);}
inline void glVertex4i(GLint x, GLint y, GLint z, GLint w){return _gl_loader_glvertex4i               (x, y, z, w);}
inline void glVertex4iv(const GLint * v){return _gl_loader_glvertex4iv               (v);}
inline void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w){return _gl_loader_glvertex4s               (x, y, z, w);}
inline void glVertex4sv(const GLshort * v){return _gl_loader_glvertex4sv               (v);}
inline void glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex){return _gl_loader_glvertexarrayattribbinding               (vaobj, attribindex, bindingindex);}
inline void glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset){return _gl_loader_glvertexarrayattribformat               (vaobj, attribindex, size, type, normalized, relativeoffset);}
inline void glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset){return _gl_loader_glvertexarrayattribiformat               (vaobj, attribindex, size, type, relativeoffset);}
inline void glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset){return _gl_loader_glvertexarrayattriblformat               (vaobj, attribindex, size, type, relativeoffset);}
inline void glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor){return _gl_loader_glvertexarraybindingdivisor               (vaobj, bindingindex, divisor);}
inline void glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer){return _gl_loader_glvertexarrayelementbuffer               (vaobj, buffer);}
inline void glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride){return _gl_loader_glvertexarrayvertexbuffer               (vaobj, bindingindex, buffer, offset, stride);}
inline void glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides){return _gl_loader_glvertexarrayvertexbuffers               (vaobj, first, count, buffers, offsets, strides);}
inline void glVertexAttrib1d(GLuint index, GLdouble x){return _gl_loader_glvertexattrib1d               (index, x);}
inline void glVertexAttrib1dv(GLuint index, const GLdouble * v){return _gl_loader_glvertexattrib1dv               (index, v);}
inline void glVertexAttrib1f(GLuint index, GLfloat x){return _gl_loader_glvertexattrib1f               (index, x);}
inline void glVertexAttrib1fv(GLuint index, const GLfloat * v){return _gl_loader_glvertexattrib1fv               (index, v);}
inline void glVertexAttrib1s(GLuint index, GLshort x){return _gl_loader_glvertexattrib1s               (index, x);}
inline void glVertexAttrib1sv(GLuint index, const GLshort * v){return _gl_loader_glvertexattrib1sv               (index, v);}
inline void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y){return _gl_loader_glvertexattrib2d               (index, x, y);}
inline void glVertexAttrib2dv(GLuint index, const GLdouble * v){return _gl_loader_glvertexattrib2dv               (index, v);}
inline void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y){return _gl_loader_glvertexattrib2f               (index, x, y);}
inline void glVertexAttrib2fv(GLuint index, const GLfloat * v){return _gl_loader_glvertexattrib2fv               (index, v);}
inline void glVertexAttrib2s(GLuint index, GLshort x, GLshort y){return _gl_loader_glvertexattrib2s               (index, x, y);}
inline void glVertexAttrib2sv(GLuint index, const GLshort * v){return _gl_loader_glvertexattrib2sv               (index, v);}
inline void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z){return _gl_loader_glvertexattrib3d               (index, x, y, z);}
inline void glVertexAttrib3dv(GLuint index, const GLdouble * v){return _gl_loader_glvertexattrib3dv               (index, v);}
inline void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z){return _gl_loader_glvertexattrib3f               (index, x, y, z);}
inline void glVertexAttrib3fv(GLuint index, const GLfloat * v){return _gl_loader_glvertexattrib3fv               (index, v);}
inline void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z){return _gl_loader_glvertexattrib3s               (index, x, y, z);}
inline void glVertexAttrib3sv(GLuint index, const GLshort * v){return _gl_loader_glvertexattrib3sv               (index, v);}
inline void glVertexAttrib4Nbv(GLuint index, const GLbyte * v){return _gl_loader_glvertexattrib4nbv               (index, v);}
inline void glVertexAttrib4Niv(GLuint index, const GLint * v){return _gl_loader_glvertexattrib4niv               (index, v);}
inline void glVertexAttrib4Nsv(GLuint index, const GLshort * v){return _gl_loader_glvertexattrib4nsv               (index, v);}
inline void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w){return _gl_loader_glvertexattrib4nub               (index, x, y, z, w);}
inline void glVertexAttrib4Nubv(GLuint index, const GLubyte * v){return _gl_loader_glvertexattrib4nubv               (index, v);}
inline void glVertexAttrib4Nuiv(GLuint index, const GLuint * v){return _gl_loader_glvertexattrib4nuiv               (index, v);}
inline void glVertexAttrib4Nusv(GLuint index, const GLushort * v){return _gl_loader_glvertexattrib4nusv               (index, v);}
inline void glVertexAttrib4bv(GLuint index, const GLbyte * v){return _gl_loader_glvertexattrib4bv               (index, v);}
inline void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w){return _gl_loader_glvertexattrib4d               (index, x, y, z, w);}
inline void glVertexAttrib4dv(GLuint index, const GLdouble * v){return _gl_loader_glvertexattrib4dv               (index, v);}
inline void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w){return _gl_loader_glvertexattrib4f               (index, x, y, z, w);}
inline void glVertexAttrib4fv(GLuint index, const GLfloat * v){return _gl_loader_glvertexattrib4fv               (index, v);}
inline void glVertexAttrib4iv(GLuint index, const GLint * v){return _gl_loader_glvertexattrib4iv               (index, v);}
inline void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w){return _gl_loader_glvertexattrib4s               (index, x, y, z, w);}
inline void glVertexAttrib4sv(GLuint index, const GLshort * v){return _gl_loader_glvertexattrib4sv               (index, v);}
inline void glVertexAttrib4ubv(GLuint index, const GLubyte * v){return _gl_loader_glvertexattrib4ubv               (index, v);}
inline void glVertexAttrib4uiv(GLuint index, const GLuint * v){return _gl_loader_glvertexattrib4uiv               (index, v);}
inline void glVertexAttrib4usv(GLuint index, const GLushort * v){return _gl_loader_glvertexattrib4usv               (index, v);}
inline void glVertexAttribBinding(GLuint attribindex, GLuint bindingindex){return _gl_loader_glvertexattribbinding               (attribindex, bindingindex);}
inline void glVertexAttribDivisor(GLuint index, GLuint divisor){return _gl_loader_glvertexattribdivisor               (index, divisor);}
inline void glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset){return _gl_loader_glvertexattribformat               (attribindex, size, type, normalized, relativeoffset);}
inline void glVertexAttribI1i(GLuint index, GLint x){return _gl_loader_glvertexattribi1i               (index, x);}
inline void glVertexAttribI1iv(GLuint index, const GLint * v){return _gl_loader_glvertexattribi1iv               (index, v);}
inline void glVertexAttribI1ui(GLuint index, GLuint x){return _gl_loader_glvertexattribi1ui               (index, x);}
inline void glVertexAttribI1uiv(GLuint index, const GLuint * v){return _gl_loader_glvertexattribi1uiv               (index, v);}
inline void glVertexAttribI2i(GLuint index, GLint x, GLint y){return _gl_loader_glvertexattribi2i               (index, x, y);}
inline void glVertexAttribI2iv(GLuint index, const GLint * v){return _gl_loader_glvertexattribi2iv               (index, v);}
inline void glVertexAttribI2ui(GLuint index, GLuint x, GLuint y){return _gl_loader_glvertexattribi2ui               (index, x, y);}
inline void glVertexAttribI2uiv(GLuint index, const GLuint * v){return _gl_loader_glvertexattribi2uiv               (index, v);}
inline void glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z){return _gl_loader_glvertexattribi3i               (index, x, y, z);}
inline void glVertexAttribI3iv(GLuint index, const GLint * v){return _gl_loader_glvertexattribi3iv               (index, v);}
inline void glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z){return _gl_loader_glvertexattribi3ui               (index, x, y, z);}
inline void glVertexAttribI3uiv(GLuint index, const GLuint * v){return _gl_loader_glvertexattribi3uiv               (index, v);}
inline void glVertexAttribI4bv(GLuint index, const GLbyte * v){return _gl_loader_glvertexattribi4bv               (index, v);}
inline void glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w){return _gl_loader_glvertexattribi4i               (index, x, y, z, w);}
inline void glVertexAttribI4iv(GLuint index, const GLint * v){return _gl_loader_glvertexattribi4iv               (index, v);}
inline void glVertexAttribI4sv(GLuint index, const GLshort * v){return _gl_loader_glvertexattribi4sv               (index, v);}
inline void glVertexAttribI4ubv(GLuint index, const GLubyte * v){return _gl_loader_glvertexattribi4ubv               (index, v);}
inline void glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w){return _gl_loader_glvertexattribi4ui               (index, x, y, z, w);}
inline void glVertexAttribI4uiv(GLuint index, const GLuint * v){return _gl_loader_glvertexattribi4uiv               (index, v);}
inline void glVertexAttribI4usv(GLuint index, const GLushort * v){return _gl_loader_glvertexattribi4usv               (index, v);}
inline void glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset){return _gl_loader_glvertexattribiformat               (attribindex, size, type, relativeoffset);}
inline void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer){return _gl_loader_glvertexattribipointer               (index, size, type, stride, pointer);}
inline void glVertexAttribL1d(GLuint index, GLdouble x){return _gl_loader_glvertexattribl1d               (index, x);}
inline void glVertexAttribL1dv(GLuint index, const GLdouble * v){return _gl_loader_glvertexattribl1dv               (index, v);}
inline void glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y){return _gl_loader_glvertexattribl2d               (index, x, y);}
inline void glVertexAttribL2dv(GLuint index, const GLdouble * v){return _gl_loader_glvertexattribl2dv               (index, v);}
inline void glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z){return _gl_loader_glvertexattribl3d               (index, x, y, z);}
inline void glVertexAttribL3dv(GLuint index, const GLdouble * v){return _gl_loader_glvertexattribl3dv               (index, v);}
inline void glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w){return _gl_loader_glvertexattribl4d               (index, x, y, z, w);}
inline void glVertexAttribL4dv(GLuint index, const GLdouble * v){return _gl_loader_glvertexattribl4dv               (index, v);}
inline void glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset){return _gl_loader_glvertexattriblformat               (attribindex, size, type, relativeoffset);}
inline void glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer){return _gl_loader_glvertexattriblpointer               (index, size, type, stride, pointer);}
inline void glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value){return _gl_loader_glvertexattribp1ui               (index, type, normalized, value);}
inline void glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value){return _gl_loader_glvertexattribp1uiv               (index, type, normalized, value);}
inline void glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value){return _gl_loader_glvertexattribp2ui               (index, type, normalized, value);}
inline void glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value){return _gl_loader_glvertexattribp2uiv               (index, type, normalized, value);}
inline void glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value){return _gl_loader_glvertexattribp3ui               (index, type, normalized, value);}
inline void glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value){return _gl_loader_glvertexattribp3uiv               (index, type, normalized, value);}
inline void glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value){return _gl_loader_glvertexattribp4ui               (index, type, normalized, value);}
inline void glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value){return _gl_loader_glvertexattribp4uiv               (index, type, normalized, value);}
inline void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer){return _gl_loader_glvertexattribpointer               (index, size, type, normalized, stride, pointer);}
inline void glVertexBindingDivisor(GLuint bindingindex, GLuint divisor){return _gl_loader_glvertexbindingdivisor               (bindingindex, divisor);}
inline void glVertexP2ui(GLenum type, GLuint value){return _gl_loader_glvertexp2ui               (type, value);}
inline void glVertexP2uiv(GLenum type, const GLuint * value){return _gl_loader_glvertexp2uiv               (type, value);}
inline void glVertexP3ui(GLenum type, GLuint value){return _gl_loader_glvertexp3ui               (type, value);}
inline void glVertexP3uiv(GLenum type, const GLuint * value){return _gl_loader_glvertexp3uiv               (type, value);}
inline void glVertexP4ui(GLenum type, GLuint value){return _gl_loader_glvertexp4ui               (type, value);}
inline void glVertexP4uiv(GLenum type, const GLuint * value){return _gl_loader_glvertexp4uiv               (type, value);}
inline void glVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer){return _gl_loader_glvertexpointer               (size, type, stride, pointer);}
inline void glViewport(GLint x, GLint y, GLsizei width, GLsizei height){return _gl_loader_glviewport               (x, y, width, height);}
inline void glViewportArrayv(GLuint first, GLsizei count, const GLfloat * v){return _gl_loader_glviewportarrayv               (first, count, v);}
inline void glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h){return _gl_loader_glviewportindexedf               (index, x, y, w, h);}
inline void glViewportIndexedfv(GLuint index, const GLfloat * v){return _gl_loader_glviewportindexedfv               (index, v);}
inline void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout){return _gl_loader_glwaitsync               (sync, flags, timeout);}
inline void glWindowPos2d(GLdouble x, GLdouble y){return _gl_loader_glwindowpos2d               (x, y);}
inline void glWindowPos2dv(const GLdouble * v){return _gl_loader_glwindowpos2dv               (v);}
inline void glWindowPos2f(GLfloat x, GLfloat y){return _gl_loader_glwindowpos2f               (x, y);}
inline void glWindowPos2fv(const GLfloat * v){return _gl_loader_glwindowpos2fv               (v);}
inline void glWindowPos2i(GLint x, GLint y){return _gl_loader_glwindowpos2i               (x, y);}
inline void glWindowPos2iv(const GLint * v){return _gl_loader_glwindowpos2iv               (v);}
inline void glWindowPos2s(GLshort x, GLshort y){return _gl_loader_glwindowpos2s               (x, y);}
inline void glWindowPos2sv(const GLshort * v){return _gl_loader_glwindowpos2sv               (v);}
inline void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z){return _gl_loader_glwindowpos3d               (x, y, z);}
inline void glWindowPos3dv(const GLdouble * v){return _gl_loader_glwindowpos3dv               (v);}
inline void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z){return _gl_loader_glwindowpos3f               (x, y, z);}
inline void glWindowPos3fv(const GLfloat * v){return _gl_loader_glwindowpos3fv               (v);}
inline void glWindowPos3i(GLint x, GLint y, GLint z){return _gl_loader_glwindowpos3i               (x, y, z);}
inline void glWindowPos3iv(const GLint * v){return _gl_loader_glwindowpos3iv               (v);}
inline void glWindowPos3s(GLshort x, GLshort y, GLshort z){return _gl_loader_glwindowpos3s               (x, y, z);}
inline void glWindowPos3sv(const GLshort * v){return _gl_loader_glwindowpos3sv               (v);}


#endif
